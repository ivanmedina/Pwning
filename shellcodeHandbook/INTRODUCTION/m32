GCC(1)                                GNU                               GCC(1)

NNAAMMEE
       gcc - GNU project C and C++ compiler

SSYYNNOOPPSSIISS
       gcc [--cc|--SS|--EE] [--ssttdd==_s_t_a_n_d_a_r_d]
           [--gg] [--ppgg] [--OO_l_e_v_e_l]
           [--WW_w_a_r_n...] [--WWppeeddaannttiicc]
           [--II_d_i_r...] [--LL_d_i_r...]
           [--DD_m_a_c_r_o[=_d_e_f_n]...] [--UU_m_a_c_r_o]
           [--ff_o_p_t_i_o_n...] [--mm_m_a_c_h_i_n_e_-_o_p_t_i_o_n...]
           [--oo _o_u_t_f_i_l_e] [@_f_i_l_e] _i_n_f_i_l_e...

       Only the most useful options are listed here; see below for the
       remainder.  gg++++ accepts mostly the same options as ggcccc.

DDEESSCCRRIIPPTTIIOONN
       When you invoke GCC, it normally does preprocessing, compilation,
       assembly and linking.  The "overall options" allow you to stop this
       process at an intermediate stage.  For example, the --cc option says not
       to run the linker.  Then the output consists of object files output by
       the assembler.

       Other options are passed on to one or more stages of processing.  Some
       options control the preprocessor and others the compiler itself.  Yet
       other options control the assembler and linker; most of these are not
       documented here, since you rarely need to use any of them.

       Most of the command-line options that you can use with GCC are useful
       for C programs; when an option is only useful with another language
       (usually C++), the explanation says so explicitly.  If the description
       for a particular option does not mention a source language, you can use
       that option with all supported languages.

       The usual way to run GCC is to run the executable called ggcccc, or
       _m_a_c_h_i_n_e--ggcccc when cross-compiling, or _m_a_c_h_i_n_e--ggcccc--_v_e_r_s_i_o_n to run a
       specific version of GCC.  When you compile C++ programs, you should
       invoke GCC as gg++++ instead.

       The ggcccc program accepts options and file names as operands.  Many
       options have multi-letter names; therefore multiple single-letter
       options may _n_o_t be grouped: --ddvv is very different from --dd --vv.

       You can mix options and other arguments.  For the most part, the order
       you use doesn't matter.  Order does matter when you use several options
       of the same kind; for example, if you specify --LL more than once, the
       directories are searched in the order specified.  Also, the placement
       of the --ll option is significant.

       Many options have long names starting with --ff or with --WW---for example,
       --ffmmoovvee--lloooopp--iinnvvaarriiaannttss, --WWffoorrmmaatt and so on.  Most of these have both
       positive and negative forms; the negative form of --ffffoooo is --ffnnoo--ffoooo.
       This manual documents only one of these two forms, whichever one is not
       the default.

OOPPTTIIOONNSS
   OOppttiioonn SSuummmmaarryy
       Here is a summary of all the options, grouped by type.  Explanations
       are in the following sections.

       _O_v_e_r_a_l_l _O_p_t_i_o_n_s
           --cc  --SS  --EE  --oo _f_i_l_e  --xx _l_a_n_g_u_a_g_e --vv  --######  ----hheellpp[==_c_l_a_s_s[,,......]]
           ----ttaarrggeett--hheellpp  ----vveerrssiioonn --ppaassss--eexxiitt--ccooddeess  --ppiippee  --ssppeeccss==_f_i_l_e
           --wwrraappppeerr @@_f_i_l_e  --ffffiillee--pprreeffiixx--mmaapp==_o_l_d==_n_e_w --ffpplluuggiinn==_f_i_l_e
           --ffpplluuggiinn--aarrgg--_n_a_m_e==_a_r_g --ffdduummpp--aaddaa--ssppeecc[--sslliimm]
           --ffaaddaa--ssppeecc--ppaarreenntt==_u_n_i_t  --ffdduummpp--ggoo--ssppeecc==_f_i_l_e

       _C _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
           --aannssii  --ssttdd==_s_t_a_n_d_a_r_d  --ffggnnuu8899--iinnlliinnee
           --ffppeerrmmiitttteedd--fflltt--eevvaall--mmeetthhooddss==_s_t_a_n_d_a_r_d --aauuxx--iinnffoo _f_i_l_e_n_a_m_e
           --ffaallllooww--ppaarraammeetteerrlleessss--vvaarriiaaddiicc--ffuunnccttiioonnss --ffnnoo--aassmm  --ffnnoo--bbuuiillttiinn
           --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n  --ffggiimmppllee --ffhhoosstteedd  --ffffrreeeessttaannddiinngg  --ffooppeennaacccc
           --ffooppeennmmpp  --ffooppeennmmpp--ssiimmdd --ffmmss--eexxtteennssiioonnss  --ffppllaann99--eexxtteennssiioonnss
           --ffssssoo--ssttrruucctt==_e_n_d_i_a_n_n_e_s_s --ffaallllooww--ssiinnggllee--pprreecciissiioonn  --ffccoonndd--mmiissmmaattcchh
           --ffllaaxx--vveeccttoorr--ccoonnvveerrssiioonnss --ffssiiggnneedd--bbiittffiieellddss  --ffssiiggnneedd--cchhaarr
           --ffuunnssiiggnneedd--bbiittffiieellddss  --ffuunnssiiggnneedd--cchhaarr

       _C_+_+ _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
           --ffaabbii--vveerrssiioonn==_n  --ffnnoo--aacccceessss--ccoonnttrrooll --ffaalliiggnneedd--nneeww==_n
           --ffaarrggss--iinn--oorrddeerr==_n  --ffcchheecckk--nneeww --ffccoonnsstteexxpprr--ddeepptthh==_n
           --ffccoonnsstteexxpprr--lloooopp--lliimmiitt==_n --ffffrriieenndd--iinnjjeeccttiioonn --ffnnoo--eelliiddee--ccoonnssttrruuccttoorrss
           --ffnnoo--eennffoorrccee--eehh--ssppeeccss --ffffoorr--ssccooppee  --ffnnoo--ffoorr--ssccooppee
           --ffnnoo--ggnnuu--kkeeyywwoorrddss --ffnnoo--iimmpplliicciitt--tteemmppllaatteess
           --ffnnoo--iimmpplliicciitt--iinnlliinnee--tteemmppllaatteess --ffnnoo--iimmpplleemmeenntt--iinnlliinneess
           --ffmmss--eexxtteennssiioonnss --ffnneeww--iinnhheerriittiinngg--ccttoorrss --ffnneeww--ttttpp--mmaattcchhiinngg
           --ffnnoo--nnoonnaannssii--bbuuiillttiinnss  --ffnnootthhrrooww--oopptt  --ffnnoo--ooppeerraattoorr--nnaammeess
           --ffnnoo--ooppttiioonnaall--ddiiaaggss  --ffppeerrmmiissssiivvee --ffnnoo--pprreettttyy--tteemmppllaatteess --ffrreeppoo
           --ffnnoo--rrttttii  --ffssiizzeedd--ddeeaallllooccaattiioonn --fftteemmppllaattee--bbaacckkttrraaccee--lliimmiitt==_n
           --fftteemmppllaattee--ddeepptthh==_n --ffnnoo--tthhrreeaaddssaaffee--ssttaattiiccss  --ffuussee--ccxxaa--aatteexxiitt
           --ffnnoo--wweeaakk  --nnoossttddiinncc++++ --ffvviissiibbiilliittyy--iinnlliinneess--hhiiddddeenn
           --ffvviissiibbiilliittyy--mmss--ccoommppaatt --ffeexxtt--nnuummeerriicc--lliitteerraallss --WWaabbii==_n  --WWaabbii--ttaagg
           --WWccoonnvveerrssiioonn--nnuullll  --WWccttoorr--ddttoorr--pprriivvaaccyy --WWddeelleettee--nnoonn--vviirrttuuaall--ddttoorr
           --WWlliitteerraall--ssuuffffiixx  --WWmmuullttiippllee--iinnhheerriittaannccee --WWnnaammeessppaacceess  --WWnnaarrrroowwiinngg
           --WWnnooeexxcceepptt  --WWnnooeexxcceepptt--ttyyppee  --WWccllaassss--mmeemmaacccceessss --WWnnoonn--vviirrttuuaall--ddttoorr
           --WWrreeoorrddeerr  --WWrreeggiisstteerr --WWeeffffcc++++  --WWssttrriicctt--nnuullll--sseennttiinneell  --WWtteemmppllaatteess
           --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd  --WWoolldd--ssttyyllee--ccaasstt --WWoovveerrllooaaddeedd--vviirrttuuaall
           --WWnnoo--ppmmff--ccoonnvveerrssiioonnss --WWssiiggnn--pprroommoo  --WWvviirrttuuaall--iinnhheerriittaannccee

       _O_b_j_e_c_t_i_v_e_-_C _a_n_d _O_b_j_e_c_t_i_v_e_-_C_+_+ _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
           --ffccoonnssttaanntt--ssttrriinngg--ccllaassss==_c_l_a_s_s_-_n_a_m_e --ffggnnuu--rruunnttiimmee  --ffnneexxtt--rruunnttiimmee
           --ffnnoo--nniill--rreecceeiivveerrss --ffoobbjjcc--aabbii--vveerrssiioonn==_n --ffoobbjjcc--ccaallll--ccxxxx--ccddttoorrss
           --ffoobbjjcc--ddiirreecctt--ddiissppaattcchh --ffoobbjjcc--eexxcceeppttiioonnss --ffoobbjjcc--ggcc --ffoobbjjcc--nniillcchheecckk
           --ffoobbjjcc--ssttdd==oobbjjcc11 --ffnnoo--llooccaall--iivvaarrss
           --ffiivvaarr--vviissiibbiilliittyy==[ppuubblliicc|pprrootteecctteedd|pprriivvaattee|ppaacckkaaggee]
           --ffrreeppllaaccee--oobbjjcc--ccllaasssseess --ffzzeerroo--lliinnkk --ggeenn--ddeeccllss --WWaassssiiggnn--iinntteerrcceepptt
           --WWnnoo--pprroottooccooll  --WWsseelleeccttoorr --WWssttrriicctt--sseelleeccttoorr--mmaattcchh
           --WWuunnddeeccllaarreedd--sseelleeccttoorr

       _D_i_a_g_n_o_s_t_i_c _M_e_s_s_a_g_e _F_o_r_m_a_t_t_i_n_g _O_p_t_i_o_n_s
           --ffmmeessssaaggee--lleennggtthh==_n --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==[oonnccee|eevveerryy--lliinnee]
           --ffddiiaaggnnoossttiiccss--ccoolloorr==[aauuttoo|nneevveerr|aallwwaayyss]
           --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn  --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--ccaarreett
           --ffddiiaaggnnoossttiiccss--ppaarrsseeaabbllee--ffiixxiittss  --ffddiiaaggnnoossttiiccss--ggeenneerraattee--ppaattcchh
           --ffddiiaaggnnoossttiiccss--sshhooww--tteemmppllaattee--ttrreeee --ffnnoo--eelliiddee--ttyyppee --ffnnoo--sshhooww--ccoolluummnn

       _W_a_r_n_i_n_g _O_p_t_i_o_n_s
           --ffssyynnttaaxx--oonnllyy  --ffmmaaxx--eerrrroorrss==_n  --WWppeeddaannttiicc --ppeeddaannttiicc--eerrrroorrss --ww
           --WWeexxttrraa  --WWaallll  --WWaaddddrreessss  --WWaaggggrreeggaattee--rreettuurrnn  --WWaalliiggnneedd--nneeww
           --WWaalllloocc--zzeerroo  --WWaalllloocc--ssiizzee--llaarrggeerr--tthhaann==_n --WWaallllooccaa
           --WWaallllooccaa--llaarrggeerr--tthhaann==_n --WWnnoo--aaggggrreessssiivvee--lloooopp--ooppttiimmiizzaattiioonnss
           --WWaarrrraayy--bboouunnddss  --WWaarrrraayy--bboouunnddss==_n --WWnnoo--aattttrriibbuutteess  --WWbbooooll--ccoommppaarree
           --WWbbooooll--ooppeerraattiioonn --WWnnoo--bbuuiillttiinn--ddeeccllaarraattiioonn--mmiissmmaattcchh
           --WWnnoo--bbuuiillttiinn--mmaaccrroo--rreeddeeffiinneedd  --WWcc9900--cc9999--ccoommppaatt  --WWcc9999--cc1111--ccoommppaatt
           --WWcc++++--ccoommppaatt  --WWcc++++1111--ccoommppaatt  --WWcc++++1144--ccoommppaatt --WWccaasstt--aalliiggnn
           --WWccaasstt--aalliiggnn==ssttrriicctt  --WWccaasstt--ffuunnccttiioonn--ttyyppee  --WWccaasstt--qquuaall
           --WWcchhaarr--ssuubbssccrriippttss  --WWcchhkkpp  --WWccaattcchh--vvaalluuee  --WWccaattcchh--vvaalluuee==_n
           --WWcclloobbbbeerreedd  --WWccoommmmeenntt  --WWccoonnddiittiioonnaallllyy--ssuuppppoorrtteedd --WWccoonnvveerrssiioonn
           --WWccoovveerraaggee--mmiissmmaattcchh  --WWnnoo--ccpppp  --WWddaanngglliinngg--eellssee  --WWddaattee--ttiimmee
           --WWddeelleettee--iinnccoommpplleettee --WWnnoo--ddeepprreeccaatteedd  --WWnnoo--ddeepprreeccaatteedd--ddeeccllaarraattiioonnss
           --WWnnoo--ddeessiiggnnaatteedd--iinniitt --WWddiissaabblleedd--ooppttiimmiizzaattiioonn
           --WWnnoo--ddiissccaarrddeedd--qquuaalliiffiieerrss  --WWnnoo--ddiissccaarrddeedd--aarrrraayy--qquuaalliiffiieerrss
           --WWnnoo--ddiivv--bbyy--zzeerroo  --WWddoouubbllee--pprroommoottiioonn --WWdduupplliiccaatteedd--bbrraanncchheess
           --WWdduupplliiccaatteedd--ccoonndd --WWeemmppttyy--bbooddyy  --WWeennuumm--ccoommppaarree  --WWnnoo--eennddiiff--llaabbeellss
           --WWeexxppaannssiioonn--ttoo--ddeeffiinneedd --WWeerrrroorr  --WWeerrrroorr==**  --WWeexxttrraa--sseemmii
           --WWffaattaall--eerrrroorrss --WWffllooaatt--eeqquuaall  --WWffoorrmmaatt  --WWffoorrmmaatt==22
           --WWnnoo--ffoorrmmaatt--ccoonnttaaiinnss--nnuull  --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss
           --WWffoorrmmaatt--nnoonnlliitteerraall --WWffoorrmmaatt--oovveerrffllooww==_n --WWffoorrmmaatt--sseeccuurriittyy
           --WWffoorrmmaatt--ssiiggnneeddnneessss  --WWffoorrmmaatt--ttrruunnccaattiioonn==_n --WWffoorrmmaatt--yy22kk
           --WWffrraammee--aaddddrreessss --WWffrraammee--llaarrggeerr--tthhaann==_l_e_n  --WWnnoo--ffrreeee--nnoonnhheeaapp--oobbjjeecctt
           --WWjjuummpp--mmiisssseess--iinniitt --WWiiff--nnoott--aalliiggnneedd --WWiiggnnoorreedd--qquuaalliiffiieerrss
           --WWiiggnnoorreedd--aattttrriibbuutteess  --WWiinnccoommppaattiibbllee--ppooiinntteerr--ttyyppeess --WWiimmpplliicciitt
           --WWiimmpplliicciitt--ffaalllltthhrroouugghh  --WWiimmpplliicciitt--ffaalllltthhrroouugghh==_n
           --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn  --WWiimmpplliicciitt--iinntt --WWiinniitt--sseellff
           --WWiinnlliinnee  --WWnnoo--iinntt--ccoonnvveerrssiioonn  --WWiinntt--iinn--bbooooll--ccoonntteexxtt
           --WWnnoo--iinntt--ttoo--ppooiinntteerr--ccaasstt  --WWiinnvvaalliidd--mmeemmoorryy--mmooddeell
           --WWnnoo--iinnvvaalliidd--ooffffsseettooff --WWiinnvvaalliidd--ppcchh  --WWllaarrggeerr--tthhaann==_l_e_n --WWllooggiiccaall--oopp
           --WWllooggiiccaall--nnoott--ppaarreenntthheesseess  --WWlloonngg--lloonngg --WWmmaaiinn
           --WWmmaayybbee--uunniinniittiiaalliizzeedd  --WWmmeemmsseett--eelltt--ssiizzee  --WWmmeemmsseett--ttrraannssppoosseedd--aarrggss
           --WWmmiisslleeaaddiinngg--iinnddeennttaattiioonn  --WWmmiissssiinngg--aattttrriibbuutteess --WWmmiissssiinngg--bbrraacceess
           --WWmmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss  --WWmmiissssiinngg--iinncclluuddee--ddiirrss --WWnnoo--mmuullttiicchhaarr
           --WWmmuullttiissttaatteemmeenntt--mmaaccrrooss  --WWnnoonnnnuullll  --WWnnoonnnnuullll--ccoommppaarree
           --WWnnoorrmmaalliizzeedd==[nnoonnee|iidd|nnffcc|nnffkkcc] --WWnnuullll--ddeerreeffeerreennccee  --WWooddrr
           --WWnnoo--oovveerrffllooww  --WWooppeennmmpp--ssiimmdd --WWoovveerrrriiddee--iinniitt--ssiiddee--eeffffeeccttss
           --WWoovveerrlleennggtthh--ssttrriinnggss --WWppaacckkeedd  --WWppaacckkeedd--bbiittffiieelldd--ccoommppaatt
           --WWppaacckkeedd--nnoott--aalliiggnneedd --WWppaaddddeedd --WWppaarreenntthheesseess
           --WWnnoo--ppeeddaannttiicc--mmss--ffoorrmmaatt --WWppllaacceemmeenntt--nneeww  --WWppllaacceemmeenntt--nneeww==_n
           --WWppooiinntteerr--aarriitthh  --WWppooiinntteerr--ccoommppaarree  --WWnnoo--ppooiinntteerr--ttoo--iinntt--ccaasstt
           --WWnnoo--pprraaggmmaass  --WWrreedduunnddaanntt--ddeeccllss  --WWrreessttrriicctt  --WWnnoo--rreettuurrnn--llooccaall--aaddddrr
           --WWrreettuurrnn--ttyyppee  --WWsseeqquueennccee--ppooiinntt  --WWsshhaaddooww  --WWnnoo--sshhaaddooww--iivvaarr
           --WWsshhaaddooww==gglloobbaall,,  --WWsshhaaddooww==llooccaall,,  --WWsshhaaddooww==ccoommppaattiibbllee--llooccaall
           --WWsshhiifftt--oovveerrffllooww  --WWsshhiifftt--oovveerrffllooww==_n --WWsshhiifftt--ccoouunntt--nneeggaattiivvee
           --WWsshhiifftt--ccoouunntt--oovveerrffllooww  --WWsshhiifftt--nneeggaattiivvee--vvaalluuee --WWssiiggnn--ccoommppaarree
           --WWssiiggnn--ccoonnvveerrssiioonn  --WWffllooaatt--ccoonnvveerrssiioonn --WWnnoo--ssccaallaarr--ssttoorraaggee--oorrddeerr
           --WWssiizzeeooff--ppooiinntteerr--ddiivv --WWssiizzeeooff--ppooiinntteerr--mmeemmaacccceessss
           --WWssiizzeeooff--aarrrraayy--aarrgguummeenntt --WWssttaacckk--pprrootteeccttoorr  --WWssttaacckk--uussaaggee==_l_e_n
           --WWssttrriicctt--aalliiaassiinngg --WWssttrriicctt--aalliiaassiinngg==nn  --WWssttrriicctt--oovveerrffllooww
           --WWssttrriicctt--oovveerrffllooww==_n --WWssttrriinnggoopp--oovveerrffllooww==_n --WWssttrriinnggoopp--ttrruunnccaattiioonn
           --WWssuuggggeesstt--aattttrriibbuuttee==[ppuurree|ccoonnsstt|nnoorreettuurrnn|ffoorrmmaatt|mmaalllloocc]
           --WWssuuggggeesstt--ffiinnaall--ttyyppeess   --WWssuuggggeesstt--ffiinnaall--mmeetthhooddss  --WWssuuggggeesstt--oovveerrrriiddee
           --WWmmiissssiinngg--ffoorrmmaatt--aattttrriibbuuttee  --WWssuubboobbjjeecctt--lliinnkkaaggee --WWsswwiittcchh
           --WWsswwiittcchh--bbooooll  --WWsswwiittcchh--ddeeffaauulltt  --WWsswwiittcchh--eennuumm --WWsswwiittcchh--uunnrreeaacchhaabbllee
           --WWssyynncc--nnaanndd --WWssyysstteemm--hheeaaddeerrss  --WWttaauuttoollooggiiccaall--ccoommppaarree  --WWttrraammppoolliinneess
           --WWttrriiggrraapphhss --WWttyyppee--lliimmiittss  --WWuunnddeeff --WWuunniinniittiiaalliizzeedd
           --WWuunnkknnoowwnn--pprraaggmmaass --WWuunnssuuffffiixxeedd--ffllooaatt--ccoonnssttaannttss  --WWuunnuusseedd
           --WWuunnuusseedd--ffuunnccttiioonn --WWuunnuusseedd--llaabbeell  --WWuunnuusseedd--llooccaall--ttyyppeeddeeffss
           --WWuunnuusseedd--mmaaccrrooss --WWuunnuusseedd--ppaarraammeetteerr  --WWnnoo--uunnuusseedd--rreessuulltt
           --WWuunnuusseedd--vvaalluuee  --WWuunnuusseedd--vvaarriiaabbllee --WWuunnuusseedd--ccoonnsstt--vvaarriiaabbllee
           --WWuunnuusseedd--ccoonnsstt--vvaarriiaabbllee==_n --WWuunnuusseedd--bbuutt--sseett--ppaarraammeetteerr
           --WWuunnuusseedd--bbuutt--sseett--vvaarriiaabbllee --WWuusseelleessss--ccaasstt  --WWvvaarriiaaddiicc--mmaaccrrooss
           --WWvveeccttoorr--ooppeerraattiioonn--ppeerrffoorrmmaannccee --WWvvllaa  --WWvvllaa--llaarrggeerr--tthhaann==_n
           --WWvvoollaattiillee--rreeggiisstteerr--vvaarr  --WWwwrriittee--ssttrriinnggss
           --WWzzeerroo--aass--nnuullll--ppooiinntteerr--ccoonnssttaanntt  --WWhhssaa

       _C _a_n_d _O_b_j_e_c_t_i_v_e_-_C_-_o_n_l_y _W_a_r_n_i_n_g _O_p_t_i_o_n_s
           --WWbbaadd--ffuunnccttiioonn--ccaasstt  --WWmmiissssiinngg--ddeeccllaarraattiioonnss
           --WWmmiissssiinngg--ppaarraammeetteerr--ttyyppee  --WWmmiissssiinngg--pprroottoottyyppeess  --WWnneesstteedd--eexxtteerrnnss
           --WWoolldd--ssttyyllee--ddeeccllaarraattiioonn  --WWoolldd--ssttyyllee--ddeeffiinniittiioonn --WWssttrriicctt--pprroottoottyyppeess
           --WWttrraaddiittiioonnaall  --WWttrraaddiittiioonnaall--ccoonnvveerrssiioonn
           --WWddeeccllaarraattiioonn--aafftteerr--ssttaatteemmeenntt  --WWppooiinntteerr--ssiiggnn

       _D_e_b_u_g_g_i_n_g _O_p_t_i_o_n_s
           --gg  --gg_l_e_v_e_l  --ggddwwaarrff  --ggddwwaarrff--_v_e_r_s_i_o_n --ggggddbb  --ggrreeccoorrdd--ggcccc--sswwiittcchheess
           --ggnnoo--rreeccoorrdd--ggcccc--sswwiittcchheess --ggssttaabbss  --ggssttaabbss++  --ggssttrriicctt--ddwwaarrff
           --ggnnoo--ssttrriicctt--ddwwaarrff --ggaass--lloocc--ssuuppppoorrtt  --ggnnoo--aass--lloocc--ssuuppppoorrtt
           --ggaass--llooccvviieeww--ssuuppppoorrtt  --ggnnoo--aass--llooccvviieeww--ssuuppppoorrtt --ggccoolluummnn--iinnffoo
           --ggnnoo--ccoolluummnn--iinnffoo --ggssttaatteemmeenntt--ffrroonnttiieerrss  --ggnnoo--ssttaatteemmeenntt--ffrroonnttiieerrss
           --ggvvaarriiaabbllee--llooccaattiioonn--vviieewwss  --ggnnoo--vvaarriiaabbllee--llooccaattiioonn--vviieewwss
           --ggiinntteerrnnaall--rreesseett--llooccaattiioonn--vviieewwss  --ggnnoo--iinntteerrnnaall--rreesseett--llooccaattiioonn--vviieewwss
           --ggiinnlliinnee--ppooiinnttss  --ggnnoo--iinnlliinnee--ppooiinnttss --ggvvmmss  --ggxxccooffff  --ggxxccooffff++
           --ggzz[==_t_y_p_e] --ffddeebbuugg--pprreeffiixx--mmaapp==_o_l_d==_n_e_w  --ffddeebbuugg--ttyyppeess--sseeccttiioonn
           --ffnnoo--eelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ttyyppeess --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd[==_s_p_e_c_-
           _l_i_s_t] --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ssyymmbboollss  --ffeemmiitt--ccllaassss--ddeebbuugg--aallwwaayyss
           --ffnnoo--mmeerrggee--ddeebbuugg--ssttrriinnggss  --ffnnoo--ddwwaarrff22--ccffii--aassmm --ffvvaarr--ttrraacckkiinngg
           --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss

       _O_p_t_i_m_i_z_a_t_i_o_n _O_p_t_i_o_n_s
           --ffaaggggrreessssiivvee--lloooopp--ooppttiimmiizzaattiioonnss  --ffaalliiggnn--ffuunnccttiioonnss[[==_n]]
           --ffaalliiggnn--jjuummppss[[==_n]] --ffaalliiggnn--llaabbeellss[[==_n]]  --ffaalliiggnn--llooooppss[[==_n]]
           --ffaassssoocciiaattiivvee--mmaatthh  --ffaauuttoo--pprrooffiillee  --ffaauuttoo--pprrooffiillee[[==_p_a_t_h]]
           --ffaauuttoo--iinncc--ddeecc  --ffbbrraanncchh--pprroobbaabbiilliittiieess
           --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee  --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee22
           --ffbbttrr--bbbb--eexxcclluussiivvee  --ffccaalllleerr--ssaavveess --ffccoommbbiinnee--ssttaacckk--aaddjjuussttmmeennttss
           --ffccoonnsseerrvvee--ssttaacckk --ffccoommppaarree--eelliimm  --ffccpprroopp--rreeggiisstteerrss  --ffccrroossssjjuummppiinngg
           --ffccssee--ffoollllooww--jjuummppss  --ffccssee--sskkiipp--bblloocckkss  --ffccxx--ffoorrttrraann--rruulleess
           --ffccxx--lliimmiitteedd--rraannggee --ffddaattaa--sseeccttiioonnss  --ffddccee  --ffddeellaayyeedd--bbrraanncchh
           --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss  --ffddeevviirrttuuaalliizzee
           --ffddeevviirrttuuaalliizzee--ssppeeccuullaattiivveellyy --ffddeevviirrttuuaalliizzee--aatt--llttrraannss  --ffddssee
           --ffeeaarrllyy--iinnlliinniinngg  --ffiippaa--ssrraa  --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss
           --ffffaatt--llttoo--oobbjjeeccttss --ffffaasstt--mmaatthh  --ffffiinniittee--mmaatthh--oonnllyy  --ffffllooaatt--ssttoorree
           --ffeexxcceessss--pprreecciissiioonn==_s_t_y_l_e --ffffoorrwwaarrdd--pprrooppaaggaattee  --ffffpp--ccoonnttrraacctt==_s_t_y_l_e
           --ffffuunnccttiioonn--sseeccttiioonnss --ffggccssee  --ffggccssee--aafftteerr--rreellooaadd  --ffggccssee--llaass
           --ffggccssee--llmm  --ffggrraapphhiittee--iiddeennttiittyy --ffggccssee--ssmm  --ffhhooiisstt--aaddjjaacceenntt--llooaaddss
           --ffiiff--ccoonnvveerrssiioonn --ffiiff--ccoonnvveerrssiioonn22  --ffiinnddiirreecctt--iinnlliinniinngg
           --ffiinnlliinnee--ffuunnccttiioonnss  --ffiinnlliinnee--ffuunnccttiioonnss--ccaalllleedd--oonnccee
           --ffiinnlliinnee--lliimmiitt==_n --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss  --ffiippaa--ccpp  --ffiippaa--ccpp--cclloonnee
           --ffiippaa--bbiitt--ccpp --ffiippaa--vvrrpp --ffiippaa--ppttaa  --ffiippaa--pprrooffiillee  --ffiippaa--ppuurree--ccoonnsstt
           --ffiippaa--rreeffeerreennccee  --ffiippaa--iiccff --ffiirraa--aallggoorriitthhmm==_a_l_g_o_r_i_t_h_m
           --ffiirraa--rreeggiioonn==_r_e_g_i_o_n  --ffiirraa--hhooiisstt--pprreessssuurree --ffiirraa--lloooopp--pprreessssuurree
           --ffnnoo--iirraa--sshhaarree--ssaavvee--sslloottss --ffnnoo--iirraa--sshhaarree--ssppiillll--sslloottss
           --ffiissoollaattee--eerrrroonneeoouuss--ppaatthhss--ddeerreeffeerreennccee
           --ffiissoollaattee--eerrrroonneeoouuss--ppaatthhss--aattttrriibbuuttee --ffiivvooppttss
           --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss  --ffkkeeeepp--ssttaattiicc--ffuunnccttiioonnss
           --ffkkeeeepp--ssttaattiicc--ccoonnssttss  --fflliimmiitt--ffuunnccttiioonn--aalliiggnnmmeenntt
           --fflliivvee--rraannggee--sshhrriinnkkaaggee --fflloooopp--bblloocckk  --fflloooopp--iinntteerrcchhaannggee
           --fflloooopp--ssttrriipp--mmiinnee --fflloooopp--uunnrroollll--aanndd--jjaamm  --fflloooopp--nneesstt--ooppttiimmiizzee
           --fflloooopp--ppaarraalllleelliizzee--aallll  --ffllrraa--rreemmaatt  --ffllttoo  --ffllttoo--ccoommpprreessssiioonn--lleevveell
           --ffllttoo--ppaarrttiittiioonn==_a_l_g  --ffmmeerrggee--aallll--ccoonnssttaannttss --ffmmeerrggee--ccoonnssttaannttss
           --ffmmoodduulloo--sscchheedd  --ffmmoodduulloo--sscchheedd--aallllooww--rreeggmmoovveess
           --ffmmoovvee--lloooopp--iinnvvaarriiaannttss  --ffnnoo--bbrraanncchh--ccoouunntt--rreegg --ffnnoo--ddeeffeerr--ppoopp
           --ffnnoo--ffpp--iinntt--bbuuiillttiinn--iinneexxaacctt  --ffnnoo--ffuunnccttiioonn--ccssee
           --ffnnoo--gguueessss--bbrraanncchh--pprroobbaabbiilliittyy  --ffnnoo--iinnlliinnee  --ffnnoo--mmaatthh--eerrrrnnoo
           --ffnnoo--ppeeeepphhoollee --ffnnoo--ppeeeepphhoollee22  --ffnnoo--pprriinnttff--rreettuurrnn--vvaalluuee
           --ffnnoo--sscchheedd--iinntteerrbblloocckk --ffnnoo--sscchheedd--ssppeecc  --ffnnoo--ssiiggnneedd--zzeerrooss
           --ffnnoo--ttoopplleevveell--rreeoorrddeerr  --ffnnoo--ttrraappppiinngg--mmaatthh
           --ffnnoo--zzeerroo--iinniittiiaalliizzeedd--iinn--bbssss --ffoommiitt--ffrraammee--ppooiinntteerr
           --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss --ffppaarrttiiaall--iinnlliinniinngg  --ffppeeeell--llooooppss
           --ffpprreeddiiccttiivvee--ccoommmmoonniinngg --ffpprreeffeettcchh--lloooopp--aarrrraayyss --ffpprrooffiillee--ccoorrrreeccttiioonn
           --ffpprrooffiillee--uussee  --ffpprrooffiillee--uussee==_p_a_t_h  --ffpprrooffiillee--vvaalluueess
           --ffpprrooffiillee--rreeoorrddeerr--ffuunnccttiioonnss --ffrreecciipprrooccaall--mmaatthh  --ffrreeee
           --ffrreennaammee--rreeggiisstteerrss  --ffrreeoorrddeerr--bblloocckkss
           --ffrreeoorrddeerr--bblloocckkss--aallggoorriitthhmm==_a_l_g_o_r_i_t_h_m --ffrreeoorrddeerr--bblloocckkss--aanndd--ppaarrttiittiioonn
           --ffrreeoorrddeerr--ffuunnccttiioonnss --ffrreerruunn--ccssee--aafftteerr--lloooopp
           --ffrreesscchheedduullee--mmoodduulloo--sscchheedduulleedd--llooooppss --ffrroouunnddiinngg--mmaatthh
           --ffsscchheedd22--uussee--ssuuppeerrbblloocckkss  --ffsscchheedd--pprreessssuurree --ffsscchheedd--ssppeecc--llooaadd
           --ffsscchheedd--ssppeecc--llooaadd--ddaannggeerroouuss --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp[[==_n]]
           --ffsscchheedd--ssttaalllleedd--iinnssnnss[[==_n]] --ffsscchheedd--ggrroouupp--hheeuurriissttiicc
           --ffsscchheedd--ccrriittiiccaall--ppaatthh--hheeuurriissttiicc --ffsscchheedd--ssppeecc--iinnssnn--hheeuurriissttiicc
           --ffsscchheedd--rraannkk--hheeuurriissttiicc --ffsscchheedd--llaasstt--iinnssnn--hheeuurriissttiicc
           --ffsscchheedd--ddeepp--ccoouunntt--hheeuurriissttiicc --ffsscchheedduullee--ffuussiioonn --ffsscchheedduullee--iinnssnnss
           --ffsscchheedduullee--iinnssnnss22  --ffsseeccttiioonn--aanncchhoorrss --ffsseelleeccttiivvee--sscchheedduulliinngg
           --ffsseelleeccttiivvee--sscchheedduulliinngg22 --ffsseell--sscchheedd--ppiippeelliinniinngg
           --ffsseell--sscchheedd--ppiippeelliinniinngg--oouutteerr--llooooppss --ffsseemmaannttiicc--iinntteerrppoossiittiioonn
           --ffsshhrriinnkk--wwrraapp  --ffsshhrriinnkk--wwrraapp--sseeppaarraattee --ffssiiggnnaalliinngg--nnaannss
           --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt  --ffsspplliitt--iivvss--iinn--uunnrroolllleerr  --ffsspplliitt--llooooppss
           --ffsspplliitt--ppaatthhss --ffsspplliitt--wwiiddee--ttyyppeess  --ffssssaa--bbaacckkpprroopp  --ffssssaa--pphhiioopptt
           --ffssttddaarrgg--oopptt  --ffssttoorree--mmeerrggiinngg  --ffssttrriicctt--aalliiaassiinngg --fftthhrreeaadd--jjuummppss
           --ffttrraacceerr  --ffttrreeee--bbiitt--ccccpp --ffttrreeee--bbuuiillttiinn--ccaallll--ddccee  --ffttrreeee--ccccpp
           --ffttrreeee--cchh --ffttrreeee--ccooaalleessccee--vvaarrss  --ffttrreeee--ccooppyy--pprroopp  --ffttrreeee--ddccee
           --ffttrreeee--ddoommiinnaattoorr--ooppttss --ffttrreeee--ddssee  --ffttrreeee--ffoorrwwpprroopp  --ffttrreeee--ffrree
           --ffccooddee--hhooiissttiinngg --ffttrreeee--lloooopp--iiff--ccoonnvveerrtt  --ffttrreeee--lloooopp--iimm
           --ffttrreeee--pphhiipprroopp  --ffttrreeee--lloooopp--ddiissttrriibbuuttiioonn
           --ffttrreeee--lloooopp--ddiissttrriibbuuttee--ppaatttteerrnnss --ffttrreeee--lloooopp--iivvccaannoonn
           --ffttrreeee--lloooopp--lliinneeaarr  --ffttrreeee--lloooopp--ooppttiimmiizzee --ffttrreeee--lloooopp--vveeccttoorriizzee
           --ffttrreeee--ppaarraalllleelliizzee--llooooppss==_n  --ffttrreeee--pprree  --ffttrreeee--ppaarrttiiaall--pprree
           --ffttrreeee--ppttaa --ffttrreeee--rreeaassssoocc  --ffttrreeee--ssiinnkk  --ffttrreeee--ssllssrr  --ffttrreeee--ssrraa
           --ffttrreeee--sswwiittcchh--ccoonnvveerrssiioonn  --ffttrreeee--ttaaiill--mmeerrggee --ffttrreeee--tteerr
           --ffttrreeee--vveeccttoorriizzee  --ffttrreeee--vvrrpp  --ffuunnccoonnssttrraaiinneedd--ccoommmmoonnss
           --ffuunniitt--aatt--aa--ttiimmee  --ffuunnrroollll--aallll--llooooppss  --ffuunnrroollll--llooooppss
           --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss  --ffuunnsswwiittcchh--llooooppss --ffiippaa--rraa
           --ffvvaarriiaabbllee--eexxppaannssiioonn--iinn--uunnrroolllleerr  --ffvveecctt--ccoosstt--mmooddeell  --ffvvpptt --ffwweebb
           --ffwwhhoollee--pprrooggrraamm  --ffwwppaa  --ffuussee--lliinnkkeerr--pplluuggiinn ----ppaarraamm _n_a_m_e==_v_a_l_u_e --OO
           --OO00  --OO11  --OO22  --OO33  --OOss  --OOffaasstt  --OOgg

       _P_r_o_g_r_a_m _I_n_s_t_r_u_m_e_n_t_a_t_i_o_n _O_p_t_i_o_n_s
           --pp  --ppgg  --ffpprrooffiillee--aarrccss  ----ccoovveerraaggee  --fftteesstt--ccoovveerraaggee
           --ffpprrooffiillee--aabbss--ppaatthh --ffpprrooffiillee--ddiirr==_p_a_t_h  --ffpprrooffiillee--ggeenneerraattee
           --ffpprrooffiillee--ggeenneerraattee==_p_a_t_h --ffssaanniittiizzee==_s_t_y_l_e  --ffssaanniittiizzee--rreeccoovveerr
           --ffssaanniittiizzee--rreeccoovveerr==_s_t_y_l_e --ffaassaann--sshhaaddooww--ooffffsseett==_n_u_m_b_e_r
           --ffssaanniittiizzee--sseeccttiioonnss==_s_1,,_s_2,,......  --ffssaanniittiizzee--uunnddeeffiinneedd--ttrraapp--oonn--eerrrroorr
           --ffbboouunnddss--cchheecckk --ffcchheecckk--ppooiinntteerr--bboouunnddss  --ffcchhkkpp--cchheecckk--iinnccoommpplleettee--ttyyppee
           --ffcchhkkpp--ffiirrsstt--ffiieelldd--hhaass--oowwnn--bboouunnddss  --ffcchhkkpp--nnaarrrrooww--bboouunnddss
           --ffcchhkkpp--nnaarrrrooww--ttoo--iinnnneerrmmoosstt--aarrrraayy  --ffcchhkkpp--ooppttiimmiizzee
           --ffcchhkkpp--uussee--ffaasstt--ssttrriinngg--ffuunnccttiioonnss  --ffcchhkkpp--uussee--nnoocchhkk--ssttrriinngg--ffuunnccttiioonnss
           --ffcchhkkpp--uussee--ssttaattiicc--bboouunnddss  --ffcchhkkpp--uussee--ssttaattiicc--ccoonnsstt--bboouunnddss
           --ffcchhkkpp--ttrreeaatt--zzeerroo--ddyynnaammiicc--ssiizzee--aass--iinnffiinniittee  --ffcchhkkpp--cchheecckk--rreeaadd
           --ffcchhkkpp--cchheecckk--rreeaadd  --ffcchhkkpp--cchheecckk--wwrriittee  --ffcchhkkpp--ssttoorree--bboouunnddss
           --ffcchhkkpp--iinnssttrruummeenntt--ccaallllss  --ffcchhkkpp--iinnssttrruummeenntt--mmaarrkkeedd--oonnllyy
           --ffcchhkkpp--uussee--wwrraappppeerrss  --ffcchhkkpp--fflleexxiibbllee--ssttrruucctt--ttrraaiilliinngg--aarrrraayyss
           --ffccff--pprrootteeccttiioonn==[ffuullll|bbrraanncchh|rreettuurrnn|nnoonnee] --ffssttaacckk--pprrootteeccttoorr
           --ffssttaacckk--pprrootteeccttoorr--aallll  --ffssttaacckk--pprrootteeccttoorr--ssttrroonngg
           --ffssttaacckk--pprrootteeccttoorr--eexxpplliicciitt  --ffssttaacckk--cchheecckk
           --ffssttaacckk--lliimmiitt--rreeggiisstteerr==_r_e_g  --ffssttaacckk--lliimmiitt--ssyymmbbooll==_s_y_m
           --ffnnoo--ssttaacckk--lliimmiitt  --ffsspplliitt--ssttaacckk --ffvvttaabbllee--vveerriiffyy==[ssttdd|pprreeiinniitt|nnoonnee]
           --ffvvttvv--ccoouunnttss  --ffvvttvv--ddeebbuugg --ffiinnssttrruummeenntt--ffuunnccttiioonnss
           --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffuunnccttiioonn--lliisstt==_s_y_m,,_s_y_m,,......
           --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffiillee--lliisstt==_f_i_l_e,,_f_i_l_e,,......

       _P_r_e_p_r_o_c_e_s_s_o_r _O_p_t_i_o_n_s
           --AA_q_u_e_s_t_i_o_n==_a_n_s_w_e_r --AA--_q_u_e_s_t_i_o_n[==_a_n_s_w_e_r] --CC  --CCCC  --DD_m_a_c_r_o[==_d_e_f_n] --ddDD
           --ddII  --ddMM  --ddNN  --ddUU --ffddeebbuugg--ccpppp  --ffddiirreeccttiivveess--oonnllyy
           --ffddoollllaarrss--iinn--iiddeennttiiffiieerrss --ffeexxeecc--cchhaarrsseett==_c_h_a_r_s_e_t
           --ffeexxtteennddeedd--iiddeennttiiffiieerrss --ffiinnppuutt--cchhaarrsseett==_c_h_a_r_s_e_t
           --ffmmaaccrroo--pprreeffiixx--mmaapp==_o_l_d==_n_e_w --ffnnoo--ccaannoonniiccaall--ssyysstteemm--hheeaaddeerrss
           --ffppcchh--ddeeppss  --ffppcchh--pprreepprroocceessss --ffpprreepprroocceesssseedd --ffttaabbssttoopp==_w_i_d_t_h
           --ffttrraacckk--mmaaccrroo--eexxppaannssiioonn --ffwwiiddee--eexxeecc--cchhaarrsseett==_c_h_a_r_s_e_t
           --ffwwoorrkkiinngg--ddiirreeccttoorryy --HH  --iimmaaccrrooss _f_i_l_e  --iinncclluuddee _f_i_l_e --MM  --MMDD  --MMFF
           --MMGG  --MMMM  --MMMMDD  --MMPP  --MMQQ  --MMTT --nnoo--iinntteeggrraatteedd--ccpppp  --PP  --pptthhrreeaadd
           --rreemmaapp --ttrraaddiittiioonnaall  --ttrraaddiittiioonnaall--ccpppp  --ttrriiggrraapphhss --UU_m_a_c_r_o  --uunnddeeff
           --WWpp,,_o_p_t_i_o_n  --XXpprreepprroocceessssoorr _o_p_t_i_o_n

       _A_s_s_e_m_b_l_e_r _O_p_t_i_o_n_s
           --WWaa,,_o_p_t_i_o_n  --XXaasssseemmbblleerr _o_p_t_i_o_n

       _L_i_n_k_e_r _O_p_t_i_o_n_s
           _o_b_j_e_c_t_-_f_i_l_e_-_n_a_m_e  --ffuussee--lldd==_l_i_n_k_e_r  --ll_l_i_b_r_a_r_y --nnoossttaarrttffiilleess
           --nnooddeeffaauullttlliibbss  --nnoossttddlliibb  --ppiiee  --pptthhrreeaadd  --rrddyynnaammiicc --ss  --ssttaattiicc
           --ssttaattiicc--ppiiee --ssttaattiicc--lliibbggcccc  --ssttaattiicc--lliibbssttddcc++++ --ssttaattiicc--lliibbaassaann
           --ssttaattiicc--lliibbttssaann  --ssttaattiicc--lliibbllssaann  --ssttaattiicc--lliibbuubbssaann --ssttaattiicc--lliibbmmppxx
           --ssttaattiicc--lliibbmmppxxwwrraappppeerrss --sshhaarreedd  --sshhaarreedd--lliibbggcccc  --ssyymmbboolliicc --TT _s_c_r_i_p_t
           --WWll,,_o_p_t_i_o_n  --XXlliinnkkeerr _o_p_t_i_o_n --uu _s_y_m_b_o_l  --zz _k_e_y_w_o_r_d

       _D_i_r_e_c_t_o_r_y _O_p_t_i_o_n_s
           --BB_p_r_e_f_i_x  --II_d_i_r  --II-- --iiddiirraafftteerr _d_i_r --iimmaaccrrooss _f_i_l_e  --iimmuullttiilliibb _d_i_r
           --iipplluuggiinnddiirr==_d_i_r  --iipprreeffiixx _f_i_l_e --iiqquuoottee _d_i_r  --iissyyssrroooott _d_i_r  --iissyysstteemm
           _d_i_r --iiwwiitthhpprreeffiixx _d_i_r  --iiwwiitthhpprreeffiixxbbeeffoorree _d_i_r --LL_d_i_r
           --nnoo--ccaannoonniiccaall--pprreeffiixxeess  ----nnoo--ssyyssrroooott--ssuuffffiixx --nnoossttddiinncc  --nnoossttddiinncc++++
           ----ssyyssrroooott==_d_i_r

       _C_o_d_e _G_e_n_e_r_a_t_i_o_n _O_p_t_i_o_n_s
           --ffccaallll--ssaavveedd--_r_e_g  --ffccaallll--uusseedd--_r_e_g --ffffiixxeedd--_r_e_g  --ffeexxcceeppttiioonnss
           --ffnnoonn--ccaallll--eexxcceeppttiioonnss  --ffddeelleettee--ddeeaadd--eexxcceeppttiioonnss  --ffuunnwwiinndd--ttaabblleess
           --ffaassyynncchhrroonnoouuss--uunnwwiinndd--ttaabblleess --ffnnoo--ggnnuu--uunniiqquuee
           --ffiinnhhiibbiitt--ssiizzee--ddiirreeccttiivvee  --ffnnoo--ccoommmmoonn  --ffnnoo--iiddeenntt
           --ffppcccc--ssttrruucctt--rreettuurrnn  --ffppiicc  --ffPPIICC  --ffppiiee  --ffPPIIEE  --ffnnoo--pplltt
           --ffnnoo--jjuummpp--ttaabblleess --ffrreeccoorrdd--ggcccc--sswwiittcchheess --ffrreegg--ssttrruucctt--rreettuurrnn
           --ffsshhoorrtt--eennuummss  --ffsshhoorrtt--wwcchhaarr --ffvveerrbboossee--aassmm  --ffppaacckk--ssttrruucctt[[==_n]]
           --fflleeaaddiinngg--uunnddeerrssccoorree  --ffttllss--mmooddeell==_m_o_d_e_l --ffssttaacckk--rreeuussee==_r_e_u_s_e___l_e_v_e_l
           --ffttrraammppoolliinneess  --ffttrraappvv  --ffwwrraappvv
           --ffvviissiibbiilliittyy==[ddeeffaauulltt|iinntteerrnnaall|hhiiddddeenn|pprrootteecctteedd]
           --ffssttrriicctt--vvoollaattiillee--bbiittffiieellddss  --ffssyynncc--lliibbccaallllss

       _D_e_v_e_l_o_p_e_r _O_p_t_i_o_n_s
           --dd_l_e_t_t_e_r_s  --dduummppssppeeccss  --dduummppmmaacchhiinnee  --dduummppvveerrssiioonn --dduummppffuullllvveerrssiioonn
           --ffcchheecckkiinngg  --ffcchheecckkiinngg==_n  --ffddbbgg--ccnntt--lliisstt --ffddbbgg--ccnntt==_c_o_u_n_t_e_r_-_v_a_l_u_e_-
           _l_i_s_t --ffddiissaabbllee--iippaa--_p_a_s_s___n_a_m_e --ffddiissaabbllee--rrttll--_p_a_s_s___n_a_m_e
           --ffddiissaabbllee--rrttll--_p_a_s_s_-_n_a_m_e==_r_a_n_g_e_-_l_i_s_t --ffddiissaabbllee--ttrreeee--_p_a_s_s___n_a_m_e
           --ffddiissaabbllee--ttrreeee--_p_a_s_s_-_n_a_m_e==_r_a_n_g_e_-_l_i_s_t --ffdduummpp--nnooaaddddrr
           --ffdduummpp--uunnnnuummbbeerreedd  --ffdduummpp--uunnnnuummbbeerreedd--lliinnkkss
           --ffdduummpp--ccllaassss--hhiieerraarrcchhyy[--_n] --ffdduummpp--ffiinnaall--iinnssnnss[==_f_i_l_e] --ffdduummpp--iippaa--aallll
           --ffdduummpp--iippaa--ccggrraapphh  --ffdduummpp--iippaa--iinnlliinnee --ffdduummpp--llaanngg--aallll
           --ffdduummpp--llaanngg--_s_w_i_t_c_h --ffdduummpp--llaanngg--_s_w_i_t_c_h--_o_p_t_i_o_n_s
           --ffdduummpp--llaanngg--_s_w_i_t_c_h--_o_p_t_i_o_n_s==_f_i_l_e_n_a_m_e --ffdduummpp--ppaasssseess --ffdduummpp--rrttll--_p_a_s_s
           --ffdduummpp--rrttll--_p_a_s_s==_f_i_l_e_n_a_m_e --ffdduummpp--ssttaattiissttiiccss --ffdduummpp--ttrreeee--aallll
           --ffdduummpp--ttrreeee--_s_w_i_t_c_h --ffdduummpp--ttrreeee--_s_w_i_t_c_h--_o_p_t_i_o_n_s
           --ffdduummpp--ttrreeee--_s_w_i_t_c_h--_o_p_t_i_o_n_s==_f_i_l_e_n_a_m_e --ffccoommppaarree--ddeebbuugg[==_o_p_t_s]
           --ffccoommppaarree--ddeebbuugg--sseeccoonndd --ffeennaabbllee--_k_i_n_d--_p_a_s_s --ffeennaabbllee--_k_i_n_d--_p_a_s_s==_r_a_n_g_e_-
           _l_i_s_t --ffiirraa--vveerrbboossee==_n --ffllttoo--rreeppoorrtt  --ffllttoo--rreeppoorrtt--wwppaa
           --ffmmeemm--rreeppoorrtt--wwppaa --ffmmeemm--rreeppoorrtt  --ffpprree--iippaa--mmeemm--rreeppoorrtt
           --ffppoosstt--iippaa--mmeemm--rreeppoorrtt --ffoopptt--iinnffoo  --ffoopptt--iinnffoo--_o_p_t_i_o_n_s[==_f_i_l_e]
           --ffpprrooffiillee--rreeppoorrtt --ffrraannddoomm--sseeeedd==_s_t_r_i_n_g  --ffsscchheedd--vveerrbboossee==_n
           --ffsseell--sscchheedd--vveerrbboossee  --ffsseell--sscchheedd--dduummpp--ccffgg
           --ffsseell--sscchheedd--ppiippeelliinniinngg--vveerrbboossee --ffssttaattss  --ffssttaacckk--uussaaggee
           --ffttiimmee--rreeppoorrtt  --ffttiimmee--rreeppoorrtt--ddeettaaiillss
           --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss--ttooggggllee  --ggttooggggllee
           --pprriinntt--ffiillee--nnaammee==_l_i_b_r_a_r_y  --pprriinntt--lliibbggcccc--ffiillee--nnaammee
           --pprriinntt--mmuullttii--ddiirreeccttoorryy  --pprriinntt--mmuullttii--lliibb  --pprriinntt--mmuullttii--ooss--ddiirreeccttoorryy
           --pprriinntt--pprroogg--nnaammee==_p_r_o_g_r_a_m  --pprriinntt--sseeaarrcchh--ddiirrss  --QQ --pprriinntt--ssyyssrroooott
           --pprriinntt--ssyyssrroooott--hheeaaddeerrss--ssuuffffiixx --ssaavvee--tteemmppss  --ssaavvee--tteemmppss==ccwwdd
           --ssaavvee--tteemmppss==oobbjj  --ttiimmee[==_f_i_l_e]

       _M_a_c_h_i_n_e_-_D_e_p_e_n_d_e_n_t _O_p_t_i_o_n_s
           _A_A_r_c_h_6_4 _O_p_t_i_o_n_s --mmaabbii==_n_a_m_e  --mmbbiigg--eennddiiaann  --mmlliittttllee--eennddiiaann
           --mmggeenneerraall--rreeggss--oonnllyy --mmccmmooddeell==ttiinnyy  --mmccmmooddeell==ssmmaallll  --mmccmmooddeell==llaarrggee
           --mmssttrriicctt--aalliiggnn --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr --mmttllss--ddiiaalleecctt==ddeesscc
           --mmttllss--ddiiaalleecctt==ttrraaddiittiioonnaall --mmttllss--ssiizzee==_s_i_z_e --mmffiixx--ccoorrtteexx--aa5533--883355776699
           --mmffiixx--ccoorrtteexx--aa5533--884433441199 --mmllooww--pprreecciissiioonn--rreecciipp--ssqqrrtt
           --mmllooww--pprreecciissiioonn--ssqqrrtt  --mmllooww--pprreecciissiioonn--ddiivv
           --mmppcc--rreellaattiivvee--lliitteerraall--llooaaddss --mmssiiggnn--rreettuurrnn--aaddddrreessss==_s_c_o_p_e --mmaarrcchh==_n_a_m_e
           --mmccppuu==_n_a_m_e  --mmttuunnee==_n_a_m_e --mmoovveerrrriiddee==_s_t_r_i_n_g  --mmvveerrbboossee--ccoosstt--dduummpp

           _A_d_a_p_t_e_v_a _E_p_i_p_h_a_n_y _O_p_t_i_o_n_s --mmhhaallff--rreegg--ffiillee  --mmpprreeffeerr--sshhoorrtt--iinnssnn--rreeggss
           --mmbbrraanncchh--ccoosstt==_n_u_m  --mmccmmoovvee  --mmnnooppss==_n_u_m  --mmssoofftt--ccmmppssff --mmsspplliitt--lloohhii
           --mmppoosstt--iinncc  --mmppoosstt--mmooddiiffyy  --mmssttaacckk--ooffffsseett==_n_u_m --mmrroouunndd--nneeaarreesstt
           --mmlloonngg--ccaallllss  --mmsshhoorrtt--ccaallllss  --mmssmmaallll1166 --mmffpp--mmooddee==_m_o_d_e
           --mmvveecctt--ddoouubbllee  --mmaaxx--vveecctt--aalliiggnn==_n_u_m --mmsspplliitt--vveeccmmoovvee--eeaarrllyy
           --mm11rreegg--_r_e_g

           _A_R_C _O_p_t_i_o_n_s --mmbbaarrrreell--sshhiifftteerr --mmjjllii--aallwwaayyss --mmccppuu==_c_p_u  --mmAA66  --mmAARRCC660000
           --mmAA77  --mmAARRCC770000 --mmddppffpp  --mmddppffpp--ccoommppaacctt  --mmddppffpp--ffaasstt  --mmnnoo--ddppffpp--llrrssrr
           --mmeeaa  --mmnnoo--mmppyy  --mmmmuull3322xx1166  --mmmmuull6644  --mmaattoommiicc --mmnnoorrmm  --mmssppffpp
           --mmssppffpp--ccoommppaacctt  --mmssppffpp--ffaasstt  --mmssiimmdd  --mmssoofftt--ffllooaatt  --mmsswwaapp --mmccrrcc
           --mmddsspp--ppaacckkaa  --mmddvvbbff  --mmlloocckk  --mmmmaacc--dd1166  --mmmmaacc--2244  --mmrrttsscc  --mmsswwaappee
           --mmtteelleepphhoonnyy  --mmxxyy  --mmiissiizzee  --mmaannnnoottaattee--aalliiggnn  --mmaarrcclliinnuuxx
           --mmaarrcclliinnuuxx__pprrooff --mmlloonngg--ccaallllss  --mmmmeeddiiuumm--ccaallllss  --mmssddaattaa
           --mmiirrqq--ccttrrll--ssaavveedd --mmrrggff--bbaannkkeedd--rreeggss --mmllppcc--wwiiddtthh==_w_i_d_t_h --GG _n_u_m
           --mmvvoollaattiillee--ccaacchhee  --mmttpp--rreeggnnoo==_r_e_g_n_o --mmaalliiggnn--ccaallll  --mmaauuttoo--mmooddiiffyy--rreegg
           --mmbbbbiitt--ppeeeepphhoollee  --mmnnoo--bbrrcccc --mmccaassee--vveeccttoorr--ppccrreell  --mmccoommppaacctt--ccaasseessii
           --mmnnoo--ccoonndd--eexxeecc  --mmeeaarrllyy--ccbbrraanncchhssii --mmeexxppaanndd--aaddddddii  --mmiinnddeexxeedd--llooaaddss
           --mmllrraa  --mmllrraa--pprriioorriittyy--nnoonnee --mmllrraa--pprriioorriittyy--ccoommppaacctt mmllrraa--pprriioorriittyy--
           nnoonnccoommppaacctt  --mmnnoo--mmiilllliiccooddee --mmmmiixxeedd--ccooddee  --mmqq--ccllaassss  --mmRRccqq  --mmRRccww
           --mmssiizzee--lleevveell==_l_e_v_e_l --mmttuunnee==_c_p_u  --mmmmuullttccoosstt==_n_u_m
           --mmuunnaalliiggnn--pprroobb--tthhrreesshhoolldd==_p_r_o_b_a_b_i_l_i_t_y  --mmmmppyy--ooppttiioonn==_m_u_l_t_o --mmddiivv--rreemm
           --mmccooddee--ddeennssiittyy  --mmllll6644  --mmffppuu==_f_p_u --mmrrff1166

           _A_R_M _O_p_t_i_o_n_s --mmaappccss--ffrraammee  --mmnnoo--aappccss--ffrraammee --mmaabbii==_n_a_m_e
           --mmaappccss--ssttaacckk--cchheecckk  --mmnnoo--aappccss--ssttaacckk--cchheecckk --mmaappccss--rreeeennttrraanntt
           --mmnnoo--aappccss--rreeeennttrraanntt --mmsscchheedd--pprroolloogg  --mmnnoo--sscchheedd--pprroolloogg
           --mmlliittttllee--eennddiiaann  --mmbbiigg--eennddiiaann --mmbbee88 --mmbbee3322 --mmffllooaatt--aabbii==_n_a_m_e
           --mmffpp1166--ffoorrmmaatt==_n_a_m_e --mmtthhuummbb--iinntteerrwwoorrkk  --mmnnoo--tthhuummbb--iinntteerrwwoorrkk
           --mmccppuu==_n_a_m_e  --mmaarrcchh==_n_a_m_e  --mmffppuu==_n_a_m_e --mmttuunnee==_n_a_m_e  --mmpprriinntt--ttuunnee--iinnffoo
           --mmssttrruuccttuurree--ssiizzee--bboouunnddaarryy==_n --mmaabboorrtt--oonn--nnoorreettuurrnn --mmlloonngg--ccaallllss
           --mmnnoo--lloonngg--ccaallllss --mmssiinnggllee--ppiicc--bbaassee  --mmnnoo--ssiinnggllee--ppiicc--bbaassee
           --mmppiicc--rreeggiisstteerr==_r_e_g --mmnnoopp--ffuunn--ddlllliimmppoorrtt --mmppookkee--ffuunnccttiioonn--nnaammee --mmtthhuummbb
           --mmaarrmm  --mmfflliipp--tthhuummbb --mmttppccss--ffrraammee  --mmttppccss--lleeaaff--ffrraammee
           --mmccaalllleerr--ssuuppeerr--iinntteerrwwoorrkkiinngg  --mmccaalllleeee--ssuuppeerr--iinntteerrwwoorrkkiinngg --mmttpp==_n_a_m_e
           --mmttllss--ddiiaalleecctt==_d_i_a_l_e_c_t --mmwwoorrdd--rreellooccaattiioonnss --mmffiixx--ccoorrtteexx--mm33--llddrrdd
           --mmuunnaalliiggnneedd--aacccceessss --mmnneeoonn--ffoorr--6644bbiittss --mmssllooww--ffllaasshh--ddaattaa
           --mmaassmm--ssyynnttaaxx--uunniiffiieedd --mmrreessttrriicctt--iitt --mmvveerrbboossee--ccoosstt--dduummpp --mmppuurree--ccooddee
           --mmccmmssee

           _A_V_R _O_p_t_i_o_n_s --mmmmccuu==_m_c_u  --mmaabbssddaattaa  --mmaaccccuummuullaattee--aarrggss
           --mmbbrraanncchh--ccoosstt==_c_o_s_t --mmccaallll--pprroolloogguueess  --mmggaass--iissrr--pprroolloogguueess  --mmiinntt88
           --mmnn__ffllaasshh==_s_i_z_e  --mmnnoo--iinntteerrrruuppttss --mmmmaaiinn--iiss--OOSS__ttaasskk --mmrreellaaxx  --mmrrmmww
           --mmssttrriicctt--XX  --mmttiinnyy--ssttaacckk --mmffrraacctt--ccoonnvveerrtt--ttrruunnccaattee --mmsshhoorrtt--ccaallllss
           --nnooddeevviicceelliibb --WWaaddddrr--ssppaaccee--ccoonnvveerrtt  --WWmmiissssppeelllleedd--iissrr

           _B_l_a_c_k_f_i_n _O_p_t_i_o_n_s --mmccppuu==_c_p_u[--_s_i_r_e_v_i_s_i_o_n] --mmssiimm
           --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr  --mmnnoo--oommiitt--lleeaaff--ffrraammee--ppooiinntteerr
           --mmssppeecclldd--aannoommaallyy  --mmnnoo--ssppeecclldd--aannoommaallyy  --mmccssyynncc--aannoommaallyy
           --mmnnoo--ccssyynncc--aannoommaallyy --mmllooww--6644kk  --mmnnoo--llooww6644kk  --mmssttaacckk--cchheecckk--ll11
           --mmiidd--sshhaarreedd--lliibbrraarryy --mmnnoo--iidd--sshhaarreedd--lliibbrraarryy  --mmsshhaarreedd--lliibbrraarryy--iidd==_n
           --mmlleeaaff--iidd--sshhaarreedd--lliibbrraarryy  --mmnnoo--lleeaaff--iidd--sshhaarreedd--lliibbrraarryy --mmsseepp--ddaattaa
           --mmnnoo--sseepp--ddaattaa  --mmlloonngg--ccaallllss  --mmnnoo--lloonngg--ccaallllss --mmffaasstt--ffpp
           --mmiinnlliinnee--pplltt  --mmmmuullttiiccoorree  --mmccoorreeaa  --mmccoorreebb  --mmssddrraamm --mmiiccppllbb

           _C_6_X _O_p_t_i_o_n_s --mmbbiigg--eennddiiaann  --mmlliittttllee--eennddiiaann  --mmaarrcchh==_c_p_u --mmssiimm
           --mmssddaattaa==_s_d_a_t_a_-_t_y_p_e

           _C_R_I_S _O_p_t_i_o_n_s --mmccppuu==_c_p_u  --mmaarrcchh==_c_p_u  --mmttuunnee==_c_p_u --mmmmaaxx--ssttaacckk--ffrraammee==_n
           --mmeelliinnuuxx--ssttaacckkssiizzee==_n --mmeettrraaxx44  --mmeettrraaxx110000  --mmppddeebbuugg  --mmcccc--iinniitt
           --mmnnoo--ssiiddee--eeffffeeccttss --mmssttaacckk--aalliiggnn  --mmddaattaa--aalliiggnn  --mmccoonnsstt--aalliiggnn
           --mm3322--bbiitt  --mm1166--bbiitt  --mm88--bbiitt  --mmnnoo--pprroolloogguuee--eeppiilloogguuee  --mmnnoo--ggoottpplltt
           --mmeellff  --mmaaoouutt  --mmeelliinnuuxx  --mmlliinnuuxx  --ssiimm  --ssiimm22 --mmmmuull--bbuugg--wwoorrkkaarroouunndd
           --mmnnoo--mmuull--bbuugg--wwoorrkkaarroouunndd

           _C_R_1_6 _O_p_t_i_o_n_s --mmmmaacc --mmccrr1166ccpplluuss  --mmccrr1166cc --mmssiimm  --mmiinntt3322  --mmbbiitt--ooppss
           --mmddaattaa--mmooddeell==_m_o_d_e_l

           _D_a_r_w_i_n _O_p_t_i_o_n_s --aallll__llooaadd  --aalllloowwaabbllee__cclliieenntt  --aarrcchh
           --aarrcchh__eerrrroorrss__ffaattaall --aarrcchh__oonnllyy  --bbiinndd__aatt__llooaadd  --bbuunnddllee
           --bbuunnddllee__llooaaddeerr --cclliieenntt__nnaammee  --ccoommppaattiibbiilliittyy__vveerrssiioonn
           --ccuurrrreenntt__vveerrssiioonn --ddeeaadd__ssttrriipp --ddeeppeennddeennccyy--ffiillee  --ddyylliibb__ffiillee
           --ddyylliinnkkeerr__iinnssttaallll__nnaammee --ddyynnaammiicc  --ddyynnaammiicclliibb
           --eexxppoorrtteedd__ssyymmbboollss__lliisstt --ffiilleelliisstt  --ffllaatt__nnaammeessppaaccee
           --ffoorrccee__ccppuussuubbttyyppee__AALLLL --ffoorrccee__ffllaatt__nnaammeessppaaccee
           --hheeaaddeerrppaadd__mmaaxx__iinnssttaallll__nnaammeess --iiffrraammeewwoorrkk --iimmaaggee__bbaassee  --iinniitt
           --iinnssttaallll__nnaammee  --kkeeeepp__pprriivvaattee__eexxtteerrnnss --mmuullttii__mmoodduullee
           --mmuullttiippllyy__ddeeffiinneedd  --mmuullttiippllyy__ddeeffiinneedd__uunnuusseedd --nnooaallll__llooaadd
           --nnoo__ddeeaadd__ssttrriipp__iinniittss__aanndd__tteerrmmss --nnooffiixxpprreebbiinnddiinngg  --nnoommuullttiiddeeffss
           --nnoopprreebbiinndd  --nnoosseegglliinnkkeeddiitt --ppaaggeezzeerroo__ssiizzee  --pprreebbiinndd
           --pprreebbiinndd__aallll__ttwwoolleevveell__mmoodduulleess --pprriivvaattee__bbuunnddllee  --rreeaadd__oonnllyy__rreellooccss
           --sseeccttaalliiggnn --sseeccttoobbjjeeccttssyymmbboollss  --wwhhyyllooaadd  --sseegg11aaddddrr --sseeccttccrreeaattee
           --sseeccttoobbjjeeccttssyymmbboollss  --sseeccttoorrddeerr --sseeggaaddddrr  --sseeggss__rreeaadd__oonnllyy__aaddddrr
           --sseeggss__rreeaadd__wwrriittee__aaddddrr --sseegg__aaddddrr__ttaabbllee  --sseegg__aaddddrr__ttaabbllee__ffiilleennaammee
           --sseegglliinnkkeeddiitt --sseeggpprroott  --sseeggss__rreeaadd__oonnllyy__aaddddrr  --sseeggss__rreeaadd__wwrriittee__aaddddrr
           --ssiinnggllee__mmoodduullee  --ssttaattiicc  --ssuubb__lliibbrraarryy  --ssuubb__uummbbrreellllaa
           --ttwwoolleevveell__nnaammeessppaaccee  --uummbbrreellllaa  --uunnddeeffiinneedd --uunneexxppoorrtteedd__ssyymmbboollss__lliisstt
           --wweeaakk__rreeffeerreennccee__mmiissmmaattcchheess --wwhhaattssllooaaddeedd  --FF  --gguusseedd  --ggffuullll
           --mmmmaaccoossxx--vveerrssiioonn--mmiinn==_v_e_r_s_i_o_n --mmkkeerrnneell  --mmoonnee--bbyyttee--bbooooll

           _D_E_C _A_l_p_h_a _O_p_t_i_o_n_s --mmnnoo--ffpp--rreeggss  --mmssoofftt--ffllooaatt --mmiieeeeee
           --mmiieeeeee--wwiitthh--iinneexxaacctt  --mmiieeeeee--ccoonnffoorrmmaanntt --mmffpp--ttrraapp--mmooddee==_m_o_d_e
           --mmffpp--rroouunnddiinngg--mmooddee==_m_o_d_e --mmttrraapp--pprreecciissiioonn==_m_o_d_e  --mmbbuuiilldd--ccoonnssttaannttss
           --mmccppuu==_c_p_u_-_t_y_p_e  --mmttuunnee==_c_p_u_-_t_y_p_e --mmbbwwxx  --mmmmaaxx  --mmffiixx  --mmcciixx
           --mmffllooaatt--vvaaxx  --mmffllooaatt--iieeeeee --mmeexxpplliicciitt--rreellooccss  --mmssmmaallll--ddaattaa
           --mmllaarrggee--ddaattaa --mmssmmaallll--tteexxtt  --mmllaarrggee--tteexxtt --mmmmeemmoorryy--llaatteennccyy==_t_i_m_e

           _F_R_3_0 _O_p_t_i_o_n_s --mmssmmaallll--mmooddeell  --mmnnoo--llssiimm

           _F_T_3_2 _O_p_t_i_o_n_s --mmssiimm  --mmllrraa  --mmnnooddiivv  --mmfftt3322bb  --mmccoommpprreessss  --mmnnooppmm

           _F_R_V _O_p_t_i_o_n_s --mmggpprr--3322  --mmggpprr--6644  --mmffpprr--3322  --mmffpprr--6644 --mmhhaarrdd--ffllooaatt
           --mmssoofftt--ffllooaatt --mmaalllloocc--cccc  --mmffiixxeedd--cccc  --mmddwwoorrdd  --mmnnoo--ddwwoorrdd --mmddoouubbllee
           --mmnnoo--ddoouubbllee --mmmmeeddiiaa  --mmnnoo--mmeeddiiaa  --mmmmuullaadddd  --mmnnoo--mmuullaadddd --mmffddppiicc
           --mmiinnlliinnee--pplltt  --mmggpprreell--rroo  --mmuullttiilliibb--lliibbrraarryy--ppiicc --mmlliinnkkeedd--ffpp
           --mmlloonngg--ccaallllss  --mmaalliiggnn--llaabbeellss --mmlliibbrraarryy--ppiicc  --mmaacccc--44  --mmaacccc--88 --mmppaacckk
           --mmnnoo--ppaacckk  --mmnnoo--eeffllaaggss  --mmccoonndd--mmoovvee  --mmnnoo--ccoonndd--mmoovvee
           --mmooppttiimmiizzee--mmeemmbbaarr  --mmnnoo--ooppttiimmiizzee--mmeemmbbaarr --mmsscccc  --mmnnoo--sscccc
           --mmccoonndd--eexxeecc  --mmnnoo--ccoonndd--eexxeecc --mmvvlliiww--bbrraanncchh  --mmnnoo--vvlliiww--bbrraanncchh
           --mmmmuullttii--ccoonndd--eexxeecc  --mmnnoo--mmuullttii--ccoonndd--eexxeecc  --mmnneesstteedd--ccoonndd--eexxeecc
           --mmnnoo--nneesstteedd--ccoonndd--eexxeecc  --mmttoommccaatt--ssttaattss --mmTTLLSS  --mmttllss --mmccppuu==_c_p_u

           _G_N_U_/_L_i_n_u_x _O_p_t_i_o_n_s --mmgglliibbcc  --mmuucclliibbcc  --mmmmuussll  --mmbbiioonniicc  --mmaannddrrooiidd
           --ttnnoo--aannddrrooiidd--cccc  --ttnnoo--aannddrrooiidd--lldd

           _H_8_/_3_0_0 _O_p_t_i_o_n_s --mmrreellaaxx  --mmhh  --mmss  --mmnn  --mmeexxrr  --mmnnoo--eexxrr  --mmiinntt3322
           --mmaalliiggnn--330000

           _H_P_P_A _O_p_t_i_o_n_s --mmaarrcchh==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e --mmccaalllleerr--ccooppiieess
           --mmddiissaabbllee--ffpprreeggss  --mmddiissaabbllee--iinnddeexxiinngg --mmffaasstt--iinnddiirreecctt--ccaallllss  --mmggaass
           --mmggnnuu--lldd   --mmhhpp--lldd --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e --mmjjuummpp--iinn--ddeellaayy
           --mmlliinnkkeerr--oopptt  --mmlloonngg--ccaallllss --mmlloonngg--llooaadd--ssttoorree  --mmnnoo--ddiissaabbllee--ffpprreeggss
           --mmnnoo--ddiissaabbllee--iinnddeexxiinngg  --mmnnoo--ffaasstt--iinnddiirreecctt--ccaallllss  --mmnnoo--ggaass
           --mmnnoo--jjuummpp--iinn--ddeellaayy  --mmnnoo--lloonngg--llooaadd--ssttoorree --mmnnoo--ppoorrttaabbllee--rruunnttiimmee
           --mmnnoo--ssoofftt--ffllooaatt --mmnnoo--ssppaaccee--rreeggss  --mmssoofftt--ffllooaatt  --mmppaa--rriisscc--11--00
           --mmppaa--rriisscc--11--11  --mmppaa--rriisscc--22--00  --mmppoorrttaabbllee--rruunnttiimmee --mmsscchheedduullee==_c_p_u_-
           _t_y_p_e  --mmssppaaccee--rreeggss  --mmssiioo  --mmwwssiioo --mmuunniixx==_u_n_i_x_-_s_t_d  --nnoolliibbddlldd
           --ssttaattiicc  --tthhrreeaaddss

           _I_A_-_6_4 _O_p_t_i_o_n_s --mmbbiigg--eennddiiaann  --mmlliittttllee--eennddiiaann  --mmggnnuu--aass  --mmggnnuu--lldd
           --mmnnoo--ppiicc --mmvvoollaattiillee--aassmm--ssttoopp  --mmrreeggiisstteerr--nnaammeess  --mmssddaattaa  --mmnnoo--ssddaattaa
           --mmccoonnssttaanntt--ggpp  --mmaauuttoo--ppiicc  --mmffuusseedd--mmaadddd
           --mmiinnlliinnee--ffllooaatt--ddiivviiddee--mmiinn--llaatteennccyy
           --mmiinnlliinnee--ffllooaatt--ddiivviiddee--mmaaxx--tthhrroouugghhppuutt --mmnnoo--iinnlliinnee--ffllooaatt--ddiivviiddee
           --mmiinnlliinnee--iinntt--ddiivviiddee--mmiinn--llaatteennccyy --mmiinnlliinnee--iinntt--ddiivviiddee--mmaaxx--tthhrroouugghhppuutt
           --mmnnoo--iinnlliinnee--iinntt--ddiivviiddee --mmiinnlliinnee--ssqqrrtt--mmiinn--llaatteennccyy
           --mmiinnlliinnee--ssqqrrtt--mmaaxx--tthhrroouugghhppuutt --mmnnoo--iinnlliinnee--ssqqrrtt --mmddwwaarrff22--aassmm
           --mmeeaarrllyy--ssttoopp--bbiittss --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e  --mmttllss--ssiizzee==_t_l_s_-_s_i_z_e
           --mmttuunnee==_c_p_u_-_t_y_p_e  --mmiillpp3322  --mmllpp6644 --mmsscchheedd--bbrr--ddaattaa--ssppeecc
           --mmsscchheedd--aarr--ddaattaa--ssppeecc  --mmsscchheedd--ccoonnttrrooll--ssppeecc --mmsscchheedd--bbrr--iinn--ddaattaa--ssppeecc
           --mmsscchheedd--aarr--iinn--ddaattaa--ssppeecc  --mmsscchheedd--iinn--ccoonnttrrooll--ssppeecc --mmsscchheedd--ssppeecc--llddcc
           --mmsscchheedd--ssppeecc--ccoonnttrrooll--llddcc --mmsscchheedd--pprreeffeerr--nnoonn--ddaattaa--ssppeecc--iinnssnnss
           --mmsscchheedd--pprreeffeerr--nnoonn--ccoonnttrrooll--ssppeecc--iinnssnnss
           --mmsscchheedd--ssttoopp--bbiittss--aafftteerr--eevveerryy--ccyyccllee
           --mmsscchheedd--ccoouunntt--ssppeecc--iinn--ccrriittiiccaall--ppaatthh
           --mmsseell--sscchheedd--ddoonntt--cchheecckk--ccoonnttrrooll--ssppeecc  --mmsscchheedd--ffpp--mmeemm--ddeeppss--zzeerroo--ccoosstt
           --mmsscchheedd--mmaaxx--mmeemmoorryy--iinnssnnss--hhaarrdd--lliimmiitt  --mmsscchheedd--mmaaxx--mmeemmoorryy--iinnssnnss==_m_a_x_-
           _i_n_s_n_s

           _L_M_3_2 _O_p_t_i_o_n_s --mmbbaarrrreell--sshhiifftt--eennaabblleedd  --mmddiivviiddee--eennaabblleedd
           --mmmmuullttiippllyy--eennaabblleedd --mmssiiggnn--eexxtteenndd--eennaabblleedd  --mmuusseerr--eennaabblleedd

           _M_3_2_R_/_D _O_p_t_i_o_n_s --mm3322rr22  --mm3322rrxx  --mm3322rr --mmddeebbuugg --mmaalliiggnn--llooooppss
           --mmnnoo--aalliiggnn--llooooppss --mmiissssuuee--rraattee==_n_u_m_b_e_r --mmbbrraanncchh--ccoosstt==_n_u_m_b_e_r
           --mmmmooddeell==_c_o_d_e_-_s_i_z_e_-_m_o_d_e_l_-_t_y_p_e --mmssddaattaa==_s_d_a_t_a_-_t_y_p_e --mmnnoo--fflluusshh--ffuunncc
           --mmfflluusshh--ffuunncc==_n_a_m_e --mmnnoo--fflluusshh--ttrraapp  --mmfflluusshh--ttrraapp==_n_u_m_b_e_r --GG _n_u_m

           _M_3_2_C _O_p_t_i_o_n_s --mmccppuu==_c_p_u  --mmssiimm  --mmeemmrreeggss==_n_u_m_b_e_r

           _M_6_8_0_x_0 _O_p_t_i_o_n_s --mmaarrcchh==_a_r_c_h  --mmccppuu==_c_p_u  --mmttuunnee==_t_u_n_e --mm6688000000  --mm6688002200
           --mm6688002200--4400  --mm6688002200--6600  --mm6688003300  --mm6688004400 --mm6688006600  --mmccppuu3322  --mm55220000
           --mm55220066ee  --mm552288xx  --mm55330077  --mm55440077 --mmccffvv44ee  --mmbbiittffiieelldd  --mmnnoo--bbiittffiieelldd
           --mmcc6688000000  --mmcc6688002200 --mmnnoobbiittffiieelldd  --mmrrttdd  --mmnnoo--rrttdd  --mmddiivv  --mmnnoo--ddiivv
           --mmsshhoorrtt --mmnnoo--sshhoorrtt  --mmhhaarrdd--ffllooaatt  --mm6688888811  --mmssoofftt--ffllooaatt  --mmppccrreell
           --mmaalliiggnn--iinntt  --mmssttrriicctt--aalliiggnn  --mmsseepp--ddaattaa  --mmnnoo--sseepp--ddaattaa
           --mmsshhaarreedd--lliibbrraarryy--iidd==nn  --mmiidd--sshhaarreedd--lliibbrraarryy  --mmnnoo--iidd--sshhaarreedd--lliibbrraarryy
           --mmxxggoott  --mmnnoo--xxggoott  --mmlloonngg--jjuummpp--ttaabbllee--ooffffsseettss

           _M_C_o_r_e _O_p_t_i_o_n_s --mmhhaarrddlliitt  --mmnnoo--hhaarrddlliitt  --mmddiivv  --mmnnoo--ddiivv
           --mmrreellaaxx--iimmmmeeddiiaatteess --mmnnoo--rreellaaxx--iimmmmeeddiiaatteess  --mmwwiiddee--bbiittffiieellddss
           --mmnnoo--wwiiddee--bbiittffiieellddss --mm44bbyyttee--ffuunnccttiioonnss  --mmnnoo--44bbyyttee--ffuunnccttiioonnss
           --mmccaallllggrraapphh--ddaattaa --mmnnoo--ccaallllggrraapphh--ddaattaa  --mmssllooww--bbyytteess  --mmnnoo--ssllooww--bbyytteess
           --mmnnoo--llssiimm --mmlliittttllee--eennddiiaann  --mmbbiigg--eennddiiaann  --mm221100  --mm334400
           --mmssttaacckk--iinnccrreemmeenntt

           _M_e_P _O_p_t_i_o_n_s --mmaabbssddiiffff  --mmaallll--ooppttss  --mmaavveerraaggee  --mmbbaasseedd==_n  --mmbbiittooppss
           --mmcc==_n  --mmcclliipp  --mmccoonnffiigg==_n_a_m_e  --mmccoopp  --mmccoopp3322  --mmccoopp6644  --mmiivvcc22 --mmddcc
           --mmddiivv  --mmeebb  --mmeell  --mmiioo--vvoollaattiillee  --mmll  --mmlleeaaddzz  --mmmm  --mmmmiinnmmaaxx
           --mmmmuulltt  --mmnnoo--ooppttss  --mmrreeppeeaatt  --mmss  --mmssaattuurr  --mmssddrraamm  --mmssiimm
           --mmssiimmnnoovveecc  --mmttff --mmttiinnyy==_n

           _M_i_c_r_o_B_l_a_z_e _O_p_t_i_o_n_s --mmssoofftt--ffllooaatt  --mmhhaarrdd--ffllooaatt  --mmssmmaallll--ddiivviiddeess
           --mmccppuu==_c_p_u --mmmmeemmccppyy  --mmxxll--ssoofftt--mmuull  --mmxxll--ssoofftt--ddiivv  --mmxxll--bbaarrrreell--sshhiifftt
           --mmxxll--ppaatttteerrnn--ccoommppaarree  --mmxxll--ssttaacckk--cchheecckk  --mmxxll--ggpp--oopptt  --mmnnoo--cclleeaarrbbssss
           --mmxxll--mmuullttiippllyy--hhiigghh  --mmxxll--ffllooaatt--ccoonnvveerrtt  --mmxxll--ffllooaatt--ssqqrrtt
           --mmbbiigg--eennddiiaann  --mmlliittttllee--eennddiiaann  --mmxxll--rreeoorrddeerr  --mmxxll--mmooddee--_a_p_p_-_m_o_d_e_l

           _M_I_P_S _O_p_t_i_o_n_s --EELL  --EEBB  --mmaarrcchh==_a_r_c_h  --mmttuunnee==_a_r_c_h --mmiippss11  --mmiippss22
           --mmiippss33  --mmiippss44  --mmiippss3322  --mmiippss3322rr22  --mmiippss3322rr33  --mmiippss3322rr55 --mmiippss3322rr66
           --mmiippss6644  --mmiippss6644rr22  --mmiippss6644rr33  --mmiippss6644rr55  --mmiippss6644rr66 --mmiippss1166
           --mmnnoo--mmiippss1166  --mmfflliipp--mmiippss1166 --mmiinntteerrlliinnkk--ccoommpprreesssseedd
           --mmnnoo--iinntteerrlliinnkk--ccoommpprreesssseedd --mmiinntteerrlliinnkk--mmiippss1166  --mmnnoo--iinntteerrlliinnkk--mmiippss1166
           --mmaabbii==_a_b_i  --mmaabbiiccaallllss  --mmnnoo--aabbiiccaallllss --mmsshhaarreedd  --mmnnoo--sshhaarreedd  --mmpplltt
           --mmnnoo--pplltt  --mmxxggoott  --mmnnoo--xxggoott --mmggpp3322  --mmggpp6644  --mmffpp3322  --mmffppxxxx  --mmffpp6644
           --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt --mmnnoo--ffllooaatt  --mmssiinnggllee--ffllooaatt
           --mmddoouubbllee--ffllooaatt --mmoodddd--sspprreegg  --mmnnoo--oodddd--sspprreegg --mmaabbss==_m_o_d_e
           --mmnnaann==_e_n_c_o_d_i_n_g --mmddsspp  --mmnnoo--ddsspp  --mmddsspprr22  --mmnnoo--ddsspprr22 --mmmmccuu
           --mmmmnnoo--mmccuu --mmeevvaa  --mmnnoo--eevvaa --mmvviirrtt  --mmnnoo--vviirrtt --mmxxppaa  --mmnnoo--xxppaa
           --mmmmiiccrroommiippss  --mmnnoo--mmiiccrroommiippss --mmmmssaa  --mmnnoo--mmssaa --mmffppuu==_f_p_u_-_t_y_p_e
           --mmssmmaarrttmmiippss  --mmnnoo--ssmmaarrttmmiippss --mmppaaiirreedd--ssiinnggllee  --mmnnoo--ppaaiirreedd--ssiinnggllee
           --mmddmmxx  --mmnnoo--mmddmmxx --mmiippss33dd  --mmnnoo--mmiippss33dd  --mmmmtt  --mmnnoo--mmtt  --mmllllsscc
           --mmnnoo--llllsscc --mmlloonngg6644  --mmlloonngg3322  --mmssyymm3322  --mmnnoo--ssyymm3322 --GG_n_u_m
           --mmllooccaall--ssddaattaa  --mmnnoo--llooccaall--ssddaattaa --mmeexxtteerrnn--ssddaattaa  --mmnnoo--eexxtteerrnn--ssddaattaa
           --mmggppoopptt  --mmnnoo--ggoopptt --mmeemmbbeeddddeedd--ddaattaa  --mmnnoo--eemmbbeeddddeedd--ddaattaa
           --mmuunniinniitt--ccoonnsstt--iinn--rrooddaattaa  --mmnnoo--uunniinniitt--ccoonnsstt--iinn--rrooddaattaa
           --mmccooddee--rreeaaddaabbllee==_s_e_t_t_i_n_g --mmsspplliitt--aaddddrreesssseess  --mmnnoo--sspplliitt--aaddddrreesssseess
           --mmeexxpplliicciitt--rreellooccss  --mmnnoo--eexxpplliicciitt--rreellooccss --mmcchheecckk--zzeerroo--ddiivviissiioonn
           --mmnnoo--cchheecckk--zzeerroo--ddiivviissiioonn --mmddiivviiddee--ttrraappss  --mmddiivviiddee--bbrreeaakkss
           --mmllooaadd--ssttoorree--ppaaiirrss  --mmnnoo--llooaadd--ssttoorree--ppaaiirrss --mmmmeemmccppyy  --mmnnoo--mmeemmccppyy
           --mmlloonngg--ccaallllss  --mmnnoo--lloonngg--ccaallllss --mmmmaadd  --mmnnoo--mmaadd  --mmiimmaadddd  --mmnnoo--iimmaadddd
           --mmffuusseedd--mmaadddd  --mmnnoo--ffuusseedd--mmaadddd  --nnooccpppp --mmffiixx--2244kk  --mmnnoo--ffiixx--2244kk
           --mmffiixx--rr44000000  --mmnnoo--ffiixx--rr44000000  --mmffiixx--rr44440000  --mmnnoo--ffiixx--rr44440000
           --mmffiixx--rr1100000000  --mmnnoo--ffiixx--rr1100000000  --mmffiixx--rrmm77000000  --mmnnoo--ffiixx--rrmm77000000
           --mmffiixx--vvrr44112200  --mmnnoo--ffiixx--vvrr44112200 --mmffiixx--vvrr44113300  --mmnnoo--ffiixx--vvrr44113300
           --mmffiixx--ssbb11  --mmnnoo--ffiixx--ssbb11 --mmfflluusshh--ffuunncc==_f_u_n_c  --mmnnoo--fflluusshh--ffuunncc
           --mmbbrraanncchh--ccoosstt==_n_u_m  --mmbbrraanncchh--lliikkeellyy  --mmnnoo--bbrraanncchh--lliikkeellyy
           --mmccoommppaacctt--bbrraanncchheess==_p_o_l_i_c_y --mmffpp--eexxcceeppttiioonnss  --mmnnoo--ffpp--eexxcceeppttiioonnss
           --mmvvrr44113300--aalliiggnn  --mmnnoo--vvrr44113300--aalliiggnn  --mmssyynnccii  --mmnnoo--ssyynnccii --mmllxxcc11--ssxxcc11
           --mmnnoo--llxxcc11--ssxxcc11 --mmmmaadddd44 --mmnnoo--mmaadddd44 --mmrreellaaxx--ppiicc--ccaallllss
           --mmnnoo--rreellaaxx--ppiicc--ccaallllss  --mmmmccoouunntt--rraa--aaddddrreessss --mmffrraammee--hheeaaddeerr--oopptt
           --mmnnoo--ffrraammee--hheeaaddeerr--oopptt

           _M_M_I_X _O_p_t_i_o_n_s --mmlliibbffuunnccss  --mmnnoo--lliibbffuunnccss  --mmeeppssiilloonn  --mmnnoo--eeppssiilloonn
           --mmaabbii==ggnnuu --mmaabbii==mmmmiixxwwaarree  --mmzzeerroo--eexxtteenndd  --mmkknnuutthhddiivv
           --mmttoopplleevveell--ssyymmbboollss --mmeellff  --mmbbrraanncchh--pprreeddiicctt  --mmnnoo--bbrraanncchh--pprreeddiicctt
           --mmbbaassee--aaddddrreesssseess --mmnnoo--bbaassee--aaddddrreesssseess  --mmssiinnggllee--eexxiitt
           --mmnnoo--ssiinnggllee--eexxiitt

           _M_N_1_0_3_0_0 _O_p_t_i_o_n_s --mmmmuulltt--bbuugg  --mmnnoo--mmuulltt--bbuugg --mmnnoo--aamm3333  --mmaamm3333
           --mmaamm3333--22  --mmaamm3344 --mmttuunnee==_c_p_u_-_t_y_p_e --mmrreettuurrnn--ppooiinntteerr--oonn--dd00 --mmnnoo--ccrrtt00
           --mmrreellaaxx  --mmlliiww  --mmsseettllbb

           _M_o_x_i_e _O_p_t_i_o_n_s --mmeebb  --mmeell  --mmmmuull..xx  --mmnnoo--ccrrtt00

           _M_S_P_4_3_0 _O_p_t_i_o_n_s --mmssiimm  --mmaassmm--hheexx  --mmmmccuu==  --mmccppuu==  --mmllaarrggee  --mmssmmaallll
           --mmrreellaaxx --mmwwaarrnn--mmccuu --mmccooddee--rreeggiioonn==  --mmddaattaa--rreeggiioonn== --mmssiilliiccoonn--eerrrraattaa==
           --mmssiilliiccoonn--eerrrraattaa--wwaarrnn== --mmhhwwmmuulltt==  --mmiinnrrtt

           _N_D_S_3_2 _O_p_t_i_o_n_s --mmbbiigg--eennddiiaann  --mmlliittttllee--eennddiiaann --mmrreedduucceedd--rreeggss
           --mmffuullll--rreeggss --mmccmmoovv  --mmnnoo--ccmmoovv --mmeexxtt--ppeerrff  --mmnnoo--eexxtt--ppeerrff --mmeexxtt--ppeerrff22
           --mmnnoo--eexxtt--ppeerrff22 --mmeexxtt--ssttrriinngg  --mmnnoo--eexxtt--ssttrriinngg --mmvv33ppuusshh  --mmnnoo--vv33ppuusshh
           --mm1166bbiitt  --mmnnoo--1166bbiitt --mmiissrr--vveeccttoorr--ssiizzee==_n_u_m --mmccaacchhee--bblloocckk--ssiizzee==_n_u_m
           --mmaarrcchh==_a_r_c_h --mmccmmooddeell==_c_o_d_e_-_m_o_d_e_l --mmccttoorr--ddttoorr  --mmrreellaaxx

           _N_i_o_s _I_I _O_p_t_i_o_n_s --GG _n_u_m  --mmggppoopptt==_o_p_t_i_o_n  --mmggppoopptt  --mmnnoo--ggppoopptt
           --mmggpprreell--sseecc==_r_e_g_e_x_p --mmrr00rreell--sseecc==_r_e_g_e_x_p --mmeell  --mmeebb --mmnnoo--bbyyppaassss--ccaacchhee
           --mmbbyyppaassss--ccaacchhee --mmnnoo--ccaacchhee--vvoollaattiillee  --mmccaacchhee--vvoollaattiillee
           --mmnnoo--ffaasstt--ssww--ddiivv  --mmffaasstt--ssww--ddiivv --mmhhww--mmuull  --mmnnoo--hhww--mmuull  --mmhhww--mmuullxx
           --mmnnoo--hhww--mmuullxx  --mmnnoo--hhww--ddiivv  --mmhhww--ddiivv --mmccuussttoomm--_i_n_s_n==_N
           --mmnnoo--ccuussttoomm--_i_n_s_n --mmccuussttoomm--ffppuu--ccffgg==_n_a_m_e --mmhhaall  --mmssmmaallllcc
           --mmssyyss--ccrrtt00==_n_a_m_e  --mmssyyss--lliibb==_n_a_m_e --mmaarrcchh==_a_r_c_h  --mmbbmmxx  --mmnnoo--bbmmxx  --mmccddxx
           --mmnnoo--ccddxx

           _N_v_i_d_i_a _P_T_X _O_p_t_i_o_n_s --mm3322  --mm6644  --mmmmaaiinnkkeerrnneell  --mmooppttiimmiizzee

           _P_D_P_-_1_1 _O_p_t_i_o_n_s --mmffppuu  --mmssoofftt--ffllooaatt  --mmaacc00  --mmnnoo--aacc00  --mm4400  --mm4455
           --mm1100 --mmbbccooppyy  --mmbbccooppyy--bbuuiillttiinn  --mmiinntt3322  --mmnnoo--iinntt1166 --mmiinntt1166
           --mmnnoo--iinntt3322  --mmffllooaatt3322  --mmnnoo--ffllooaatt6644 --mmffllooaatt6644  --mmnnoo--ffllooaatt3322
           --mmaabbsshhii  --mmnnoo--aabbsshhii --mmbbrraanncchh--eexxppeennssiivvee  --mmbbrraanncchh--cchheeaapp --mmuunniixx--aassmm
           --mmddeecc--aassmm

           _p_i_c_o_C_h_i_p _O_p_t_i_o_n_s --mmaaee==_a_e___t_y_p_e  --mmvvlliiww--llooookkaahheeaadd==_N
           --mmssyymmbbooll--aass--aaddddrreessss  --mmnnoo--iinneeffffiicciieenntt--wwaarrnniinnggss

           _P_o_w_e_r_P_C _O_p_t_i_o_n_s See RS/6000 and PowerPC Options.

           _P_o_w_e_r_P_C _S_P_E _O_p_t_i_o_n_s --mmccppuu==_c_p_u_-_t_y_p_e --mmttuunnee==_c_p_u_-_t_y_p_e --mmmmffccrrff
           --mmnnoo--mmffccrrff  --mmppooppccnnttbb  --mmnnoo--ppooppccnnttbb --mmffuullll--ttoocc   --mmmmiinniimmaall--ttoocc
           --mmnnoo--ffpp--iinn--ttoocc  --mmnnoo--ssuumm--iinn--ttoocc --mm3322  --mmxxll--ccoommppaatt  --mmnnoo--xxll--ccoommppaatt
           --mmaalliiggnn--ppoowweerr  --mmaalliiggnn--nnaattuurraall --mmssoofftt--ffllooaatt  --mmhhaarrdd--ffllooaatt
           --mmmmuullttiippllee  --mmnnoo--mmuullttiippllee --mmssiinnggllee--ffllooaatt  --mmddoouubbllee--ffllooaatt --mmuuppddaattee
           --mmnnoo--uuppddaattee --mmaavvooiidd--iinnddeexxeedd--aaddddrreesssseess  --mmnnoo--aavvooiidd--iinnddeexxeedd--aaddddrreesssseess
           --mmssttrriicctt--aalliiggnn  --mmnnoo--ssttrriicctt--aalliiggnn  --mmrreellooccaattaabbllee --mmnnoo--rreellooccaattaabbllee
           --mmrreellooccaattaabbllee--lliibb  --mmnnoo--rreellooccaattaabbllee--lliibb --mmttoocc  --mmnnoo--ttoocc  --mmlliittttllee
           --mmlliittttllee--eennddiiaann  --mmbbiigg  --mmbbiigg--eennddiiaann --mmssiinnggllee--ppiicc--bbaassee
           --mmpprriioorriittiizzee--rreessttrriicctteedd--iinnssnnss==_p_r_i_o_r_i_t_y
           --mmsscchheedd--ccoossttllyy--ddeepp==_d_e_p_e_n_d_e_n_c_e___t_y_p_e --mmiinnsseerrtt--sscchheedd--nnooppss==_s_c_h_e_m_e
           --mmccaallll--ssyyssvv  --mmccaallll--nneettbbssdd --mmaaiixx--ssttrruucctt--rreettuurrnn
           --mmssvvrr44--ssttrruucctt--rreettuurrnn --mmaabbii==_a_b_i_-_t_y_p_e  --mmsseeccuurree--pplltt  --mmbbssss--pplltt
           --mmbblloocckk--mmoovvee--iinnlliinnee--lliimmiitt==_n_u_m --mmiisseell  --mmnnoo--iisseell --mmiisseell==yyeess
           --mmiisseell==nnoo --mmssppee  --mmnnoo--ssppee --mmssppee==yyeess  --mmssppee==nnoo --mmffllooaatt--ggpprrss==yyeess
           --mmffllooaatt--ggpprrss==nnoo  --mmffllooaatt--ggpprrss==ssiinnggllee  --mmffllooaatt--ggpprrss==ddoouubbllee
           --mmpprroottoottyyppee  --mmnnoo--pprroottoottyyppee --mmssiimm  --mmmmvvmmee  --mmaaddss  --mmyyeelllloowwkknniiffee
           --mmeemmbb  --mmssddaattaa --mmssddaattaa==_o_p_t  --mmvvxxwwoorrkkss  --GG _n_u_m --mmrreecciipp  --mmrreecciipp==_o_p_t
           --mmnnoo--rreecciipp  --mmrreecciipp--pprreecciissiioonn --mmnnoo--rreecciipp--pprreecciissiioonn
           --mmppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss  --mmnnoo--ppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss
           --mmssaavvee--ttoocc--iinnddiirreecctt  --mmnnoo--ssaavvee--ttoocc--iinnddiirreecctt --mmccoommppaatt--aalliiggnn--ppaarrmm
           --mmnnoo--ccoommppaatt--aalliiggnn--ppaarrmm --mmffllooaatt112288  --mmnnoo--ffllooaatt112288 --mmggnnuu--aattttrriibbuuttee
           --mmnnoo--ggnnuu--aattttrriibbuuttee --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd==_g_u_a_r_d
           --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--rreegg==_r_e_g
           --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--ooffffsseett==_o_f_f_s_e_t

           _R_I_S_C_-_V _O_p_t_i_o_n_s --mmbbrraanncchh--ccoosstt==_N_-_i_n_s_t_r_u_c_t_i_o_n --mmpplltt  --mmnnoo--pplltt
           --mmaabbii==_A_B_I_-_s_t_r_i_n_g --mmffddiivv  --mmnnoo--ffddiivv --mmddiivv  --mmnnoo--ddiivv --mmaarrcchh==_I_S_A_-
           _s_t_r_i_n_g --mmttuunnee==_p_r_o_c_e_s_s_o_r_-_s_t_r_i_n_g --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==_n_u_m
           --mmssmmaallll--ddaattaa--lliimmiitt==_N_-_b_y_t_e_s --mmssaavvee--rreessttoorree  --mmnnoo--ssaavvee--rreessttoorree
           --mmssttrriicctt--aalliiggnn --mmnnoo--ssttrriicctt--aalliiggnn --mmccmmooddeell==mmeeddllooww --mmccmmooddeell==mmeeddaannyy
           --mmeexxpplliicciitt--rreellooccss  --mmnnoo--eexxpplliicciitt--rreellooccss --mmrreellaaxx --mmnnoo--rreellaaxx

           _R_L_7_8 _O_p_t_i_o_n_s --mmssiimm  --mmmmuull==nnoonnee  --mmmmuull==gg1133  --mmmmuull==gg1144  --mmaallllrreeggss
           --mmccppuu==gg1100  --mmccppuu==gg1133  --mmccppuu==gg1144  --mmgg1100  --mmgg1133  --mmgg1144
           --mm6644bbiitt--ddoouubblleess  --mm3322bbiitt--ddoouubblleess  --mmssaavvee--mmdduucc--iinn--iinntteerrrruuppttss

           _R_S_/_6_0_0_0 _a_n_d _P_o_w_e_r_P_C _O_p_t_i_o_n_s --mmccppuu==_c_p_u_-_t_y_p_e --mmttuunnee==_c_p_u_-_t_y_p_e
           --mmccmmooddeell==_c_o_d_e_-_m_o_d_e_l --mmppoowweerrppcc6644 --mmaallttiivveecc  --mmnnoo--aallttiivveecc
           --mmppoowweerrppcc--ggppoopptt  --mmnnoo--ppoowweerrppcc--ggppoopptt --mmppoowweerrppcc--ggffxxoopptt
           --mmnnoo--ppoowweerrppcc--ggffxxoopptt --mmmmffccrrff  --mmnnoo--mmffccrrff  --mmppooppccnnttbb  --mmnnoo--ppooppccnnttbb
           --mmppooppccnnttdd  --mmnnoo--ppooppccnnttdd --mmffpprrnndd  --mmnnoo--ffpprrnndd --mmccmmppbb  --mmnnoo--ccmmppbb
           --mmmmffppggpprr  --mmnnoo--mmffppggpprr  --mmhhaarrdd--ddffpp  --mmnnoo--hhaarrdd--ddffpp --mmffuullll--ttoocc
           --mmmmiinniimmaall--ttoocc  --mmnnoo--ffpp--iinn--ttoocc  --mmnnoo--ssuumm--iinn--ttoocc --mm6644  --mm3322
           --mmxxll--ccoommppaatt  --mmnnoo--xxll--ccoommppaatt  --mmppee --mmaalliiggnn--ppoowweerr  --mmaalliiggnn--nnaattuurraall
           --mmssoofftt--ffllooaatt  --mmhhaarrdd--ffllooaatt  --mmmmuullttiippllee  --mmnnoo--mmuullttiippllee
           --mmssiinnggllee--ffllooaatt  --mmddoouubbllee--ffllooaatt  --mmssiimmppllee--ffppuu --mmuuppddaattee  --mmnnoo--uuppddaattee
           --mmaavvooiidd--iinnddeexxeedd--aaddddrreesssseess  --mmnnoo--aavvooiidd--iinnddeexxeedd--aaddddrreesssseess
           --mmffuusseedd--mmaadddd  --mmnnoo--ffuusseedd--mmaadddd  --mmbbiitt--aalliiggnn  --mmnnoo--bbiitt--aalliiggnn
           --mmssttrriicctt--aalliiggnn  --mmnnoo--ssttrriicctt--aalliiggnn  --mmrreellooccaattaabbllee --mmnnoo--rreellooccaattaabbllee
           --mmrreellooccaattaabbllee--lliibb  --mmnnoo--rreellooccaattaabbllee--lliibb --mmttoocc  --mmnnoo--ttoocc  --mmlliittttllee
           --mmlliittttllee--eennddiiaann  --mmbbiigg  --mmbbiigg--eennddiiaann --mmddyynnaammiicc--nnoo--ppiicc  --mmaallttiivveecc
           --mmsswwddiivv  --mmssiinnggllee--ppiicc--bbaassee --mmpprriioorriittiizzee--rreessttrriicctteedd--iinnssnnss==_p_r_i_o_r_i_t_y
           --mmsscchheedd--ccoossttllyy--ddeepp==_d_e_p_e_n_d_e_n_c_e___t_y_p_e --mmiinnsseerrtt--sscchheedd--nnooppss==_s_c_h_e_m_e
           --mmccaallll--aaiixxddeesscc  --mmccaallll--eeaabbii  --mmccaallll--ffrreeeebbssdd --mmccaallll--lliinnuuxx
           --mmccaallll--nneettbbssdd  --mmccaallll--ooppeennbbssdd --mmccaallll--ssyyssvv  --mmccaallll--ssyyssvv--eeaabbii
           --mmccaallll--ssyyssvv--nnooeeaabbii --mmttrraacceebbaacckk==_t_r_a_c_e_b_a_c_k___t_y_p_e --mmaaiixx--ssttrruucctt--rreettuurrnn
           --mmssvvrr44--ssttrruucctt--rreettuurrnn --mmaabbii==_a_b_i_-_t_y_p_e  --mmsseeccuurree--pplltt  --mmbbssss--pplltt
           --mmbblloocckk--mmoovvee--iinnlliinnee--lliimmiitt==_n_u_m --mmbblloocckk--ccoommppaarree--iinnlliinnee--lliimmiitt==_n_u_m
           --mmbblloocckk--ccoommppaarree--iinnlliinnee--lloooopp--lliimmiitt==_n_u_m
           --mmssttrriinngg--ccoommppaarree--iinnlliinnee--lliimmiitt==_n_u_m --mmiisseell  --mmnnoo--iisseell --mmiisseell==yyeess
           --mmiisseell==nnoo --mmppaaiirreedd --mmvvrrssaavvee  --mmnnoo--vvrrssaavvee --mmmmuullhhww  --mmnnoo--mmuullhhww
           --mmddllmmzzbb  --mmnnoo--ddllmmzzbb --mmpprroottoottyyppee  --mmnnoo--pprroottoottyyppee --mmssiimm  --mmmmvvmmee
           --mmaaddss  --mmyyeelllloowwkknniiffee  --mmeemmbb  --mmssddaattaa --mmssddaattaa==_o_p_t
           --mmrreeaaddoonnllyy--iinn--ssddaattaa  --mmvvxxwwoorrkkss  --GG _n_u_m --mmrreecciipp  --mmrreecciipp==_o_p_t
           --mmnnoo--rreecciipp  --mmrreecciipp--pprreecciissiioonn --mmnnoo--rreecciipp--pprreecciissiioonn --mmvveecclliibbaabbii==_t_y_p_e
           --mmffrriizz  --mmnnoo--ffrriizz --mmppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss
           --mmnnoo--ppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss --mmssaavvee--ttoocc--iinnddiirreecctt
           --mmnnoo--ssaavvee--ttoocc--iinnddiirreecctt --mmppoowweerr88--ffuussiioonn  --mmnnoo--mmppoowweerr88--ffuussiioonn
           --mmppoowweerr88--vveeccttoorr  --mmnnoo--ppoowweerr88--vveeccttoorr --mmccrryyppttoo  --mmnnoo--ccrryyppttoo  --mmhhttmm
           --mmnnoo--hhttmm --mmqquuaadd--mmeemmoorryy  --mmnnoo--qquuaadd--mmeemmoorryy --mmqquuaadd--mmeemmoorryy--aattoommiicc
           --mmnnoo--qquuaadd--mmeemmoorryy--aattoommiicc --mmccoommppaatt--aalliiggnn--ppaarrmm  --mmnnoo--ccoommppaatt--aalliiggnn--ppaarrmm
           --mmffllooaatt112288  --mmnnoo--ffllooaatt112288  --mmffllooaatt112288--hhaarrddwwaarree
           --mmnnoo--ffllooaatt112288--hhaarrddwwaarree --mmggnnuu--aattttrriibbuuttee  --mmnnoo--ggnnuu--aattttrriibbuuttee
           --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd==_g_u_a_r_d --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--rreegg==_r_e_g
           --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--ooffffsseett==_o_f_f_s_e_t

           _R_X _O_p_t_i_o_n_s --mm6644bbiitt--ddoouubblleess  --mm3322bbiitt--ddoouubblleess  --ffppuu  --nnooffppuu --mmccppuu==
           --mmbbiigg--eennddiiaann--ddaattaa  --mmlliittttllee--eennddiiaann--ddaattaa --mmssmmaallll--ddaattaa --mmssiimm
           --mmnnoo--ssiimm --mmaass110000--ssyynnttaaxx  --mmnnoo--aass110000--ssyynnttaaxx --mmrreellaaxx
           --mmmmaaxx--ccoonnssttaanntt--ssiizzee== --mmiinntt--rreeggiisstteerr== --mmppiidd --mmaallllooww--ssttrriinngg--iinnssnnss
           --mmnnoo--aallllooww--ssttrriinngg--iinnssnnss --mmjjssrr --mmnnoo--wwaarrnn--mmuullttiippllee--ffaasstt--iinntteerrrruuppttss
           --mmssaavvee--aacccc--iinn--iinntteerrrruuppttss

           _S_/_3_9_0 _a_n_d _z_S_e_r_i_e_s _O_p_t_i_o_n_s --mmttuunnee==_c_p_u_-_t_y_p_e  --mmaarrcchh==_c_p_u_-_t_y_p_e
           --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt  --mmhhaarrdd--ddffpp  --mmnnoo--hhaarrdd--ddffpp
           --mmlloonngg--ddoouubbllee--6644  --mmlloonngg--ddoouubbllee--112288 --mmbbaacckkcchhaaiinn  --mmnnoo--bbaacckkcchhaaiinn
           --mmppaacckkeedd--ssttaacckk  --mmnnoo--ppaacckkeedd--ssttaacckk --mmssmmaallll--eexxeecc  --mmnnoo--ssmmaallll--eexxeecc
           --mmmmvvccllee  --mmnnoo--mmvvccllee --mm6644  --mm3311  --mmddeebbuugg  --mmnnoo--ddeebbuugg  --mmeessaa  --mmzzaarrcchh
           --mmhhttmm  --mmvvxx  --mmzzvveeccttoorr --mmttppff--ttrraaccee  --mmnnoo--ttppff--ttrraaccee  --mmffuusseedd--mmaadddd
           --mmnnoo--ffuusseedd--mmaadddd --mmwwaarrnn--ffrraammeessiizzee  --mmwwaarrnn--ddyynnaammiiccssttaacckk  --mmssttaacckk--ssiizzee
           --mmssttaacckk--gguuaarrdd --mmhhoottppaattcchh==_h_a_l_f_w_o_r_d_s,,_h_a_l_f_w_o_r_d_s

           _S_c_o_r_e _O_p_t_i_o_n_s --mmeebb  --mmeell --mmnnhhwwlloooopp --mmuullss --mmmmaacc --mmssccoorree55  --mmssccoorree55uu
           --mmssccoorree77  --mmssccoorree77dd

           _S_H _O_p_t_i_o_n_s --mm11  --mm22  --mm22ee --mm22aa--nnooffppuu  --mm22aa--ssiinnggllee--oonnllyy  --mm22aa--ssiinnggllee
           --mm22aa --mm33  --mm33ee --mm44--nnooffppuu  --mm44--ssiinnggllee--oonnllyy  --mm44--ssiinnggllee  --mm44
           --mm44aa--nnooffppuu  --mm44aa--ssiinnggllee--oonnllyy  --mm44aa--ssiinnggllee  --mm44aa  --mm44aall --mmbb  --mmll
           --mmddaalliiggnn  --mmrreellaaxx --mmbbiiggttaabbllee  --mmffmmoovvdd  --mmrreenneessaass  --mmnnoo--rreenneessaass
           --mmnnoommaaccssaavvee --mmiieeeeee  --mmnnoo--iieeeeee  --mmbbiittooppss  --mmiissiizzee
           --mmiinnlliinnee--iicc__iinnvvaalliiddaattee  --mmppaaddssttrruucctt --mmpprreeffeerrggoott  --mmuusseerrmmooddee
           --mmuullttccoosstt==_n_u_m_b_e_r  --mmddiivv==_s_t_r_a_t_e_g_y --mmddiivvssii33__lliibbffuunncc==_n_a_m_e
           --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss
           --mmaattoommiicc--mmooddeell==_a_t_o_m_i_c_-_m_o_d_e_l --mmbbrraanncchh--ccoosstt==_n_u_m  --mmzzddccbbrraanncchh
           --mmnnoo--zzddccbbrraanncchh --mmccbbrraanncchh--ffoorrccee--ddeellaayy--sslloott --mmffuusseedd--mmaadddd
           --mmnnoo--ffuusseedd--mmaadddd  --mmffssccaa  --mmnnoo--ffssccaa  --mmffssrrrraa  --mmnnoo--ffssrrrraa
           --mmpprreetteenndd--ccmmoovvee  --mmttaass

           _S_o_l_a_r_i_s _2 _O_p_t_i_o_n_s --mmcclleeaarr--hhwwccaapp  --mmnnoo--cclleeaarr--hhwwccaapp  --mmiimmppuurree--tteexxtt
           --mmnnoo--iimmppuurree--tteexxtt --pptthhrreeaaddss

           _S_P_A_R_C _O_p_t_i_o_n_s --mmccppuu==_c_p_u_-_t_y_p_e --mmttuunnee==_c_p_u_-_t_y_p_e --mmccmmooddeell==_c_o_d_e_-_m_o_d_e_l
           --mmmmeemmoorryy--mmooddeell==_m_e_m_-_m_o_d_e_l --mm3322  --mm6644  --mmaapppp--rreeggss  --mmnnoo--aapppp--rreeggss
           --mmffaasstteerr--ssttrruuccttss  --mmnnoo--ffaasstteerr--ssttrruuccttss  --mmffllaatt  --mmnnoo--ffllaatt --mmffppuu
           --mmnnoo--ffppuu  --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt --mmhhaarrdd--qquuaadd--ffllooaatt
           --mmssoofftt--qquuaadd--ffllooaatt --mmssttaacckk--bbiiaass  --mmnnoo--ssttaacckk--bbiiaass --mmssttdd--ssttrruucctt--rreettuurrnn
           --mmnnoo--ssttdd--ssttrruucctt--rreettuurrnn --mmuunnaalliiggnneedd--ddoouubblleess  --mmnnoo--uunnaalliiggnneedd--ddoouubblleess
           --mmuusseerr--mmooddee  --mmnnoo--uusseerr--mmooddee --mmvv88pplluuss  --mmnnoo--vv88pplluuss  --mmvviiss  --mmnnoo--vviiss
           --mmvviiss22  --mmnnoo--vviiss22  --mmvviiss33  --mmnnoo--vviiss33 --mmvviiss44 --mmnnoo--vviiss44 --mmvviiss44bb
           --mmnnoo--vviiss44bb --mmccbbccoonndd  --mmnnoo--ccbbccoonndd  --mmffmmaaff  --mmnnoo--ffmmaaff  --mmffssmmuulldd
           --mmnnoo--ffssmmuulldd --mmppooppcc  --mmnnoo--ppooppcc  --mmssuubbxxcc  --mmnnoo--ssuubbxxcc --mmffiixx--aatt669977ff
           --mmffiixx--uutt669999  --mmffiixx--uutt770000  --mmffiixx--ggrr771122rrcc --mmllrraa  --mmnnoo--llrraa

           _S_P_U _O_p_t_i_o_n_s --mmwwaarrnn--rreelloocc  --mmeerrrroorr--rreelloocc --mmssaaffee--ddmmaa  --mmuunnssaaffee--ddmmaa
           --mmbbrraanncchh--hhiinnttss --mmssmmaallll--mmeemm  --mmllaarrggee--mmeemm  --mmssttddmmaaiinn
           --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e --mmeeaa3322  --mmeeaa6644
           --mmaaddddrreessss--ssppaaccee--ccoonnvveerrssiioonn  --mmnnoo--aaddddrreessss--ssppaaccee--ccoonnvveerrssiioonn
           --mmccaacchhee--ssiizzee==_c_a_c_h_e_-_s_i_z_e --mmaattoommiicc--uuppddaatteess  --mmnnoo--aattoommiicc--uuppddaatteess

           _S_y_s_t_e_m _V _O_p_t_i_o_n_s --QQyy  --QQnn  --YYPP,,_p_a_t_h_s  --YYmm,,_d_i_r

           _T_I_L_E_-_G_x _O_p_t_i_o_n_s --mmccppuu==CCPPUU  --mm3322  --mm6644  --mmbbiigg--eennddiiaann
           --mmlliittttllee--eennddiiaann --mmccmmooddeell==_c_o_d_e_-_m_o_d_e_l

           _T_I_L_E_P_r_o _O_p_t_i_o_n_s --mmccppuu==_c_p_u  --mm3322

           _V_8_5_0 _O_p_t_i_o_n_s --mmlloonngg--ccaallllss  --mmnnoo--lloonngg--ccaallllss  --mmeepp  --mmnnoo--eepp
           --mmpprroolloogg--ffuunnccttiioonn  --mmnnoo--pprroolloogg--ffuunnccttiioonn  --mmssppaaccee --mmttddaa==_n  --mmssddaa==_n
           --mmzzddaa==_n --mmaapppp--rreeggss  --mmnnoo--aapppp--rreeggss --mmddiissaabbllee--ccaalllltt
           --mmnnoo--ddiissaabbllee--ccaalllltt --mmvv885500ee22vv33  --mmvv885500ee22  --mmvv885500ee11  --mmvv885500eess --mmvv885500ee
           --mmvv885500  --mmvv885500ee33vv55 --mmlloooopp --mmrreellaaxx --mmlloonngg--jjuummppss --mmssoofftt--ffllooaatt
           --mmhhaarrdd--ffllooaatt --mmggcccc--aabbii --mmrrhh885500--aabbii --mmbbiigg--sswwiittcchh

           _V_A_X _O_p_t_i_o_n_s --mmgg  --mmggnnuu  --mmuunniixx

           _V_i_s_i_u_m _O_p_t_i_o_n_s --mmddeebbuugg  --mmssiimm  --mmffppuu  --mmnnoo--ffppuu  --mmhhaarrdd--ffllooaatt
           --mmssoofftt--ffllooaatt --mmccppuu==_c_p_u_-_t_y_p_e  --mmttuunnee==_c_p_u_-_t_y_p_e  --mmssvv--mmooddee
           --mmuusseerr--mmooddee

           _V_M_S _O_p_t_i_o_n_s --mmvvmmss--rreettuurrnn--ccooddeess  --mmddeebbuugg--mmaaiinn==_p_r_e_f_i_x  --mmmmaalllloocc6644
           --mmppooiinntteerr--ssiizzee==_s_i_z_e

           _V_x_W_o_r_k_s _O_p_t_i_o_n_s --mmrrttpp  --nnoonn--ssttaattiicc  --BBssttaattiicc  --BBddyynnaammiicc --XXbbiinndd--llaazzyy
           --XXbbiinndd--nnooww

           _x_8_6 _O_p_t_i_o_n_s --mmttuunnee==_c_p_u_-_t_y_p_e  --mmaarrcchh==_c_p_u_-_t_y_p_e --mmttuunnee--ccttrrll==_f_e_a_t_u_r_e_-
           _l_i_s_t  --mmdduummpp--ttuunnee--ffeeaattuurreess  --mmnnoo--ddeeffaauulltt --mmffppmmaatthh==_u_n_i_t
           --mmaassmm==_d_i_a_l_e_c_t  --mmnnoo--ffaannccyy--mmaatthh--338877 --mmnnoo--ffpp--rreett--iinn--338877  --mm8800338877
           --mmhhaarrdd--ffllooaatt  --mmssoofftt--ffllooaatt --mmnnoo--wwiiddee--mmuullttiippllyy  --mmrrttdd
           --mmaalliiggnn--ddoouubbllee --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==_n_u_m
           --mmiinnccoommiinngg--ssttaacckk--bboouunnddaarryy==_n_u_m --mmcclldd  --mmccxx1166  --mmssaahhff  --mmmmoovvbbee
           --mmccrrcc3322 --mmrreecciipp  --mmrreecciipp==_o_p_t --mmvvzzeerroouuppppeerr  --mmpprreeffeerr--aavvxx112288
           --mmpprreeffeerr--vveeccttoorr--wwiiddtthh==_o_p_t --mmmmmmxx  --mmssssee  --mmssssee22  --mmssssee33  --mmssssssee33
           --mmssssee44..11  --mmssssee44..22  --mmssssee44  --mmaavvxx --mmaavvxx22  --mmaavvxx551122ff  --mmaavvxx551122ppff
           --mmaavvxx551122eerr  --mmaavvxx551122ccdd  --mmaavvxx551122vvll --mmaavvxx551122bbww  --mmaavvxx551122ddqq
           --mmaavvxx551122iiffmmaa  --mmaavvxx551122vvbbmmii  --mmsshhaa  --mmaaeess --mmppccllmmuull  --mmffssggssbbaassee
           --mmrrddrrnndd  --mmff1166cc  --mmffmmaa --mmppccoonnffiigg --mmwwbbnnooiinnvvdd --mmpprreeffeettcchhwwtt11
           --mmccllfflluusshhoopptt  --mmccllwwbb  --mmxxssaavveecc  --mmxxssaavveess --mmssssee44aa  --mm33ddnnooww  --mm33ddnnoowwaa
           --mmppooppccnntt  --mmaabbmm  --mmbbmmii  --mmttbbmm  --mmffmmaa44  --mmxxoopp --mmaaddxx  --mmllzzccnntt  --mmbbmmii22
           --mmffxxssrr  --mmxxssaavvee  --mmxxssaavveeoopptt  --mmrrttmm  --mmllwwpp  --mmmmppxx --mmmmwwaaiittxx  --mmccllzzeerroo
           --mmppkkuu  --mmtthhrreeaaddss --mmggffnnii  --mmvvaaeess --mmsshhssttkk --mmffoorrccee--iinnddiirreecctt--ccaallll
           --mmaavvxx551122vvbbmmii22 --mmvvppccllmmuullqqddqq --mmaavvxx551122bbiittaallgg --mmmmoovvddiirrii --mmmmoovvddiirr6644bb
           --mmaavvxx551122vvppooppccnnttddqq --mmaavvxx55112244ffmmaappss  --mmaavvxx551122vvnnnnii  --mmaavvxx55112244vvnnnniiww
           --mmpprrffcchhww  --mmrrddppiidd --mmrrddsseeeedd  --mmssggxx --mmmmss--bbiittffiieellddss
           --mmnnoo--aalliiggnn--ssttrriinnggooppss  --mmiinnlliinnee--aallll--ssttrriinnggooppss
           --mmiinnlliinnee--ssttrriinnggooppss--ddyynnaammiiccaallllyy  --mmssttrriinnggoopp--ssttrraatteeggyy==_a_l_g
           --mmmmeemmccppyy--ssttrraatteeggyy==_s_t_r_a_t_e_g_y  --mmmmeemmsseett--ssttrraatteeggyy==_s_t_r_a_t_e_g_y --mmppuusshh--aarrggss
           --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss  --mm112288bbiitt--lloonngg--ddoouubbllee
           --mm9966bbiitt--lloonngg--ddoouubbllee  --mmlloonngg--ddoouubbllee--6644  --mmlloonngg--ddoouubbllee--8800
           --mmlloonngg--ddoouubbllee--112288 --mmrreeggppaarrmm==_n_u_m  --mmsssseerreeggppaarrmm --mmvveecclliibbaabbii==_t_y_p_e
           --mmvveecctt88--rreett--iinn--mmeemm --mmppcc3322  --mmppcc6644  --mmppcc8800  --mmssttaacckkrreeaalliiggnn
           --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr  --mmnnoo--rreedd--zzoonnee  --mmnnoo--ttllss--ddiirreecctt--sseegg--rreeffss
           --mmccmmooddeell==_c_o_d_e_-_m_o_d_e_l  --mmaabbii==_n_a_m_e  --mmaaddddrreessss--mmooddee==_m_o_d_e --mm3322  --mm6644
           --mmxx3322  --mm1166  --mmiiaammccuu  --mmllaarrggee--ddaattaa--tthhrreesshhoolldd==_n_u_m --mmssssee22aavvxx
           --mmffeennttrryy  --mmrreeccoorrdd--mmccoouunntt  --mmnnoopp--mmccoouunntt  --mm88bbiitt--iiddiivv
           --mmaavvxx225566--sspplliitt--uunnaalliiggnneedd--llooaadd  --mmaavvxx225566--sspplliitt--uunnaalliiggnneedd--ssttoorree
           --mmaalliiggnn--ddaattaa==_t_y_p_e  --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd==_g_u_a_r_d
           --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--rreegg==_r_e_g
           --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--ooffffsseett==_o_f_f_s_e_t
           --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--ssyymmbbooll==_s_y_m_b_o_l --mmmmiittiiggaattee--rroopp
           --mmggeenneerraall--rreeggss--oonnllyy --mmccaallll--mmss22ssyyssvv--xxlloogguueess --mmiinnddiirreecctt--bbrraanncchh==_c_h_o_i_c_e
           --mmffuunnccttiioonn--rreettuurrnn==_c_h_o_i_c_e --mmiinnddiirreecctt--bbrraanncchh--rreeggiisstteerr

           _x_8_6 _W_i_n_d_o_w_s _O_p_t_i_o_n_s --mmccoonnssoollee  --mmccyyggwwiinn  --mmnnoo--ccyyggwwiinn  --mmddllll
           --mmnnoopp--ffuunn--ddlllliimmppoorrtt  --mmtthhrreeaadd --mmuunniiccooddee  --mmwwiinn3322  --mmwwiinnddoowwss
           --ffnnoo--sseett--ssttaacckk--eexxeeccuuttaabbllee

           _X_s_t_o_r_m_y_1_6 _O_p_t_i_o_n_s --mmssiimm

           _X_t_e_n_s_a _O_p_t_i_o_n_s --mmccoonnsstt1166  --mmnnoo--ccoonnsstt1166 --mmffuusseedd--mmaadddd
           --mmnnoo--ffuusseedd--mmaadddd --mmffoorrccee--nnoo--ppiicc --mmsseerriiaalliizzee--vvoollaattiillee
           --mmnnoo--sseerriiaalliizzee--vvoollaattiillee --mmtteexxtt--sseeccttiioonn--lliitteerraallss
           --mmnnoo--tteexxtt--sseeccttiioonn--lliitteerraallss --mmaauuttoo--lliittppoooollss  --mmnnoo--aauuttoo--lliittppoooollss
           --mmttaarrggeett--aalliiggnn  --mmnnoo--ttaarrggeett--aalliiggnn --mmlloonnggccaallllss  --mmnnoo--lloonnggccaallllss

           _z_S_e_r_i_e_s _O_p_t_i_o_n_s See S/390 and zSeries Options.

   OOppttiioonnss CCoonnttrroolllliinngg tthhee KKiinndd ooff OOuuttppuutt
       Compilation can involve up to four stages: preprocessing, compilation
       proper, assembly and linking, always in that order.  GCC is capable of
       preprocessing and compiling several files either into several assembler
       input files, or into one assembler input file; then each assembler
       input file produces an object file, and linking combines all the object
       files (those newly compiled, and those specified as input) into an
       executable file.

       For any given input file, the file name suffix determines what kind of
       compilation is done:

       _f_i_l_e..cc
           C source code that must be preprocessed.

       _f_i_l_e..ii
           C source code that should not be preprocessed.

       _f_i_l_e..iiii
           C++ source code that should not be preprocessed.

       _f_i_l_e..mm
           Objective-C source code.  Note that you must link with the _l_i_b_o_b_j_c
           library to make an Objective-C program work.

       _f_i_l_e..mmii
           Objective-C source code that should not be preprocessed.

       _f_i_l_e..mmmm
       _f_i_l_e..MM
           Objective-C++ source code.  Note that you must link with the
           _l_i_b_o_b_j_c library to make an Objective-C++ program work.  Note that
           ..MM refers to a literal capital M.

       _f_i_l_e..mmiiii
           Objective-C++ source code that should not be preprocessed.

       _f_i_l_e..hh
           C, C++, Objective-C or Objective-C++ header file to be turned into
           a precompiled header (default), or C, C++ header file to be turned
           into an Ada spec (via the --ffdduummpp--aaddaa--ssppeecc switch).

       _f_i_l_e..cccc
       _f_i_l_e..ccpp
       _f_i_l_e..ccxxxx
       _f_i_l_e..ccpppp
       _f_i_l_e..CCPPPP
       _f_i_l_e..cc++++
       _f_i_l_e..CC
           C++ source code that must be preprocessed.  Note that in ..ccxxxx, the
           last two letters must both be literally xx.  Likewise, ..CC refers to
           a literal capital C.

       _f_i_l_e..mmmm
       _f_i_l_e..MM
           Objective-C++ source code that must be preprocessed.

       _f_i_l_e..mmiiii
           Objective-C++ source code that should not be preprocessed.

       _f_i_l_e..hhhh
       _f_i_l_e..HH
       _f_i_l_e..hhpp
       _f_i_l_e..hhxxxx
       _f_i_l_e..hhpppp
       _f_i_l_e..HHPPPP
       _f_i_l_e..hh++++
       _f_i_l_e..ttcccc
           C++ header file to be turned into a precompiled header or Ada spec.

       _f_i_l_e..ff
       _f_i_l_e..ffoorr
       _f_i_l_e..ffttnn
           Fixed form Fortran source code that should not be preprocessed.

       _f_i_l_e..FF
       _f_i_l_e..FFOORR
       _f_i_l_e..ffpppp
       _f_i_l_e..FFPPPP
       _f_i_l_e..FFTTNN
           Fixed form Fortran source code that must be preprocessed (with the
           traditional preprocessor).

       _f_i_l_e..ff9900
       _f_i_l_e..ff9955
       _f_i_l_e..ff0033
       _f_i_l_e..ff0088
           Free form Fortran source code that should not be preprocessed.

       _f_i_l_e..FF9900
       _f_i_l_e..FF9955
       _f_i_l_e..FF0033
       _f_i_l_e..FF0088
           Free form Fortran source code that must be preprocessed (with the
           traditional preprocessor).

       _f_i_l_e..ggoo
           Go source code.

       _f_i_l_e..bbrriigg
           BRIG files (binary representation of HSAIL).

       _f_i_l_e..dd
           D source code.

       _f_i_l_e..ddii
           D interface file.

       _f_i_l_e..dddd
           D documentation code (Ddoc).

       _f_i_l_e..aaddss
           Ada source code file that contains a library unit declaration (a
           declaration of a package, subprogram, or generic, or a generic
           instantiation), or a library unit renaming declaration (a package,
           generic, or subprogram renaming declaration).  Such files are also
           called _s_p_e_c_s.

       _f_i_l_e..aaddbb
           Ada source code file containing a library unit body (a subprogram
           or package body).  Such files are also called _b_o_d_i_e_s.

       _f_i_l_e..ss
           Assembler code.

       _f_i_l_e..SS
       _f_i_l_e..ssxx
           Assembler code that must be preprocessed.

       _o_t_h_e_r
           An object file to be fed straight into linking.  Any file name with
           no recognized suffix is treated this way.

       You can specify the input language explicitly with the --xx option:

       --xx _l_a_n_g_u_a_g_e
           Specify explicitly the _l_a_n_g_u_a_g_e for the following input files
           (rather than letting the compiler choose a default based on the
           file name suffix).  This option applies to all following input
           files until the next --xx option.  Possible values for _l_a_n_g_u_a_g_e are:

                   c  c-header  cpp-output
                   c++  c++-header  c++-cpp-output
                   objective-c  objective-c-header  objective-c-cpp-output
                   objective-c++ objective-c++-header objective-c++-cpp-output
                   assembler  assembler-with-cpp
                   ada
                   d
                   f77  f77-cpp-input f95  f95-cpp-input
                   go
                   brig

       --xx nnoonnee
           Turn off any specification of a language, so that subsequent files
           are handled according to their file name suffixes (as they are if
           --xx has not been used at all).

       If you only want some of the stages of compilation, you can use --xx (or
       filename suffixes) to tell ggcccc where to start, and one of the options
       --cc, --SS, or --EE to say where ggcccc is to stop.  Note that some combinations
       (for example, --xx ccpppp--oouuttppuutt --EE) instruct ggcccc to do nothing at all.

       --cc  Compile or assemble the source files, but do not link.  The linking
           stage simply is not done.  The ultimate output is in the form of an
           object file for each source file.

           By default, the object file name for a source file is made by
           replacing the suffix ..cc, ..ii, ..ss, etc., with ..oo.

           Unrecognized input files, not requiring compilation or assembly,
           are ignored.

       --SS  Stop after the stage of compilation proper; do not assemble.  The
           output is in the form of an assembler code file for each non-
           assembler input file specified.

           By default, the assembler file name for a source file is made by
           replacing the suffix ..cc, ..ii, etc., with ..ss.

           Input files that don't require compilation are ignored.

       --EE  Stop after the preprocessing stage; do not run the compiler proper.
           The output is in the form of preprocessed source code, which is
           sent to the standard output.

           Input files that don't require preprocessing are ignored.

       --oo _f_i_l_e
           Place output in file _f_i_l_e.  This applies to whatever sort of output
           is being produced, whether it be an executable file, an object
           file, an assembler file or preprocessed C code.

           If --oo is not specified, the default is to put an executable file in
           _a_._o_u_t, the object file for _s_o_u_r_c_e_._s_u_f_f_i_x in _s_o_u_r_c_e_._o, its assembler
           file in _s_o_u_r_c_e_._s, a precompiled header file in _s_o_u_r_c_e_._s_u_f_f_i_x_._g_c_h,
           and all preprocessed C source on standard output.

       --vv  Print (on standard error output) the commands executed to run the
           stages of compilation.  Also print the version number of the
           compiler driver program and of the preprocessor and the compiler
           proper.

       --######
           Like --vv except the commands are not executed and arguments are
           quoted unless they contain only alphanumeric characters or "./-_".
           This is useful for shell scripts to capture the driver-generated
           command lines.

       ----hheellpp
           Print (on the standard output) a description of the command-line
           options understood by ggcccc.  If the --vv option is also specified then
           ----hheellpp is also passed on to the various processes invoked by ggcccc,
           so that they can display the command-line options they accept.  If
           the --WWeexxttrraa option has also been specified (prior to the ----hheellpp
           option), then command-line options that have no documentation
           associated with them are also displayed.

       ----ttaarrggeett--hheellpp
           Print (on the standard output) a description of target-specific
           command-line options for each tool.  For some targets extra target-
           specific information may also be printed.

       ----hheellpp=={{_c_l_a_s_s|[^^]_q_u_a_l_i_f_i_e_r}}[,,......]
           Print (on the standard output) a description of the command-line
           options understood by the compiler that fit into all specified
           classes and qualifiers.  These are the supported classes:

           ooppttiimmiizzeerrss
               Display all of the optimization options supported by the
               compiler.

           wwaarrnniinnggss
               Display all of the options controlling warning messages
               produced by the compiler.

           ttaarrggeett
               Display target-specific options.  Unlike the ----ttaarrggeett--hheellpp
               option however, target-specific options of the linker and
               assembler are not displayed.  This is because those tools do
               not currently support the extended ----hheellpp== syntax.

           ppaarraammss
               Display the values recognized by the ----ppaarraamm option.

           _l_a_n_g_u_a_g_e
               Display the options supported for _l_a_n_g_u_a_g_e, where _l_a_n_g_u_a_g_e is
               the name of one of the languages supported in this version of
               GCC.

           ccoommmmoonn
               Display the options that are common to all languages.

           These are the supported qualifiers:

           uunnddooccuummeenntteedd
               Display only those options that are undocumented.

           jjooiinneedd
               Display options taking an argument that appears after an equal
               sign in the same continuous piece of text, such as:
               ----hheellpp==ttaarrggeett.

           sseeppaarraattee
               Display options taking an argument that appears as a separate
               word following the original option, such as: --oo oouuttppuutt--ffiillee.

           Thus for example to display all the undocumented target-specific
           switches supported by the compiler, use:

                   --help=target,undocumented

           The sense of a qualifier can be inverted by prefixing it with the ^^
           character, so for example to display all binary warning options
           (i.e., ones that are either on or off and that do not take an
           argument) that have a description, use:

                   --help=warnings,^joined,^undocumented

           The argument to ----hheellpp== should not consist solely of inverted
           qualifiers.

           Combining several classes is possible, although this usually
           restricts the output so much that there is nothing to display.  One
           case where it does work, however, is when one of the classes is
           _t_a_r_g_e_t.  For example, to display all the target-specific
           optimization options, use:

                   --help=target,optimizers

           The ----hheellpp== option can be repeated on the command line.  Each
           successive use displays its requested class of options, skipping
           those that have already been displayed.

           If the --QQ option appears on the command line before the ----hheellpp==
           option, then the descriptive text displayed by ----hheellpp== is changed.
           Instead of describing the displayed options, an indication is given
           as to whether the option is enabled, disabled or set to a specific
           value (assuming that the compiler knows this at the point where the
           ----hheellpp== option is used).

           Here is a truncated example from the ARM port of ggcccc:

                     % gcc -Q -mabi=2 --help=target -c
                     The following options are target specific:
                     -mabi=                                2
                     -mabort-on-noreturn                   [disabled]
                     -mapcs                                [disabled]

           The output is sensitive to the effects of previous command-line
           options, so for example it is possible to find out which
           optimizations are enabled at --OO22 by using:

                   -Q -O2 --help=optimizers

           Alternatively you can discover which binary optimizations are
           enabled by --OO33 by using:

                   gcc -c -Q -O3 --help=optimizers > /tmp/O3-opts
                   gcc -c -Q -O2 --help=optimizers > /tmp/O2-opts
                   diff /tmp/O2-opts /tmp/O3-opts | grep enabled

       ----vveerrssiioonn
           Display the version number and copyrights of the invoked GCC.

       --ppaassss--eexxiitt--ccooddeess
           Normally the ggcccc program exits with the code of 1 if any phase of
           the compiler returns a non-success return code.  If you specify
           --ppaassss--eexxiitt--ccooddeess, the ggcccc program instead returns with the
           numerically highest error produced by any phase returning an error
           indication.  The C, C++, and Fortran front ends return 4 if an
           internal compiler error is encountered.

       --ppiippee
           Use pipes rather than temporary files for communication between the
           various stages of compilation.  This fails to work on some systems
           where the assembler is unable to read from a pipe; but the GNU
           assembler has no trouble.

       --ssppeeccss==_f_i_l_e
           Process _f_i_l_e after the compiler reads in the standard _s_p_e_c_s file,
           in order to override the defaults which the ggcccc driver program uses
           when determining what switches to pass to cccc11, cccc11pplluuss, aass, lldd,
           etc.  More than one --ssppeeccss==_f_i_l_e can be specified on the command
           line, and they are processed in order, from left to right.

       --wwrraappppeerr
           Invoke all subcommands under a wrapper program.  The name of the
           wrapper program and its parameters are passed as a comma separated
           list.

                   gcc -c t.c -wrapper gdb,--args

           This invokes all subprograms of ggcccc under ggddbb ----aarrggss, thus the
           invocation of cccc11 is ggddbb ----aarrggss cccc11 .......

       --ffffiillee--pprreeffiixx--mmaapp==_o_l_d==_n_e_w
           When compiling files residing in directory _o_l_d, record any
           references to them in the result of the compilation as if the files
           resided in directory _n_e_w instead.  Specifying this option is
           equivalent to specifying all the individual --ff**--pprreeffiixx--mmaapp options.
           This can be used to make reproducible builds that are location
           independent.  See also --ffmmaaccrroo--pprreeffiixx--mmaapp and --ffddeebbuugg--pprreeffiixx--mmaapp.

       --ffpplluuggiinn==_n_a_m_e..ssoo
           Load the plugin code in file _n_a_m_e.so, assumed to be a shared object
           to be dlopen'd by the compiler.  The base name of the shared object
           file is used to identify the plugin for the purposes of argument
           parsing (See --ffpplluuggiinn--aarrgg--_n_a_m_e--_k_e_y==_v_a_l_u_e below).  Each plugin
           should define the callback functions specified in the Plugins API.

       --ffpplluuggiinn--aarrgg--_n_a_m_e--_k_e_y==_v_a_l_u_e
           Define an argument called _k_e_y with a value of _v_a_l_u_e for the plugin
           called _n_a_m_e.

       --ffdduummpp--aaddaa--ssppeecc[--sslliimm]
           For C and C++ source and include files, generate corresponding Ada
           specs.

       --ffaaddaa--ssppeecc--ppaarreenntt==_u_n_i_t
           In conjunction with --ffdduummpp--aaddaa--ssppeecc[--sslliimm] above, generate Ada
           specs as child units of parent _u_n_i_t.

       --ffdduummpp--ggoo--ssppeecc==_f_i_l_e
           For input files in any language, generate corresponding Go
           declarations in _f_i_l_e.  This generates Go "const", "type", "var",
           and "func" declarations which may be a useful way to start writing
           a Go interface to code written in some other language.

       @@_f_i_l_e
           Read command-line options from _f_i_l_e.  The options read are inserted
           in place of the original @_f_i_l_e option.  If _f_i_l_e does not exist, or
           cannot be read, then the option will be treated literally, and not
           removed.

           Options in _f_i_l_e are separated by whitespace.  A whitespace
           character may be included in an option by surrounding the entire
           option in either single or double quotes.  Any character (including
           a backslash) may be included by prefixing the character to be
           included with a backslash.  The _f_i_l_e may itself contain additional
           @_f_i_l_e options; any such options will be processed recursively.

   CCoommppiilliinngg CC++++ PPrrooggrraammss
       C++ source files conventionally use one of the suffixes ..CC, ..cccc, ..ccpppp,
       ..CCPPPP, ..cc++++, ..ccpp, or ..ccxxxx; C++ header files often use ..hhhh, ..hhpppp, ..HH, or
       (for shared template code) ..ttcccc; and preprocessed C++ files use the
       suffix ..iiii.  GCC recognizes files with these names and compiles them as
       C++ programs even if you call the compiler the same way as for
       compiling C programs (usually with the name ggcccc).

       However, the use of ggcccc does not add the C++ library.  gg++++ is a program
       that calls GCC and automatically specifies linking against the C++
       library.  It treats ..cc, ..hh and ..ii files as C++ source files instead of
       C source files unless --xx is used.  This program is also useful when
       precompiling a C header file with a ..hh extension for use in C++
       compilations.  On many systems, gg++++ is also installed with the name
       cc++++.

       When you compile C++ programs, you may specify many of the same
       command-line options that you use for compiling programs in any
       language; or command-line options meaningful for C and related
       languages; or options that are meaningful only for C++ programs.

   OOppttiioonnss CCoonnttrroolllliinngg CC DDiiaalleecctt
       The following options control the dialect of C (or languages derived
       from C, such as C++, Objective-C and Objective-C++) that the compiler
       accepts:

       --aannssii
           In C mode, this is equivalent to --ssttdd==cc9900. In C++ mode, it is
           equivalent to --ssttdd==cc++++9988.

           This turns off certain features of GCC that are incompatible with
           ISO C90 (when compiling C code), or of standard C++ (when compiling
           C++ code), such as the "asm" and "typeof" keywords, and predefined
           macros such as "unix" and "vax" that identify the type of system
           you are using.  It also enables the undesirable and rarely used ISO
           trigraph feature.  For the C compiler, it disables recognition of
           C++ style //// comments as well as the "inline" keyword.

           The alternate keywords "__asm__", "__extension__", "__inline__" and
           "__typeof__" continue to work despite --aannssii.  You would not want to
           use them in an ISO C program, of course, but it is useful to put
           them in header files that might be included in compilations done
           with --aannssii.  Alternate predefined macros such as "__unix__" and
           "__vax__" are also available, with or without --aannssii.

           The --aannssii option does not cause non-ISO programs to be rejected
           gratuitously.  For that, --WWppeeddaannttiicc is required in addition to
           --aannssii.

           The macro "__STRICT_ANSI__" is predefined when the --aannssii option is
           used.  Some header files may notice this macro and refrain from
           declaring certain functions or defining certain macros that the ISO
           standard doesn't call for; this is to avoid interfering with any
           programs that might use these names for other things.

           Functions that are normally built in but do not have semantics
           defined by ISO C (such as "alloca" and "ffs") are not built-in
           functions when --aannssii is used.

       --ssttdd==
           Determine the language standard.   This option is currently only
           supported when compiling C or C++.

           The compiler can accept several base standards, such as cc9900 or
           cc++++9988, and GNU dialects of those standards, such as ggnnuu9900 or
           ggnnuu++++9988.  When a base standard is specified, the compiler accepts
           all programs following that standard plus those using GNU
           extensions that do not contradict it.  For example, --ssttdd==cc9900 turns
           off certain features of GCC that are incompatible with ISO C90,
           such as the "asm" and "typeof" keywords, but not other GNU
           extensions that do not have a meaning in ISO C90, such as omitting
           the middle term of a "?:" expression. On the other hand, when a GNU
           dialect of a standard is specified, all features supported by the
           compiler are enabled, even when those features change the meaning
           of the base standard.  As a result, some strict-conforming programs
           may be rejected.  The particular standard is used by --WWppeeddaannttiicc to
           identify which features are GNU extensions given that version of
           the standard. For example --ssttdd==ggnnuu9900 --WWppeeddaannttiicc warns about C++
           style //// comments, while --ssttdd==ggnnuu9999 --WWppeeddaannttiicc does not.

           A value for this option must be provided; possible values are

           cc9900
           cc8899
           iissoo99889999::11999900
               Support all ISO C90 programs (certain GNU extensions that
               conflict with ISO C90 are disabled). Same as --aannssii for C code.

           iissoo99889999::119999440099
               ISO C90 as modified in amendment 1.

           cc9999
           cc99xx
           iissoo99889999::11999999
           iissoo99889999::119999xx
               ISO C99.  This standard is substantially completely supported,
               modulo bugs and floating-point issues (mainly but not entirely
               relating to optional C99 features from Annexes F and G).  See
               <hhttttpp::////ggcccc..ggnnuu..oorrgg//cc9999ssttaattuuss..hhttmmll> for more information.  The
               names cc99xx and iissoo99889999::119999xx are deprecated.

           cc1111
           cc11xx
           iissoo99889999::22001111
               ISO C11, the 2011 revision of the ISO C standard.  This
               standard is substantially completely supported, modulo bugs,
               floating-point issues (mainly but not entirely relating to
               optional C11 features from Annexes F and G) and the optional
               Annexes K (Bounds-checking interfaces) and L (Analyzability).
               The name cc11xx is deprecated.

           cc1177
           cc1188
           iissoo99889999::22001177
           iissoo99889999::22001188
               ISO C17, the 2017 revision of the ISO C standard (expected to
               be published in 2018).  This standard is same as C11 except for
               corrections of defects (all of which are also applied with
               --ssttdd==cc1111) and a new value of "__STDC_VERSION__", and so is
               supported to the same extent as C11.

           ggnnuu9900
           ggnnuu8899
               GNU dialect of ISO C90 (including some C99 features).

           ggnnuu9999
           ggnnuu99xx
               GNU dialect of ISO C99.  The name ggnnuu99xx is deprecated.

           ggnnuu1111
           ggnnuu11xx
               GNU dialect of ISO C11.  The name ggnnuu11xx is deprecated.

           ggnnuu1177
           ggnnuu1188
               GNU dialect of ISO C17.  This is the default for C code.

           cc++++9988
           cc++++0033
               The 1998 ISO C++ standard plus the 2003 technical corrigendum
               and some additional defect reports. Same as --aannssii for C++ code.

           ggnnuu++++9988
           ggnnuu++++0033
               GNU dialect of --ssttdd==cc++++9988.

           cc++++1111
           cc++++00xx
               The 2011 ISO C++ standard plus amendments.  The name cc++++00xx is
               deprecated.

           ggnnuu++++1111
           ggnnuu++++00xx
               GNU dialect of --ssttdd==cc++++1111.  The name ggnnuu++++00xx is deprecated.

           cc++++1144
           cc++++11yy
               The 2014 ISO C++ standard plus amendments.  The name cc++++11yy is
               deprecated.

           ggnnuu++++1144
           ggnnuu++++11yy
               GNU dialect of --ssttdd==cc++++1144.  This is the default for C++ code.
               The name ggnnuu++++11yy is deprecated.

           cc++++1177
           cc++++11zz
               The 2017 ISO C++ standard plus amendments.  The name cc++++11zz is
               deprecated.

           ggnnuu++++1177
           ggnnuu++++11zz
               GNU dialect of --ssttdd==cc++++1177.  The name ggnnuu++++11zz is deprecated.

           cc++++22aa
               The next revision of the ISO C++ standard, tentatively planned
               for 2020.  Support is highly experimental, and will almost
               certainly change in incompatible ways in future releases.

           ggnnuu++++22aa
               GNU dialect of --ssttdd==cc++++22aa.  Support is highly experimental, and
               will almost certainly change in incompatible ways in future
               releases.

       --ffggnnuu8899--iinnlliinnee
           The option --ffggnnuu8899--iinnlliinnee tells GCC to use the traditional GNU
           semantics for "inline" functions when in C99 mode.

           Using this option is roughly equivalent to adding the "gnu_inline"
           function attribute to all inline functions.

           The option --ffnnoo--ggnnuu8899--iinnlliinnee explicitly tells GCC to use the C99
           semantics for "inline" when in C99 or gnu99 mode (i.e., it
           specifies the default behavior).  This option is not supported in
           --ssttdd==cc9900 or --ssttdd==ggnnuu9900 mode.

           The preprocessor macros "__GNUC_GNU_INLINE__" and
           "__GNUC_STDC_INLINE__" may be used to check which semantics are in
           effect for "inline" functions.

       --ffppeerrmmiitttteedd--fflltt--eevvaall--mmeetthhooddss==_s_t_y_l_e
           ISO/IEC TS 18661-3 defines new permissible values for
           "FLT_EVAL_METHOD" that indicate that operations and constants with
           a semantic type that is an interchange or extended format should be
           evaluated to the precision and range of that type.  These new
           values are a superset of those permitted under C99/C11, which does
           not specify the meaning of other positive values of
           "FLT_EVAL_METHOD".  As such, code conforming to C11 may not have
           been written expecting the possibility of the new values.

           --ffppeerrmmiitttteedd--fflltt--eevvaall--mmeetthhooddss specifies whether the compiler should
           allow only the values of "FLT_EVAL_METHOD" specified in C99/C11, or
           the extended set of values specified in ISO/IEC TS 18661-3.

           _s_t_y_l_e is either "c11" or "ts-18661-3" as appropriate.

           The default when in a standards compliant mode (--ssttdd==cc1111 or
           similar) is --ffppeerrmmiitttteedd--fflltt--eevvaall--mmeetthhooddss==cc1111.  The default when in
           a GNU dialect (--ssttdd==ggnnuu1111 or similar) is
           --ffppeerrmmiitttteedd--fflltt--eevvaall--mmeetthhooddss==ttss--1188666611--33.

       --aauuxx--iinnffoo _f_i_l_e_n_a_m_e
           Output to the given filename prototyped declarations for all
           functions declared and/or defined in a translation unit, including
           those in header files.  This option is silently ignored in any
           language other than C.

           Besides declarations, the file indicates, in comments, the origin
           of each declaration (source file and line), whether the declaration
           was implicit, prototyped or unprototyped (II, NN for new or OO for
           old, respectively, in the first character after the line number and
           the colon), and whether it came from a declaration or a definition
           (CC or FF, respectively, in the following character).  In the case of
           function definitions, a K&R-style list of arguments followed by
           their declarations is also provided, inside comments, after the
           declaration.

       --ffaallllooww--ppaarraammeetteerrlleessss--vvaarriiaaddiicc--ffuunnccttiioonnss
           Accept variadic functions without named parameters.

           Although it is possible to define such a function, this is not very
           useful as it is not possible to read the arguments.  This is only
           supported for C as this construct is allowed by C++.

       --ffnnoo--aassmm
           Do not recognize "asm", "inline" or "typeof" as a keyword, so that
           code can use these words as identifiers.  You can use the keywords
           "__asm__", "__inline__" and "__typeof__" instead.  --aannssii implies
           --ffnnoo--aassmm.

           In C++, this switch only affects the "typeof" keyword, since "asm"
           and "inline" are standard keywords.  You may want to use the
           --ffnnoo--ggnnuu--kkeeyywwoorrddss flag instead, which has the same effect.  In C99
           mode (--ssttdd==cc9999 or --ssttdd==ggnnuu9999), this switch only affects the "asm"
           and "typeof" keywords, since "inline" is a standard keyword in ISO
           C99.

       --ffnnoo--bbuuiillttiinn
       --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n
           Don't recognize built-in functions that do not begin with
           ____bbuuiillttiinn__ as prefix.

           GCC normally generates special code to handle certain built-in
           functions more efficiently; for instance, calls to "alloca" may
           become single instructions which adjust the stack directly, and
           calls to "memcpy" may become inline copy loops.  The resulting code
           is often both smaller and faster, but since the function calls no
           longer appear as such, you cannot set a breakpoint on those calls,
           nor can you change the behavior of the functions by linking with a
           different library.  In addition, when a function is recognized as a
           built-in function, GCC may use information about that function to
           warn about problems with calls to that function, or to generate
           more efficient code, even if the resulting code still contains
           calls to that function.  For example, warnings are given with
           --WWffoorrmmaatt for bad calls to "printf" when "printf" is built in and
           "strlen" is known not to modify global memory.

           With the --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n option only the built-in function
           _f_u_n_c_t_i_o_n is disabled.  _f_u_n_c_t_i_o_n must not begin with ____bbuuiillttiinn__.  If
           a function is named that is not built-in in this version of GCC,
           this option is ignored.  There is no corresponding
           --ffbbuuiillttiinn--_f_u_n_c_t_i_o_n option; if you wish to enable built-in functions
           selectively when using --ffnnoo--bbuuiillttiinn or --ffffrreeeessttaannddiinngg, you may
           define macros such as:

                   #define abs(n)          __builtin_abs ((n))
                   #define strcpy(d, s)    __builtin_strcpy ((d), (s))

       --ffggiimmppllee
           Enable parsing of function definitions marked with "__GIMPLE".
           This is an experimental feature that allows unit testing of GIMPLE
           passes.

       --ffhhoosstteedd
           Assert that compilation targets a hosted environment.  This implies
           --ffbbuuiillttiinn.  A hosted environment is one in which the entire
           standard library is available, and in which "main" has a return
           type of "int".  Examples are nearly everything except a kernel.
           This is equivalent to --ffnnoo--ffrreeeessttaannddiinngg.

       --ffffrreeeessttaannddiinngg
           Assert that compilation targets a freestanding environment.  This
           implies --ffnnoo--bbuuiillttiinn.  A freestanding environment is one in which
           the standard library may not exist, and program startup may not
           necessarily be at "main".  The most obvious example is an OS
           kernel.  This is equivalent to --ffnnoo--hhoosstteedd.

       --ffooppeennaacccc
           Enable handling of OpenACC directives "#pragma acc" in C/C++ and
           "!$acc" in Fortran.  When --ffooppeennaacccc is specified, the compiler
           generates accelerated code according to the OpenACC Application
           Programming Interface v2.0 <hhttttppss::////wwwwww..ooppeennaacccc..oorrgg>.  This option
           implies --pptthhrreeaadd, and thus is only supported on targets that have
           support for --pptthhrreeaadd.

       --ffooppeennaacccc--ddiimm==_g_e_o_m
           Specify default compute dimensions for parallel offload regions
           that do not explicitly specify.  The _g_e_o_m value is a triple of
           ':'-separated sizes, in order 'gang', 'worker' and, 'vector'.  A
           size can be omitted, to use a target-specific default value.

       --ffooppeennmmpp
           Enable handling of OpenMP directives "#pragma omp" in C/C++ and
           "!$omp" in Fortran.  When --ffooppeennmmpp is specified, the compiler
           generates parallel code according to the OpenMP Application Program
           Interface v4.5 <hhttttpp::////wwwwww..ooppeennmmpp..oorrgg//>.  This option implies
           --pptthhrreeaadd, and thus is only supported on targets that have support
           for --pptthhrreeaadd. --ffooppeennmmpp implies --ffooppeennmmpp--ssiimmdd.

       --ffooppeennmmpp--ssiimmdd
           Enable handling of OpenMP's SIMD directives with "#pragma omp" in
           C/C++ and "!$omp" in Fortran. Other OpenMP directives are ignored.

       --ffggnnuu--ttmm
           When the option --ffggnnuu--ttmm is specified, the compiler generates code
           for the Linux variant of Intel's current Transactional Memory ABI
           specification document (Revision 1.1, May 6 2009).  This is an
           experimental feature whose interface may change in future versions
           of GCC, as the official specification changes.  Please note that
           not all architectures are supported for this feature.

           For more information on GCC's support for transactional memory,

           Note that the transactional memory feature is not supported with
           non-call exceptions (--ffnnoonn--ccaallll--eexxcceeppttiioonnss).

       --ffmmss--eexxtteennssiioonnss
           Accept some non-standard constructs used in Microsoft header files.

           In C++ code, this allows member names in structures to be similar
           to previous types declarations.

                   typedef int UOW;
                   struct ABC {
                     UOW UOW;
                   };

           Some cases of unnamed fields in structures and unions are only
           accepted with this option.

           Note that this option is off for all targets but x86 targets using
           ms-abi.

       --ffppllaann99--eexxtteennssiioonnss
           Accept some non-standard constructs used in Plan 9 code.

           This enables --ffmmss--eexxtteennssiioonnss, permits passing pointers to
           structures with anonymous fields to functions that expect pointers
           to elements of the type of the field, and permits referring to
           anonymous fields declared using a typedef.    This is only
           supported for C, not C++.

       --ffccoonndd--mmiissmmaattcchh
           Allow conditional expressions with mismatched types in the second
           and third arguments.  The value of such an expression is void.
           This option is not supported for C++.

       --ffllaaxx--vveeccttoorr--ccoonnvveerrssiioonnss
           Allow implicit conversions between vectors with differing numbers
           of elements and/or incompatible element types.  This option should
           not be used for new code.

       --ffuunnssiiggnneedd--cchhaarr
           Let the type "char" be unsigned, like "unsigned char".

           Each kind of machine has a default for what "char" should be.  It
           is either like "unsigned char" by default or like "signed char" by
           default.

           Ideally, a portable program should always use "signed char" or
           "unsigned char" when it depends on the signedness of an object.
           But many programs have been written to use plain "char" and expect
           it to be signed, or expect it to be unsigned, depending on the
           machines they were written for.  This option, and its inverse, let
           you make such a program work with the opposite default.

           The type "char" is always a distinct type from each of "signed
           char" or "unsigned char", even though its behavior is always just
           like one of those two.

       --ffssiiggnneedd--cchhaarr
           Let the type "char" be signed, like "signed char".

           Note that this is equivalent to --ffnnoo--uunnssiiggnneedd--cchhaarr, which is the
           negative form of --ffuunnssiiggnneedd--cchhaarr.  Likewise, the option
           --ffnnoo--ssiiggnneedd--cchhaarr is equivalent to --ffuunnssiiggnneedd--cchhaarr.

       --ffssiiggnneedd--bbiittffiieellddss
       --ffuunnssiiggnneedd--bbiittffiieellddss
       --ffnnoo--ssiiggnneedd--bbiittffiieellddss
       --ffnnoo--uunnssiiggnneedd--bbiittffiieellddss
           These options control whether a bit-field is signed or unsigned,
           when the declaration does not use either "signed" or "unsigned".
           By default, such a bit-field is signed, because this is consistent:
           the basic integer types such as "int" are signed types.

       --ffssssoo--ssttrruucctt==_e_n_d_i_a_n_n_e_s_s
           Set the default scalar storage order of structures and unions to
           the specified endianness.  The accepted values are bbiigg--eennddiiaann,
           lliittttllee--eennddiiaann and nnaattiivvee for the native endianness of the target
           (the default).  This option is not supported for C++.

           WWaarrnniinngg:: the --ffssssoo--ssttrruucctt switch causes GCC to generate code that
           is not binary compatible with code generated without it if the
           specified endianness is not the native endianness of the target.

   OOppttiioonnss CCoonnttrroolllliinngg CC++++ DDiiaalleecctt
       This section describes the command-line options that are only
       meaningful for C++ programs.  You can also use most of the GNU compiler
       options regardless of what language your program is in.  For example,
       you might compile a file _f_i_r_s_t_C_l_a_s_s_._C like this:

               g++ -g -fstrict-enums -O -c firstClass.C

       In this example, only --ffssttrriicctt--eennuummss is an option meant only for C++
       programs; you can use the other options with any language supported by
       GCC.

       Some options for compiling C programs, such as --ssttdd, are also relevant
       for C++ programs.

       Here is a list of options that are _o_n_l_y for compiling C++ programs:

       --ffaabbii--vveerrssiioonn==_n
           Use version _n of the C++ ABI.  The default is version 0.

           Version 0 refers to the version conforming most closely to the C++
           ABI specification.  Therefore, the ABI obtained using version 0
           will change in different versions of G++ as ABI bugs are fixed.

           Version 1 is the version of the C++ ABI that first appeared in G++
           3.2.

           Version 2 is the version of the C++ ABI that first appeared in G++
           3.4, and was the default through G++ 4.9.

           Version 3 corrects an error in mangling a constant address as a
           template argument.

           Version 4, which first appeared in G++ 4.5, implements a standard
           mangling for vector types.

           Version 5, which first appeared in G++ 4.6, corrects the mangling
           of attribute const/volatile on function pointer types, decltype of
           a plain decl, and use of a function parameter in the declaration of
           another parameter.

           Version 6, which first appeared in G++ 4.7, corrects the promotion
           behavior of C++11 scoped enums and the mangling of template
           argument packs, const/static_cast, prefix ++ and --, and a class
           scope function used as a template argument.

           Version 7, which first appeared in G++ 4.8, that treats nullptr_t
           as a builtin type and corrects the mangling of lambdas in default
           argument scope.

           Version 8, which first appeared in G++ 4.9, corrects the
           substitution behavior of function types with function-cv-
           qualifiers.

           Version 9, which first appeared in G++ 5.2, corrects the alignment
           of "nullptr_t".

           Version 10, which first appeared in G++ 6.1, adds mangling of
           attributes that affect type identity, such as ia32 calling
           convention attributes (e.g. ssttddccaallll).

           Version 11, which first appeared in G++ 7, corrects the mangling of
           sizeof... expressions and operator names.  For multiple entities
           with the same name within a function, that are declared in
           different scopes, the mangling now changes starting with the
           twelfth occurrence.  It also implies --ffnneeww--iinnhheerriittiinngg--ccttoorrss.

           Version 12, which first appeared in G++ 8, corrects the calling
           conventions for empty classes on the x86_64 target and for classes
           with only deleted copy/move constructors.  It accidentally changes
           the calling convention for classes with a deleted copy constructor
           and a trivial move constructor.

           Version 13, which first appeared in G++ 8.2, fixes the accidental
           change in version 12.

           See also --WWaabbii.

       --ffaabbii--ccoommppaatt--vveerrssiioonn==_n
           On targets that support strong aliases, G++ works around mangling
           changes by creating an alias with the correct mangled name when
           defining a symbol with an incorrect mangled name.  This switch
           specifies which ABI version to use for the alias.

           With --ffaabbii--vveerrssiioonn==00 (the default), this defaults to 11 (GCC 7
           compatibility).  If another ABI version is explicitly selected,
           this defaults to 0.  For compatibility with GCC versions 3.2
           through 4.9, use --ffaabbii--ccoommppaatt--vveerrssiioonn==22.

           If this option is not provided but --WWaabbii==_n is, that version is used
           for compatibility aliases.  If this option is provided along with
           --WWaabbii (without the version), the version from this option is used
           for the warning.

       --ffnnoo--aacccceessss--ccoonnttrrooll
           Turn off all access checking.  This switch is mainly useful for
           working around bugs in the access control code.

       --ffaalliiggnneedd--nneeww
           Enable support for C++17 "new" of types that require more alignment
           than "void* ::operator new(std::size_t)" provides.  A numeric
           argument such as "-faligned-new=32" can be used to specify how much
           alignment (in bytes) is provided by that function, but few users
           will need to override the default of "alignof(std::max_align_t)".

           This flag is enabled by default for --ssttdd==cc++++1177.

       --ffcchheecckk--nneeww
           Check that the pointer returned by "operator new" is non-null
           before attempting to modify the storage allocated.  This check is
           normally unnecessary because the C++ standard specifies that
           "operator new" only returns 0 if it is declared "throw()", in which
           case the compiler always checks the return value even without this
           option.  In all other cases, when "operator new" has a non-empty
           exception specification, memory exhaustion is signalled by throwing
           "std::bad_alloc".  See also nneeww ((nnootthhrrooww)).

       --ffccoonncceeppttss
           Enable support for the C++ Extensions for Concepts Technical
           Specification, ISO 19217 (2015), which allows code like

                   template <class T> concept bool Addable = requires (T t) { t + t; };
                   template <Addable T> T add (T a, T b) { return a + b; }

       --ffccoonnsstteexxpprr--ddeepptthh==_n
           Set the maximum nested evaluation depth for C++11 constexpr
           functions to _n.  A limit is needed to detect endless recursion
           during constant expression evaluation.  The minimum specified by
           the standard is 512.

       --ffccoonnsstteexxpprr--lloooopp--lliimmiitt==_n
           Set the maximum number of iterations for a loop in C++14 constexpr
           functions to _n.  A limit is needed to detect infinite loops during
           constant expression evaluation.  The default is 262144 (1<<18).

       --ffddeedduuccee--iinniitt--lliisstt
           Enable deduction of a template type parameter as
           "std::initializer_list" from a brace-enclosed initializer list,
           i.e.

                   template <class T> auto forward(T t) -> decltype (realfn (t))
                   {
                     return realfn (t);
                   }

                   void f()
                   {
                     forward({1,2}); // call forward<std::initializer_list<int>>
                   }

           This deduction was implemented as a possible extension to the
           originally proposed semantics for the C++11 standard, but was not
           part of the final standard, so it is disabled by default.  This
           option is deprecated, and may be removed in a future version of
           G++.

       --ffffrriieenndd--iinnjjeeccttiioonn
           Inject friend functions into the enclosing namespace, so that they
           are visible outside the scope of the class in which they are
           declared.  Friend functions were documented to work this way in the
           old Annotated C++ Reference Manual.  However, in ISO C++ a friend
           function that is not declared in an enclosing scope can only be
           found using argument dependent lookup.  GCC defaults to the
           standard behavior.

           This option is deprecated and will be removed.

       --ffnnoo--eelliiddee--ccoonnssttrruuccttoorrss
           The C++ standard allows an implementation to omit creating a
           temporary that is only used to initialize another object of the
           same type.  Specifying this option disables that optimization, and
           forces G++ to call the copy constructor in all cases.  This option
           also causes G++ to call trivial member functions which otherwise
           would be expanded inline.

           In C++17, the compiler is required to omit these temporaries, but
           this option still affects trivial member functions.

       --ffnnoo--eennffoorrccee--eehh--ssppeeccss
           Don't generate code to check for violation of exception
           specifications at run time.  This option violates the C++ standard,
           but may be useful for reducing code size in production builds, much
           like defining "NDEBUG".  This does not give user code permission to
           throw exceptions in violation of the exception specifications; the
           compiler still optimizes based on the specifications, so throwing
           an unexpected exception results in undefined behavior at run time.

       --ffeexxtteerrnn--ttllss--iinniitt
       --ffnnoo--eexxtteerrnn--ttllss--iinniitt
           The C++11 and OpenMP standards allow "thread_local" and
           "threadprivate" variables to have dynamic (runtime) initialization.
           To support this, any use of such a variable goes through a wrapper
           function that performs any necessary initialization.  When the use
           and definition of the variable are in the same translation unit,
           this overhead can be optimized away, but when the use is in a
           different translation unit there is significant overhead even if
           the variable doesn't actually need dynamic initialization.  If the
           programmer can be sure that no use of the variable in a non-
           defining TU needs to trigger dynamic initialization (either because
           the variable is statically initialized, or a use of the variable in
           the defining TU will be executed before any uses in another TU),
           they can avoid this overhead with the --ffnnoo--eexxtteerrnn--ttllss--iinniitt option.

           On targets that support symbol aliases, the default is
           --ffeexxtteerrnn--ttllss--iinniitt.  On targets that do not support symbol aliases,
           the default is --ffnnoo--eexxtteerrnn--ttllss--iinniitt.

       --ffffoorr--ssccooppee
       --ffnnoo--ffoorr--ssccooppee
           If --ffffoorr--ssccooppee is specified, the scope of variables declared in a
           _f_o_r_-_i_n_i_t_-_s_t_a_t_e_m_e_n_t is limited to the "for" loop itself, as
           specified by the C++ standard.  If --ffnnoo--ffoorr--ssccooppee is specified, the
           scope of variables declared in a _f_o_r_-_i_n_i_t_-_s_t_a_t_e_m_e_n_t extends to the
           end of the enclosing scope, as was the case in old versions of G++,
           and other (traditional) implementations of C++.

           This option is deprecated and the associated non-standard
           functionality will be removed.

       --ffnnoo--ggnnuu--kkeeyywwoorrddss
           Do not recognize "typeof" as a keyword, so that code can use this
           word as an identifier.  You can use the keyword "__typeof__"
           instead.  This option is implied by the strict ISO C++ dialects:
           --aannssii, --ssttdd==cc++++9988, --ssttdd==cc++++1111, etc.

       --ffnnoo--iimmpplliicciitt--tteemmppllaatteess
           Never emit code for non-inline templates that are instantiated
           implicitly (i.e. by use); only emit code for explicit
           instantiations.

       --ffnnoo--iimmpplliicciitt--iinnlliinnee--tteemmppllaatteess
           Don't emit code for implicit instantiations of inline templates,
           either.  The default is to handle inlines differently so that
           compiles with and without optimization need the same set of
           explicit instantiations.

       --ffnnoo--iimmpplleemmeenntt--iinnlliinneess
           To save space, do not emit out-of-line copies of inline functions
           controlled by "#pragma implementation".  This causes linker errors
           if these functions are not inlined everywhere they are called.

       --ffmmss--eexxtteennssiioonnss
           Disable Wpedantic warnings about constructs used in MFC, such as
           implicit int and getting a pointer to member function via non-
           standard syntax.

       --ffnneeww--iinnhheerriittiinngg--ccttoorrss
           Enable the P0136 adjustment to the semantics of C++11 constructor
           inheritance.  This is part of C++17 but also considered to be a
           Defect Report against C++11 and C++14.  This flag is enabled by
           default unless --ffaabbii--vveerrssiioonn==1100 or lower is specified.

       --ffnneeww--ttttpp--mmaattcchhiinngg
           Enable the P0522 resolution to Core issue 150, template template
           parameters and default arguments: this allows a template with
           default template arguments as an argument for a template template
           parameter with fewer template parameters.  This flag is enabled by
           default for --ssttdd==cc++++1177.

       --ffnnoo--nnoonnaannssii--bbuuiillttiinnss
           Disable built-in declarations of functions that are not mandated by
           ANSI/ISO C.  These include "ffs", "alloca", "_exit", "index",
           "bzero", "conjf", and other related functions.

       --ffnnootthhrrooww--oopptt
           Treat a "throw()" exception specification as if it were a
           "noexcept" specification to reduce or eliminate the text size
           overhead relative to a function with no exception specification.
           If the function has local variables of types with non-trivial
           destructors, the exception specification actually makes the
           function smaller because the EH cleanups for those variables can be
           optimized away.  The semantic effect is that an exception thrown
           out of a function with such an exception specification results in a
           call to "terminate" rather than "unexpected".

       --ffnnoo--ooppeerraattoorr--nnaammeess
           Do not treat the operator name keywords "and", "bitand", "bitor",
           "compl", "not", "or" and "xor" as synonyms as keywords.

       --ffnnoo--ooppttiioonnaall--ddiiaaggss
           Disable diagnostics that the standard says a compiler does not need
           to issue.  Currently, the only such diagnostic issued by G++ is the
           one for a name having multiple meanings within a class.

       --ffppeerrmmiissssiivvee
           Downgrade some diagnostics about nonconformant code from errors to
           warnings.  Thus, using --ffppeerrmmiissssiivvee allows some nonconforming code
           to compile.

       --ffnnoo--pprreettttyy--tteemmppllaatteess
           When an error message refers to a specialization of a function
           template, the compiler normally prints the signature of the
           template followed by the template arguments and any typedefs or
           typenames in the signature (e.g. "void f(T) [with T = int]" rather
           than "void f(int)") so that it's clear which template is involved.
           When an error message refers to a specialization of a class
           template, the compiler omits any template arguments that match the
           default template arguments for that template.  If either of these
           behaviors make it harder to understand the error message rather
           than easier, you can use --ffnnoo--pprreettttyy--tteemmppllaatteess to disable them.

       --ffrreeppoo
           Enable automatic template instantiation at link time.  This option
           also implies --ffnnoo--iimmpplliicciitt--tteemmppllaatteess.

       --ffnnoo--rrttttii
           Disable generation of information about every class with virtual
           functions for use by the C++ run-time type identification features
           ("dynamic_cast" and "typeid").  If you don't use those parts of the
           language, you can save some space by using this flag.  Note that
           exception handling uses the same information, but G++ generates it
           as needed. The "dynamic_cast" operator can still be used for casts
           that do not require run-time type information, i.e. casts to "void
           *" or to unambiguous base classes.

       --ffssiizzeedd--ddeeaallllooccaattiioonn
           Enable the built-in global declarations

                   void operator delete (void *, std::size_t) noexcept;
                   void operator delete[] (void *, std::size_t) noexcept;

           as introduced in C++14.  This is useful for user-defined
           replacement deallocation functions that, for example, use the size
           of the object to make deallocation faster.  Enabled by default
           under --ssttdd==cc++++1144 and above.  The flag --WWssiizzeedd--ddeeaallllooccaattiioonn warns
           about places that might want to add a definition.

       --ffssttrriicctt--eennuummss
           Allow the compiler to optimize using the assumption that a value of
           enumerated type can only be one of the values of the enumeration
           (as defined in the C++ standard; basically, a value that can be
           represented in the minimum number of bits needed to represent all
           the enumerators).  This assumption may not be valid if the program
           uses a cast to convert an arbitrary integer value to the enumerated
           type.

       --ffssttrroonngg--eevvaall--oorrddeerr
           Evaluate member access, array subscripting, and shift expressions
           in left-to-right order, and evaluate assignment in right-to-left
           order, as adopted for C++17.  Enabled by default with --ssttdd==cc++++1177.
           --ffssttrroonngg--eevvaall--oorrddeerr==ssoommee enables just the ordering of member access
           and shift expressions, and is the default without --ssttdd==cc++++1177.

       --fftteemmppllaattee--bbaacckkttrraaccee--lliimmiitt==_n
           Set the maximum number of template instantiation notes for a single
           warning or error to _n.  The default value is 10.

       --fftteemmppllaattee--ddeepptthh==_n
           Set the maximum instantiation depth for template classes to _n.  A
           limit on the template instantiation depth is needed to detect
           endless recursions during template class instantiation.  ANSI/ISO
           C++ conforming programs must not rely on a maximum depth greater
           than 17 (changed to 1024 in C++11).  The default value is 900, as
           the compiler can run out of stack space before hitting 1024 in some
           situations.

       --ffnnoo--tthhrreeaaddssaaffee--ssttaattiiccss
           Do not emit the extra code to use the routines specified in the C++
           ABI for thread-safe initialization of local statics.  You can use
           this option to reduce code size slightly in code that doesn't need
           to be thread-safe.

       --ffuussee--ccxxaa--aatteexxiitt
           Register destructors for objects with static storage duration with
           the "__cxa_atexit" function rather than the "atexit" function.
           This option is required for fully standards-compliant handling of
           static destructors, but only works if your C library supports
           "__cxa_atexit".

       --ffnnoo--uussee--ccxxaa--ggeett--eexxcceeppttiioonn--ppttrr
           Don't use the "__cxa_get_exception_ptr" runtime routine.  This
           causes "std::uncaught_exception" to be incorrect, but is necessary
           if the runtime routine is not available.

       --ffvviissiibbiilliittyy--iinnlliinneess--hhiiddddeenn
           This switch declares that the user does not attempt to compare
           pointers to inline functions or methods where the addresses of the
           two functions are taken in different shared objects.

           The effect of this is that GCC may, effectively, mark inline
           methods with "__attribute__ ((visibility ("hidden")))" so that they
           do not appear in the export table of a DSO and do not require a PLT
           indirection when used within the DSO.  Enabling this option can
           have a dramatic effect on load and link times of a DSO as it
           massively reduces the size of the dynamic export table when the
           library makes heavy use of templates.

           The behavior of this switch is not quite the same as marking the
           methods as hidden directly, because it does not affect static
           variables local to the function or cause the compiler to deduce
           that the function is defined in only one shared object.

           You may mark a method as having a visibility explicitly to negate
           the effect of the switch for that method.  For example, if you do
           want to compare pointers to a particular inline method, you might
           mark it as having default visibility.  Marking the enclosing class
           with explicit visibility has no effect.

           Explicitly instantiated inline methods are unaffected by this
           option as their linkage might otherwise cross a shared library
           boundary.

       --ffvviissiibbiilliittyy--mmss--ccoommppaatt
           This flag attempts to use visibility settings to make GCC's C++
           linkage model compatible with that of Microsoft Visual Studio.

           The flag makes these changes to GCC's linkage model:

           1.  It sets the default visibility to "hidden", like
               --ffvviissiibbiilliittyy==hhiiddddeenn.

           2.  Types, but not their members, are not hidden by default.

           3.  The One Definition Rule is relaxed for types without explicit
               visibility specifications that are defined in more than one
               shared object: those declarations are permitted if they are
               permitted when this option is not used.

           In new code it is better to use --ffvviissiibbiilliittyy==hhiiddddeenn and export
           those classes that are intended to be externally visible.
           Unfortunately it is possible for code to rely, perhaps
           accidentally, on the Visual Studio behavior.

           Among the consequences of these changes are that static data
           members of the same type with the same name but defined in
           different shared objects are different, so changing one does not
           change the other; and that pointers to function members defined in
           different shared objects may not compare equal.  When this flag is
           given, it is a violation of the ODR to define types with the same
           name differently.

       --ffnnoo--wweeaakk
           Do not use weak symbol support, even if it is provided by the
           linker.  By default, G++ uses weak symbols if they are available.
           This option exists only for testing, and should not be used by end-
           users; it results in inferior code and has no benefits.  This
           option may be removed in a future release of G++.

       --nnoossttddiinncc++++
           Do not search for header files in the standard directories specific
           to C++, but do still search the other standard directories.  (This
           option is used when building the C++ library.)

       In addition, these optimization, warning, and code generation options
       have meanings only for C++ programs:

       --WWaabbii (C, Objective-C, C++ and Objective-C++ only)
           Warn when G++ it generates code that is probably not compatible
           with the vendor-neutral C++ ABI.  Since G++ now defaults to
           updating the ABI with each major release, normally --WWaabbii will warn
           only if there is a check added later in a release series for an ABI
           issue discovered since the initial release.  --WWaabbii will warn about
           more things if an older ABI version is selected (with
           --ffaabbii--vveerrssiioonn==_n).

           --WWaabbii can also be used with an explicit version number to warn
           about compatibility with a particular --ffaabbii--vveerrssiioonn level, e.g.
           --WWaabbii==22 to warn about changes relative to --ffaabbii--vveerrssiioonn==22.

           If an explicit version number is provided and --ffaabbii--ccoommppaatt--vveerrssiioonn
           is not specified, the version number from this option is used for
           compatibility aliases.  If no explicit version number is provided
           with this option, but --ffaabbii--ccoommppaatt--vveerrssiioonn is specified, that
           version number is used for ABI warnings.

           Although an effort has been made to warn about all such cases,
           there are probably some cases that are not warned about, even
           though G++ is generating incompatible code.  There may also be
           cases where warnings are emitted even though the code that is
           generated is compatible.

           You should rewrite your code to avoid these warnings if you are
           concerned about the fact that code generated by G++ may not be
           binary compatible with code generated by other compilers.

           Known incompatibilities in --ffaabbii--vveerrssiioonn==22 (which was the default
           from GCC 3.4 to 4.9) include:

           *   A template with a non-type template parameter of reference type
               was mangled incorrectly:

                       extern int N;
                       template <int &> struct S {};
                       void n (S<N>) {2}

               This was fixed in --ffaabbii--vveerrssiioonn==33.

           *   SIMD vector types declared using "__attribute ((vector_size))"
               were mangled in a non-standard way that does not allow for
               overloading of functions taking vectors of different sizes.

               The mangling was changed in --ffaabbii--vveerrssiioonn==44.

           *   "__attribute ((const))" and "noreturn" were mangled as type
               qualifiers, and "decltype" of a plain declaration was folded
               away.

               These mangling issues were fixed in --ffaabbii--vveerrssiioonn==55.

           *   Scoped enumerators passed as arguments to a variadic function
               are promoted like unscoped enumerators, causing "va_arg" to
               complain.  On most targets this does not actually affect the
               parameter passing ABI, as there is no way to pass an argument
               smaller than "int".

               Also, the ABI changed the mangling of template argument packs,
               "const_cast", "static_cast", prefix increment/decrement, and a
               class scope function used as a template argument.

               These issues were corrected in --ffaabbii--vveerrssiioonn==66.

           *   Lambdas in default argument scope were mangled incorrectly, and
               the ABI changed the mangling of "nullptr_t".

               These issues were corrected in --ffaabbii--vveerrssiioonn==77.

           *   When mangling a function type with function-cv-qualifiers, the
               un-qualified function type was incorrectly treated as a
               substitution candidate.

               This was fixed in --ffaabbii--vveerrssiioonn==88, the default for GCC 5.1.

           *   "decltype(nullptr)" incorrectly had an alignment of 1, leading
               to unaligned accesses.  Note that this did not affect the ABI
               of a function with a "nullptr_t" parameter, as parameters have
               a minimum alignment.

               This was fixed in --ffaabbii--vveerrssiioonn==99, the default for GCC 5.2.

           *   Target-specific attributes that affect the identity of a type,
               such as ia32 calling conventions on a function type (stdcall,
               regparm, etc.), did not affect the mangled name, leading to
               name collisions when function pointers were used as template
               arguments.

               This was fixed in --ffaabbii--vveerrssiioonn==1100, the default for GCC 6.1.

           It also warns about psABI-related changes.  The known psABI changes
           at this point include:

           *   For SysV/x86-64, unions with "long double" members are passed
               in memory as specified in psABI.  For example:

                       union U {
                         long double ld;
                         int i;
                       };

               "union U" is always passed in memory.

       --WWaabbii--ttaagg (C++ and Objective-C++ only)
           Warn when a type with an ABI tag is used in a context that does not
           have that ABI tag.  See CC++++ AAttttrriibbuutteess for more information about
           ABI tags.

       --WWccttoorr--ddttoorr--pprriivvaaccyy (C++ and Objective-C++ only)
           Warn when a class seems unusable because all the constructors or
           destructors in that class are private, and it has neither friends
           nor public static member functions.  Also warn if there are no non-
           private methods, and there's at least one private member function
           that isn't a constructor or destructor.

       --WWddeelleettee--nnoonn--vviirrttuuaall--ddttoorr (C++ and Objective-C++ only)
           Warn when "delete" is used to destroy an instance of a class that
           has virtual functions and non-virtual destructor. It is unsafe to
           delete an instance of a derived class through a pointer to a base
           class if the base class does not have a virtual destructor.  This
           warning is enabled by --WWaallll.

       --WWlliitteerraall--ssuuffffiixx (C++ and Objective-C++ only)
           Warn when a string or character literal is followed by a ud-suffix
           which does not begin with an underscore.  As a conforming
           extension, GCC treats such suffixes as separate preprocessing
           tokens in order to maintain backwards compatibility with code that
           uses formatting macros from "<inttypes.h>".  For example:

                   #define __STDC_FORMAT_MACROS
                   #include <inttypes.h>
                   #include <stdio.h>

                   int main() {
                     int64_t i64 = 123;
                     printf("My int64: %" PRId64"\n", i64);
                   }

           In this case, "PRId64" is treated as a separate preprocessing
           token.

           Additionally, warn when a user-defined literal operator is declared
           with a literal suffix identifier that doesn't begin with an
           underscore. Literal suffix identifiers that don't begin with an
           underscore are reserved for future standardization.

           This warning is enabled by default.

       --WWllttoo--ttyyppee--mmiissmmaattcchh
           During the link-time optimization warn about type mismatches in
           global declarations from different compilation units.  Requires
           --ffllttoo to be enabled.  Enabled by default.

       --WWnnoo--nnaarrrroowwiinngg (C++ and Objective-C++ only)
           For C++11 and later standards, narrowing conversions are diagnosed
           by default, as required by the standard.  A narrowing conversion
           from a constant produces an error, and a narrowing conversion from
           a non-constant produces a warning, but --WWnnoo--nnaarrrroowwiinngg suppresses
           the diagnostic.  Note that this does not affect the meaning of
           well-formed code; narrowing conversions are still considered ill-
           formed in SFINAE contexts.

           With --WWnnaarrrroowwiinngg in C++98, warn when a narrowing conversion
           prohibited by C++11 occurs within {{ }}, e.g.

                   int i = { 2.2 }; // error: narrowing from double to int

           This flag is included in --WWaallll and --WWcc++++1111--ccoommppaatt.

       --WWnnooeexxcceepptt (C++ and Objective-C++ only)
           Warn when a noexcept-expression evaluates to false because of a
           call to a function that does not have a non-throwing exception
           specification (i.e. "throw()" or "noexcept") but is known by the
           compiler to never throw an exception.

       --WWnnooeexxcceepptt--ttyyppee (C++ and Objective-C++ only)
           Warn if the C++17 feature making "noexcept" part of a function type
           changes the mangled name of a symbol relative to C++14.  Enabled by
           --WWaabbii and --WWcc++++1177--ccoommppaatt.

           As an example:

                   template <class T> void f(T t) { t(); };
                   void g() noexcept;
                   void h() { f(g); }

           In C++14, "f" calls "f<void(*)()>", but in C++17 it calls
           "f<void(*)()noexcept>".

       --WWccllaassss--mmeemmaacccceessss (C++ and Objective-C++ only)
           Warn when the destination of a call to a raw memory function such
           as "memset" or "memcpy" is an object of class type, and when
           writing into such an object might bypass the class non-trivial or
           deleted constructor or copy assignment, violate const-correctness
           or encapsulation, or corrupt virtual table pointers.  Modifying the
           representation of such objects may violate invariants maintained by
           member functions of the class.  For example, the call to "memset"
           below is undefined because it modifies a non-trivial class object
           and is, therefore, diagnosed.  The safe way to either initialize or
           clear the storage of objects of such types is by using the
           appropriate constructor or assignment operator, if one is
           available.

                   std::string str = "abc";
                   memset (&str, 0, sizeof str);

           The --WWccllaassss--mmeemmaacccceessss option is enabled by --WWaallll.  Explicitly
           casting the pointer to the class object to "void *" or to a type
           that can be safely accessed by the raw memory function suppresses
           the warning.

       --WWnnoonn--vviirrttuuaall--ddttoorr (C++ and Objective-C++ only)
           Warn when a class has virtual functions and an accessible non-
           virtual destructor itself or in an accessible polymorphic base
           class, in which case it is possible but unsafe to delete an
           instance of a derived class through a pointer to the class itself
           or base class.  This warning is automatically enabled if --WWeeffffcc++++
           is specified.

       --WWrreeggiisstteerr (C++ and Objective-C++ only)
           Warn on uses of the "register" storage class specifier, except when
           it is part of the GNU EExxpplliicciitt RReeggiisstteerr VVaarriiaabblleess extension.  The
           use of the "register" keyword as storage class specifier has been
           deprecated in C++11 and removed in C++17.  Enabled by default with
           --ssttdd==cc++++1177.

       --WWrreeoorrddeerr (C++ and Objective-C++ only)
           Warn when the order of member initializers given in the code does
           not match the order in which they must be executed.  For instance:

                   struct A {
                     int i;
                     int j;
                     A(): j (0), i (1) { }
                   };

           The compiler rearranges the member initializers for "i" and "j" to
           match the declaration order of the members, emitting a warning to
           that effect.  This warning is enabled by --WWaallll.

       --ffeexxtt--nnuummeerriicc--lliitteerraallss (C++ and Objective-C++ only)
           Accept imaginary, fixed-point, or machine-defined literal number
           suffixes as GNU extensions.  When this option is turned off these
           suffixes are treated as C++11 user-defined literal numeric
           suffixes.  This is on by default for all pre-C++11 dialects and all
           GNU dialects: --ssttdd==cc++++9988, --ssttdd==ggnnuu++++9988, --ssttdd==ggnnuu++++1111, --ssttdd==ggnnuu++++1144.
           This option is off by default for ISO C++11 onwards (--ssttdd==cc++++1111,
           ...).

       The following --WW...... options are not affected by --WWaallll.

       --WWeeffffcc++++ (C++ and Objective-C++ only)
           Warn about violations of the following style guidelines from Scott
           Meyers' _E_f_f_e_c_t_i_v_e _C_+_+ series of books:

           *   Define a copy constructor and an assignment operator for
               classes with dynamically-allocated memory.

           *   Prefer initialization to assignment in constructors.

           *   Have "operator=" return a reference to *this.

           *   Don't try to return a reference when you must return an object.

           *   Distinguish between prefix and postfix forms of increment and
               decrement operators.

           *   Never overload "&&", "||", or ",".

           This option also enables --WWnnoonn--vviirrttuuaall--ddttoorr, which is also one of
           the effective C++ recommendations.  However, the check is extended
           to warn about the lack of virtual destructor in accessible non-
           polymorphic bases classes too.

           When selecting this option, be aware that the standard library
           headers do not obey all of these guidelines; use ggrreepp --vv to filter
           out those warnings.

       --WWssttrriicctt--nnuullll--sseennttiinneell (C++ and Objective-C++ only)
           Warn about the use of an uncasted "NULL" as sentinel.  When
           compiling only with GCC this is a valid sentinel, as "NULL" is
           defined to "__null".  Although it is a null pointer constant rather
           than a null pointer, it is guaranteed to be of the same size as a
           pointer.  But this use is not portable across different compilers.

       --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd (C++ and Objective-C++ only)
           Disable warnings when non-template friend functions are declared
           within a template.  In very old versions of GCC that predate
           implementation of the ISO standard, declarations such as ffrriieenndd iinntt
           ffoooo((iinntt)), where the name of the friend is an unqualified-id, could
           be interpreted as a particular specialization of a template
           function; the warning exists to diagnose compatibility problems,
           and is enabled by default.

       --WWoolldd--ssttyyllee--ccaasstt (C++ and Objective-C++ only)
           Warn if an old-style (C-style) cast to a non-void type is used
           within a C++ program.  The new-style casts ("dynamic_cast",
           "static_cast", "reinterpret_cast", and "const_cast") are less
           vulnerable to unintended effects and much easier to search for.

       --WWoovveerrllooaaddeedd--vviirrttuuaall (C++ and Objective-C++ only)
           Warn when a function declaration hides virtual functions from a
           base class.  For example, in:

                   struct A {
                     virtual void f();
                   };

                   struct B: public A {
                     void f(int);
                   };

           the "A" class version of "f" is hidden in "B", and code like:

                   B* b;
                   b->f();

           fails to compile.

       --WWnnoo--ppmmff--ccoonnvveerrssiioonnss (C++ and Objective-C++ only)
           Disable the diagnostic for converting a bound pointer to member
           function to a plain pointer.

       --WWssiiggnn--pprroommoo (C++ and Objective-C++ only)
           Warn when overload resolution chooses a promotion from unsigned or
           enumerated type to a signed type, over a conversion to an unsigned
           type of the same size.  Previous versions of G++ tried to preserve
           unsignedness, but the standard mandates the current behavior.

       --WWtteemmppllaatteess (C++ and Objective-C++ only)
           Warn when a primary template declaration is encountered.  Some
           coding rules disallow templates, and this may be used to enforce
           that rule.  The warning is inactive inside a system header file,
           such as the STL, so one can still use the STL.  One may also
           instantiate or specialize templates.

       --WWmmuullttiippllee--iinnhheerriittaannccee (C++ and Objective-C++ only)
           Warn when a class is defined with multiple direct base classes.
           Some coding rules disallow multiple inheritance, and this may be
           used to enforce that rule.  The warning is inactive inside a system
           header file, such as the STL, so one can still use the STL.  One
           may also define classes that indirectly use multiple inheritance.

       --WWvviirrttuuaall--iinnhheerriittaannccee
           Warn when a class is defined with a virtual direct base class.
           Some coding rules disallow multiple inheritance, and this may be
           used to enforce that rule.  The warning is inactive inside a system
           header file, such as the STL, so one can still use the STL.  One
           may also define classes that indirectly use virtual inheritance.

       --WWnnaammeessppaacceess
           Warn when a namespace definition is opened.  Some coding rules
           disallow namespaces, and this may be used to enforce that rule.
           The warning is inactive inside a system header file, such as the
           STL, so one can still use the STL.  One may also use using
           directives and qualified names.

       --WWnnoo--tteerrmmiinnaattee (C++ and Objective-C++ only)
           Disable the warning about a throw-expression that will immediately
           result in a call to "terminate".

   OOppttiioonnss CCoonnttrroolllliinngg OObbjjeeccttiivvee--CC aanndd OObbjjeeccttiivvee--CC++++ DDiiaalleeccttss
       (NOTE: This manual does not describe the Objective-C and Objective-C++
       languages themselves.

       This section describes the command-line options that are only
       meaningful for Objective-C and Objective-C++ programs.  You can also
       use most of the language-independent GNU compiler options.  For
       example, you might compile a file _s_o_m_e___c_l_a_s_s_._m like this:

               gcc -g -fgnu-runtime -O -c some_class.m

       In this example, --ffggnnuu--rruunnttiimmee is an option meant only for Objective-C
       and Objective-C++ programs; you can use the other options with any
       language supported by GCC.

       Note that since Objective-C is an extension of the C language,
       Objective-C compilations may also use options specific to the C front-
       end (e.g., --WWttrraaddiittiioonnaall).  Similarly, Objective-C++ compilations may
       use C++-specific options (e.g., --WWaabbii).

       Here is a list of options that are _o_n_l_y for compiling Objective-C and
       Objective-C++ programs:

       --ffccoonnssttaanntt--ssttrriinngg--ccllaassss==_c_l_a_s_s_-_n_a_m_e
           Use _c_l_a_s_s_-_n_a_m_e as the name of the class to instantiate for each
           literal string specified with the syntax "@"..."".  The default
           class name is "NXConstantString" if the GNU runtime is being used,
           and "NSConstantString" if the NeXT runtime is being used (see
           below).  The --ffccoonnssttaanntt--ccffssttrriinnggss option, if also present,
           overrides the --ffccoonnssttaanntt--ssttrriinngg--ccllaassss setting and cause "@"...""
           literals to be laid out as constant CoreFoundation strings.

       --ffggnnuu--rruunnttiimmee
           Generate object code compatible with the standard GNU Objective-C
           runtime.  This is the default for most types of systems.

       --ffnneexxtt--rruunnttiimmee
           Generate output compatible with the NeXT runtime.  This is the
           default for NeXT-based systems, including Darwin and Mac OS X.  The
           macro "__NEXT_RUNTIME__" is predefined if (and only if) this option
           is used.

       --ffnnoo--nniill--rreecceeiivveerrss
           Assume that all Objective-C message dispatches ("[receiver
           message:arg]") in this translation unit ensure that the receiver is
           not "nil".  This allows for more efficient entry points in the
           runtime to be used.  This option is only available in conjunction
           with the NeXT runtime and ABI version 0 or 1.

       --ffoobbjjcc--aabbii--vveerrssiioonn==_n
           Use version _n of the Objective-C ABI for the selected runtime.
           This option is currently supported only for the NeXT runtime.  In
           that case, Version 0 is the traditional (32-bit) ABI without
           support for properties and other Objective-C 2.0 additions.
           Version 1 is the traditional (32-bit) ABI with support for
           properties and other Objective-C 2.0 additions.  Version 2 is the
           modern (64-bit) ABI.  If nothing is specified, the default is
           Version 0 on 32-bit target machines, and Version 2 on 64-bit target
           machines.

       --ffoobbjjcc--ccaallll--ccxxxx--ccddttoorrss
           For each Objective-C class, check if any of its instance variables
           is a C++ object with a non-trivial default constructor.  If so,
           synthesize a special "- (id) .cxx_construct" instance method which
           runs non-trivial default constructors on any such instance
           variables, in order, and then return "self".  Similarly, check if
           any instance variable is a C++ object with a non-trivial
           destructor, and if so, synthesize a special "- (void)
           .cxx_destruct" method which runs all such default destructors, in
           reverse order.

           The "- (id) .cxx_construct" and "- (void) .cxx_destruct" methods
           thusly generated only operate on instance variables declared in the
           current Objective-C class, and not those inherited from
           superclasses.  It is the responsibility of the Objective-C runtime
           to invoke all such methods in an object's inheritance hierarchy.
           The "- (id) .cxx_construct" methods are invoked by the runtime
           immediately after a new object instance is allocated; the "- (void)
           .cxx_destruct" methods are invoked immediately before the runtime
           deallocates an object instance.

           As of this writing, only the NeXT runtime on Mac OS X 10.4 and
           later has support for invoking the "- (id) .cxx_construct" and "-
           (void) .cxx_destruct" methods.

       --ffoobbjjcc--ddiirreecctt--ddiissppaattcchh
           Allow fast jumps to the message dispatcher.  On Darwin this is
           accomplished via the comm page.

       --ffoobbjjcc--eexxcceeppttiioonnss
           Enable syntactic support for structured exception handling in
           Objective-C, similar to what is offered by C++.  This option is
           required to use the Objective-C keywords @try, @throw, @catch,
           @finally and @synchronized.  This option is available with both the
           GNU runtime and the NeXT runtime (but not available in conjunction
           with the NeXT runtime on Mac OS X 10.2 and earlier).

       --ffoobbjjcc--ggcc
           Enable garbage collection (GC) in Objective-C and Objective-C++
           programs.  This option is only available with the NeXT runtime; the
           GNU runtime has a different garbage collection implementation that
           does not require special compiler flags.

       --ffoobbjjcc--nniillcchheecckk
           For the NeXT runtime with version 2 of the ABI, check for a nil
           receiver in method invocations before doing the actual method call.
           This is the default and can be disabled using --ffnnoo--oobbjjcc--nniillcchheecckk.
           Class methods and super calls are never checked for nil in this way
           no matter what this flag is set to.  Currently this flag does
           nothing when the GNU runtime, or an older version of the NeXT
           runtime ABI, is used.

       --ffoobbjjcc--ssttdd==oobbjjcc11
           Conform to the language syntax of Objective-C 1.0, the language
           recognized by GCC 4.0.  This only affects the Objective-C additions
           to the C/C++ language; it does not affect conformance to C/C++
           standards, which is controlled by the separate C/C++ dialect option
           flags.  When this option is used with the Objective-C or
           Objective-C++ compiler, any Objective-C syntax that is not
           recognized by GCC 4.0 is rejected.  This is useful if you need to
           make sure that your Objective-C code can be compiled with older
           versions of GCC.

       --ffrreeppllaaccee--oobbjjcc--ccllaasssseess
           Emit a special marker instructing lldd((11)) not to statically link in
           the resulting object file, and allow ddyylldd((11)) to load it in at run
           time instead.  This is used in conjunction with the Fix-and-
           Continue debugging mode, where the object file in question may be
           recompiled and dynamically reloaded in the course of program
           execution, without the need to restart the program itself.
           Currently, Fix-and-Continue functionality is only available in
           conjunction with the NeXT runtime on Mac OS X 10.3 and later.

       --ffzzeerroo--lliinnkk
           When compiling for the NeXT runtime, the compiler ordinarily
           replaces calls to "objc_getClass("...")" (when the name of the
           class is known at compile time) with static class references that
           get initialized at load time, which improves run-time performance.
           Specifying the --ffzzeerroo--lliinnkk flag suppresses this behavior and causes
           calls to "objc_getClass("...")"  to be retained.  This is useful in
           Zero-Link debugging mode, since it allows for individual class
           implementations to be modified during program execution.  The GNU
           runtime currently always retains calls to "objc_get_class("...")"
           regardless of command-line options.

       --ffnnoo--llooccaall--iivvaarrss
           By default instance variables in Objective-C can be accessed as if
           they were local variables from within the methods of the class
           they're declared in.  This can lead to shadowing between instance
           variables and other variables declared either locally inside a
           class method or globally with the same name.  Specifying the
           --ffnnoo--llooccaall--iivvaarrss flag disables this behavior thus avoiding variable
           shadowing issues.

       --ffiivvaarr--vviissiibbiilliittyy==[ppuubblliicc|pprrootteecctteedd|pprriivvaattee|ppaacckkaaggee]
           Set the default instance variable visibility to the specified
           option so that instance variables declared outside the scope of any
           access modifier directives default to the specified visibility.

       --ggeenn--ddeeccllss
           Dump interface declarations for all classes seen in the source file
           to a file named _s_o_u_r_c_e_n_a_m_e_._d_e_c_l.

       --WWaassssiiggnn--iinntteerrcceepptt (Objective-C and Objective-C++ only)
           Warn whenever an Objective-C assignment is being intercepted by the
           garbage collector.

       --WWnnoo--pprroottooccooll (Objective-C and Objective-C++ only)
           If a class is declared to implement a protocol, a warning is issued
           for every method in the protocol that is not implemented by the
           class.  The default behavior is to issue a warning for every method
           not explicitly implemented in the class, even if a method
           implementation is inherited from the superclass.  If you use the
           --WWnnoo--pprroottooccooll option, then methods inherited from the superclass
           are considered to be implemented, and no warning is issued for
           them.

       --WWsseelleeccttoorr (Objective-C and Objective-C++ only)
           Warn if multiple methods of different types for the same selector
           are found during compilation.  The check is performed on the list
           of methods in the final stage of compilation.  Additionally, a
           check is performed for each selector appearing in a
           "@selector(...)"  expression, and a corresponding method for that
           selector has been found during compilation.  Because these checks
           scan the method table only at the end of compilation, these
           warnings are not produced if the final stage of compilation is not
           reached, for example because an error is found during compilation,
           or because the --ffssyynnttaaxx--oonnllyy option is being used.

       --WWssttrriicctt--sseelleeccttoorr--mmaattcchh (Objective-C and Objective-C++ only)
           Warn if multiple methods with differing argument and/or return
           types are found for a given selector when attempting to send a
           message using this selector to a receiver of type "id" or "Class".
           When this flag is off (which is the default behavior), the compiler
           omits such warnings if any differences found are confined to types
           that share the same size and alignment.

       --WWuunnddeeccllaarreedd--sseelleeccttoorr (Objective-C and Objective-C++ only)
           Warn if a "@selector(...)" expression referring to an undeclared
           selector is found.  A selector is considered undeclared if no
           method with that name has been declared before the "@selector(...)"
           expression, either explicitly in an @interface or @protocol
           declaration, or implicitly in an @implementation section.  This
           option always performs its checks as soon as a "@selector(...)"
           expression is found, while --WWsseelleeccttoorr only performs its checks in
           the final stage of compilation.  This also enforces the coding
           style convention that methods and selectors must be declared before
           being used.

       --pprriinntt--oobbjjcc--rruunnttiimmee--iinnffoo
           Generate C header describing the largest structure that is passed
           by value, if any.

   OOppttiioonnss ttoo CCoonnttrrooll DDiiaaggnnoossttiicc MMeessssaaggeess FFoorrmmaattttiinngg
       Traditionally, diagnostic messages have been formatted irrespective of
       the output device's aspect (e.g. its width, ...).  You can use the
       options described below to control the formatting algorithm for
       diagnostic messages, e.g. how many characters per line, how often
       source location information should be reported.  Note that some
       language front ends may not honor these options.

       --ffmmeessssaaggee--lleennggtthh==_n
           Try to format error messages so that they fit on lines of about _n
           characters.  If _n is zero, then no line-wrapping is done; each
           error message appears on a single line.  This is the default for
           all front ends.

       --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==oonnccee
           Only meaningful in line-wrapping mode.  Instructs the diagnostic
           messages reporter to emit source location information _o_n_c_e; that
           is, in case the message is too long to fit on a single physical
           line and has to be wrapped, the source location won't be emitted
           (as prefix) again, over and over, in subsequent continuation lines.
           This is the default behavior.

       --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==eevveerryy--lliinnee
           Only meaningful in line-wrapping mode.  Instructs the diagnostic
           messages reporter to emit the same source location information (as
           prefix) for physical lines that result from the process of breaking
           a message which is too long to fit on a single line.

       --ffddiiaaggnnoossttiiccss--ccoolloorr[[==_W_H_E_N]]
       --ffnnoo--ddiiaaggnnoossttiiccss--ccoolloorr
           Use color in diagnostics.  _W_H_E_N is nneevveerr, aallwwaayyss, or aauuttoo.  The
           default depends on how the compiler has been configured, it can be
           any of the above _W_H_E_N options or also nneevveerr if GGCCCC__CCOOLLOORRSS
           environment variable isn't present in the environment, and aauuttoo
           otherwise.  aauuttoo means to use color only when the standard error is
           a terminal.  The forms --ffddiiaaggnnoossttiiccss--ccoolloorr and
           --ffnnoo--ddiiaaggnnoossttiiccss--ccoolloorr are aliases for --ffddiiaaggnnoossttiiccss--ccoolloorr==aallwwaayyss
           and --ffddiiaaggnnoossttiiccss--ccoolloorr==nneevveerr, respectively.

           The colors are defined by the environment variable GGCCCC__CCOOLLOORRSS.  Its
           value is a colon-separated list of capabilities and Select Graphic
           Rendition (SGR) substrings. SGR commands are interpreted by the
           terminal or terminal emulator.  (See the section in the
           documentation of your text terminal for permitted values and their
           meanings as character attributes.)  These substring values are
           integers in decimal representation and can be concatenated with
           semicolons.  Common values to concatenate include 11 for bold, 44 for
           underline, 55 for blink, 77 for inverse, 3399 for default foreground
           color, 3300 to 3377 for foreground colors, 9900 to 9977 for 16-color mode
           foreground colors, 3388;;55;;00 to 3388;;55;;225555 for 88-color and 256-color
           modes foreground colors, 4499 for default background color, 4400 to 4477
           for background colors, 110000 to 110077 for 16-color mode background
           colors, and 4488;;55;;00 to 4488;;55;;225555 for 88-color and 256-color modes
           background colors.

           The default GGCCCC__CCOOLLOORRSS is

                   error=01;31:warning=01;35:note=01;36:range1=32:range2=34:locus=01:\
                   quote=01:fixit-insert=32:fixit-delete=31:\
                   diff-filename=01:diff-hunk=32:diff-delete=31:diff-insert=32:\
                   type-diff=01;32

           where 0011;;3311 is bold red, 0011;;3355 is bold magenta, 0011;;3366 is bold cyan,
           3322 is green, 3344 is blue, 0011 is bold, and 3311 is red.  Setting
           GGCCCC__CCOOLLOORRSS to the empty string disables colors.  Supported
           capabilities are as follows.

           "error="
               SGR substring for error: markers.

           "warning="
               SGR substring for warning: markers.

           "note="
               SGR substring for note: markers.

           "range1="
               SGR substring for first additional range.

           "range2="
               SGR substring for second additional range.

           "locus="
               SGR substring for location information, ffiillee::lliinnee or
               ffiillee::lliinnee::ccoolluummnn etc.

           "quote="
               SGR substring for information printed within quotes.

           "fixit-insert="
               SGR substring for fix-it hints suggesting text to be inserted
               or replaced.

           "fixit-delete="
               SGR substring for fix-it hints suggesting text to be deleted.

           "diff-filename="
               SGR substring for filename headers within generated patches.

           "diff-hunk="
               SGR substring for the starts of hunks within generated patches.

           "diff-delete="
               SGR substring for deleted lines within generated patches.

           "diff-insert="
               SGR substring for inserted lines within generated patches.

           "type-diff="
               SGR substring for highlighting mismatching types within
               template arguments in the C++ frontend.

       --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn
           By default, each diagnostic emitted includes text indicating the
           command-line option that directly controls the diagnostic (if such
           an option is known to the diagnostic machinery).  Specifying the
           --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn flag suppresses that behavior.

       --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--ccaarreett
           By default, each diagnostic emitted includes the original source
           line and a caret ^^ indicating the column.  This option suppresses
           this information.  The source line is truncated to _n characters, if
           the --ffmmeessssaaggee--lleennggtthh==nn option is given.  When the output is done to
           the terminal, the width is limited to the width given by the
           CCOOLLUUMMNNSS environment variable or, if not set, to the terminal width.

       --ffddiiaaggnnoossttiiccss--ppaarrsseeaabbllee--ffiixxiittss
           Emit fix-it hints in a machine-parseable format, suitable for
           consumption by IDEs.  For each fix-it, a line will be printed after
           the relevant diagnostic, starting with the string "fix-it:".  For
           example:

                   fix-it:"test.c":{45:3-45:21}:"gtk_widget_show_all"

           The location is expressed as a half-open range, expressed as a
           count of bytes, starting at byte 1 for the initial column.  In the
           above example, bytes 3 through 20 of line 45 of "test.c" are to be
           replaced with the given string:

                   00000000011111111112222222222
                   12345678901234567890123456789
                     gtk_widget_showall (dlg);
                     ^^^^^^^^^^^^^^^^^^
                     gtk_widget_show_all

           The filename and replacement string escape backslash as "\\", tab
           as "\t", newline as "\n", double quotes as "\"", non-printable
           characters as octal (e.g. vertical tab as "\013").

           An empty replacement string indicates that the given range is to be
           removed.  An empty range (e.g. "45:3-45:3") indicates that the
           string is to be inserted at the given position.

       --ffddiiaaggnnoossttiiccss--ggeenneerraattee--ppaattcchh
           Print fix-it hints to stderr in unified diff format, after any
           diagnostics are printed.  For example:

                   --- test.c
                   +++ test.c
                   @ -42,5 +42,5 @

                    void show_cb(GtkDialog *dlg)
                    {
                   -  gtk_widget_showall(dlg);
                   +  gtk_widget_show_all(dlg);
                    }

           The diff may or may not be colorized, following the same rules as
           for diagnostics (see --ffddiiaaggnnoossttiiccss--ccoolloorr).

       --ffddiiaaggnnoossttiiccss--sshhooww--tteemmppllaattee--ttrreeee
           In the C++ frontend, when printing diagnostics showing mismatching
           template types, such as:

                     could not convert 'std::map<int, std::vector<double> >()'
                       from 'map<[...],vector<double>>' to 'map<[...],vector<float>>

           the --ffddiiaaggnnoossttiiccss--sshhooww--tteemmppllaattee--ttrreeee flag enables printing a tree-
           like structure showing the common and differing parts of the types,
           such as:

                     map<
                       [...],
                       vector<
                         [double != float]>>

           The parts that differ are highlighted with color ("double" and
           "float" in this case).

       --ffnnoo--eelliiddee--ttyyppee
           By default when the C++ frontend prints diagnostics showing
           mismatching template types, common parts of the types are printed
           as "[...]" to simplify the error message.  For example:

                     could not convert 'std::map<int, std::vector<double> >()'
                       from 'map<[...],vector<double>>' to 'map<[...],vector<float>>

           Specifying the --ffnnoo--eelliiddee--ttyyppee flag suppresses that behavior.  This
           flag also affects the output of the
           --ffddiiaaggnnoossttiiccss--sshhooww--tteemmppllaattee--ttrreeee flag.

       --ffnnoo--sshhooww--ccoolluummnn
           Do not print column numbers in diagnostics.  This may be necessary
           if diagnostics are being scanned by a program that does not
           understand the column numbers, such as ddeejjaaggnnuu.

   OOppttiioonnss ttoo RReeqquueesstt oorr SSuupppprreessss WWaarrnniinnggss
       Warnings are diagnostic messages that report constructions that are not
       inherently erroneous but that are risky or suggest there may have been
       an error.

       The following language-independent options do not enable specific
       warnings but control the kinds of diagnostics produced by GCC.

       --ffssyynnttaaxx--oonnllyy
           Check the code for syntax errors, but don't do anything beyond
           that.

       --ffmmaaxx--eerrrroorrss==_n
           Limits the maximum number of error messages to _n, at which point
           GCC bails out rather than attempting to continue processing the
           source code.  If _n is 0 (the default), there is no limit on the
           number of error messages produced.  If --WWffaattaall--eerrrroorrss is also
           specified, then --WWffaattaall--eerrrroorrss takes precedence over this option.

       --ww  Inhibit all warning messages.

       --WWeerrrroorr
           Make all warnings into errors.

       --WWeerrrroorr==
           Make the specified warning into an error.  The specifier for a
           warning is appended; for example --WWeerrrroorr==sswwiittcchh turns the warnings
           controlled by --WWsswwiittcchh into errors.  This switch takes a negative
           form, to be used to negate --WWeerrrroorr for specific warnings; for
           example --WWnnoo--eerrrroorr==sswwiittcchh makes --WWsswwiittcchh warnings not be errors,
           even when --WWeerrrroorr is in effect.

           The warning message for each controllable warning includes the
           option that controls the warning.  That option can then be used
           with --WWeerrrroorr== and --WWnnoo--eerrrroorr== as described above.  (Printing of the
           option in the warning message can be disabled using the
           --ffnnoo--ddiiaaggnnoossttiiccss--sshhooww--ooppttiioonn flag.)

           Note that specifying --WWeerrrroorr==_f_o_o automatically implies --WW_f_o_o.
           However, --WWnnoo--eerrrroorr==_f_o_o does not imply anything.

       --WWffaattaall--eerrrroorrss
           This option causes the compiler to abort compilation on the first
           error occurred rather than trying to keep going and printing
           further error messages.

       You can request many specific warnings with options beginning with --WW,
       for example --WWiimmpplliicciitt to request warnings on implicit declarations.
       Each of these specific warning options also has a negative form
       beginning --WWnnoo-- to turn off warnings; for example, --WWnnoo--iimmpplliicciitt.  This
       manual lists only one of the two forms, whichever is not the default.
       For further language-specific options also refer to CC++++ DDiiaalleecctt OOppttiioonnss
       and OObbjjeeccttiivvee--CC aanndd OObbjjeeccttiivvee--CC++++ DDiiaalleecctt OOppttiioonnss.

       Some options, such as --WWaallll and --WWeexxttrraa, turn on other options, such as
       --WWuunnuusseedd, which may turn on further options, such as --WWuunnuusseedd--vvaalluuee.
       The combined effect of positive and negative forms is that more
       specific options have priority over less specific ones, independently
       of their position in the command-line. For options of the same
       specificity, the last one takes effect. Options enabled or disabled via
       pragmas take effect as if they appeared at the end of the command-line.

       When an unrecognized warning option is requested (e.g.,
       --WWuunnkknnoowwnn--wwaarrnniinngg), GCC emits a diagnostic stating that the option is
       not recognized.  However, if the --WWnnoo-- form is used, the behavior is
       slightly different: no diagnostic is produced for --WWnnoo--uunnkknnoowwnn--wwaarrnniinngg
       unless other diagnostics are being produced.  This allows the use of
       new --WWnnoo-- options with old compilers, but if something goes wrong, the
       compiler warns that an unrecognized option is present.

       --WWppeeddaannttiicc
       --ppeeddaannttiicc
           Issue all the warnings demanded by strict ISO C and ISO C++; reject
           all programs that use forbidden extensions, and some other programs
           that do not follow ISO C and ISO C++.  For ISO C, follows the
           version of the ISO C standard specified by any --ssttdd option used.

           Valid ISO C and ISO C++ programs should compile properly with or
           without this option (though a rare few require --aannssii or a --ssttdd
           option specifying the required version of ISO C).  However, without
           this option, certain GNU extensions and traditional C and C++
           features are supported as well.  With this option, they are
           rejected.

           --WWppeeddaannttiicc does not cause warning messages for use of the alternate
           keywords whose names begin and end with ____.  Pedantic warnings are
           also disabled in the expression that follows "__extension__".
           However, only system header files should use these escape routes;
           application programs should avoid them.

           Some users try to use --WWppeeddaannttiicc to check programs for strict ISO C
           conformance.  They soon find that it does not do quite what they
           want: it finds some non-ISO practices, but not all---only those for
           which ISO C _r_e_q_u_i_r_e_s a diagnostic, and some others for which
           diagnostics have been added.

           A feature to report any failure to conform to ISO C might be useful
           in some instances, but would require considerable additional work
           and would be quite different from --WWppeeddaannttiicc.  We don't have plans
           to support such a feature in the near future.

           Where the standard specified with --ssttdd represents a GNU extended
           dialect of C, such as ggnnuu9900 or ggnnuu9999, there is a corresponding _b_a_s_e
           _s_t_a_n_d_a_r_d, the version of ISO C on which the GNU extended dialect is
           based.  Warnings from --WWppeeddaannttiicc are given where they are required
           by the base standard.  (It does not make sense for such warnings to
           be given only for features not in the specified GNU C dialect,
           since by definition the GNU dialects of C include all features the
           compiler supports with the given option, and there would be nothing
           to warn about.)

       --ppeeddaannttiicc--eerrrroorrss
           Give an error whenever the _b_a_s_e _s_t_a_n_d_a_r_d (see --WWppeeddaannttiicc) requires
           a diagnostic, in some cases where there is undefined behavior at
           compile-time and in some other cases that do not prevent
           compilation of programs that are valid according to the standard.
           This is not equivalent to --WWeerrrroorr==ppeeddaannttiicc, since there are errors
           enabled by this option and not enabled by the latter and vice
           versa.

       --WWaallll
           This enables all the warnings about constructions that some users
           consider questionable, and that are easy to avoid (or modify to
           prevent the warning), even in conjunction with macros.  This also
           enables some language-specific warnings described in CC++++ DDiiaalleecctt
           OOppttiioonnss and OObbjjeeccttiivvee--CC aanndd OObbjjeeccttiivvee--CC++++ DDiiaalleecctt OOppttiioonnss.

           --WWaallll turns on the following warning flags:

           --WWaaddddrreessss --WWaarrrraayy--bboouunnddss==11 (only with --OO22) --WWbbooooll--ccoommppaarree
           --WWbbooooll--ooppeerraattiioonn --WWcc++++1111--ccoommppaatt  --WWcc++++1144--ccoommppaatt --WWccaattcchh--vvaalluuee (C++
           and Objective-C++ only) --WWcchhaarr--ssuubbssccrriippttss --WWccoommmmeenntt
           --WWdduupplliiccaattee--ddeeccll--ssppeecciiffiieerr (C and Objective-C only) --WWeennuumm--ccoommppaarree
           (in C/ObjC; this is on by default in C++) --WWffoorrmmaatt
           --WWiinntt--iinn--bbooooll--ccoonntteexxtt --WWiimmpplliicciitt (C and Objective-C only)
           --WWiimmpplliicciitt--iinntt (C and Objective-C only)
           --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn (C and Objective-C only)
           --WWiinniitt--sseellff (only for C++) --WWllooggiiccaall--nnoott--ppaarreenntthheesseess --WWmmaaiinn (only
           for C/ObjC and unless --ffffrreeeessttaannddiinngg) --WWmmaayybbee--uunniinniittiiaalliizzeedd
           --WWmmeemmsseett--eelltt--ssiizzee --WWmmeemmsseett--ttrraannssppoosseedd--aarrggss --WWmmiisslleeaaddiinngg--iinnddeennttaattiioonn
           (only for C/C++) --WWmmiissssiinngg--aattttrriibbuutteess --WWmmiissssiinngg--bbrraacceess (only for
           C/ObjC) --WWmmuullttiissttaatteemmeenntt--mmaaccrrooss --WWnnaarrrroowwiinngg (only for C++)
           --WWnnoonnnnuullll --WWnnoonnnnuullll--ccoommppaarree --WWooppeennmmpp--ssiimmdd --WWppaarreenntthheesseess
           --WWppooiinntteerr--ssiiggnn --WWrreeoorrddeerr --WWrreessttrriicctt --WWrreettuurrnn--ttyyppee --WWsseeqquueennccee--ppooiinntt
           --WWssiiggnn--ccoommppaarree (only in C++) --WWssiizzeeooff--ppooiinntteerr--ddiivv
           --WWssiizzeeooff--ppooiinntteerr--mmeemmaacccceessss --WWssttrriicctt--aalliiaassiinngg --WWssttrriicctt--oovveerrffllooww==11
           --WWssttrriinnggoopp--ttrruunnccaattiioonn --WWsswwiittcchh --WWttaauuttoollooggiiccaall--ccoommppaarree --WWttrriiggrraapphhss
           --WWuunniinniittiiaalliizzeedd --WWuunnkknnoowwnn--pprraaggmmaass --WWuunnuusseedd--ffuunnccttiioonn --WWuunnuusseedd--llaabbeell
           --WWuunnuusseedd--vvaalluuee --WWuunnuusseedd--vvaarriiaabbllee --WWvvoollaattiillee--rreeggiisstteerr--vvaarr

           Note that some warning flags are not implied by --WWaallll.  Some of
           them warn about constructions that users generally do not consider
           questionable, but which occasionally you might wish to check for;
           others warn about constructions that are necessary or hard to avoid
           in some cases, and there is no simple way to modify the code to
           suppress the warning. Some of them are enabled by --WWeexxttrraa but many
           of them must be enabled individually.

       --WWeexxttrraa
           This enables some extra warning flags that are not enabled by
           --WWaallll. (This option used to be called --WW.  The older name is still
           supported, but the newer name is more descriptive.)

           --WWcclloobbbbeerreedd --WWccaasstt--ffuunnccttiioonn--ttyyppee --WWeemmppttyy--bbooddyy --WWiiggnnoorreedd--qquuaalliiffiieerrss
           --WWiimmpplliicciitt--ffaalllltthhrroouugghh==33 --WWmmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss
           --WWmmiissssiinngg--ppaarraammeetteerr--ttyyppee (C only) --WWoolldd--ssttyyllee--ddeeccllaarraattiioonn (C only)
           --WWoovveerrrriiddee--iinniitt --WWssiiggnn--ccoommppaarree (C only) --WWttyyppee--lliimmiittss
           --WWuunniinniittiiaalliizzeedd --WWsshhiifftt--nneeggaattiivvee--vvaalluuee (in C++03 and in C99 and
           newer) --WWuunnuusseedd--ppaarraammeetteerr (only with --WWuunnuusseedd or --WWaallll)
           --WWuunnuusseedd--bbuutt--sseett--ppaarraammeetteerr (only with --WWuunnuusseedd or --WWaallll)

           The option --WWeexxttrraa also prints warning messages for the following
           cases:

           *   A pointer is compared against integer zero with "<", "<=", ">",
               or ">=".

           *   (C++ only) An enumerator and a non-enumerator both appear in a
               conditional expression.

           *   (C++ only) Ambiguous virtual bases.

           *   (C++ only) Subscripting an array that has been declared
               "register".

           *   (C++ only) Taking the address of a variable that has been
               declared "register".

           *   (C++ only) A base class is not initialized in the copy
               constructor of a derived class.

       --WWcchhaarr--ssuubbssccrriippttss
           Warn if an array subscript has type "char".  This is a common cause
           of error, as programmers often forget that this type is signed on
           some machines.  This warning is enabled by --WWaallll.

       --WWcchhkkpp
           Warn about an invalid memory access that is found by Pointer Bounds
           Checker (--ffcchheecckk--ppooiinntteerr--bboouunnddss).

       --WWnnoo--ccoovveerraaggee--mmiissmmaattcchh
           Warn if feedback profiles do not match when using the --ffpprrooffiillee--uussee
           option.  If a source file is changed between compiling with
           --ffpprrooffiillee--ggeenn and with --ffpprrooffiillee--uussee, the files with the profile
           feedback can fail to match the source file and GCC cannot use the
           profile feedback information.  By default, this warning is enabled
           and is treated as an error.  --WWnnoo--ccoovveerraaggee--mmiissmmaattcchh can be used to
           disable the warning or --WWnnoo--eerrrroorr==ccoovveerraaggee--mmiissmmaattcchh can be used to
           disable the error.  Disabling the error for this warning can result
           in poorly optimized code and is useful only in the case of very
           minor changes such as bug fixes to an existing code-base.
           Completely disabling the warning is not recommended.

       --WWnnoo--ccpppp
           (C, Objective-C, C++, Objective-C++ and Fortran only)

           Suppress warning messages emitted by "#warning" directives.

       --WWddoouubbllee--pprroommoottiioonn (C, C++, Objective-C and Objective-C++ only)
           Give a warning when a value of type "float" is implicitly promoted
           to "double".  CPUs with a 32-bit "single-precision" floating-point
           unit implement "float" in hardware, but emulate "double" in
           software.  On such a machine, doing computations using "double"
           values is much more expensive because of the overhead required for
           software emulation.

           It is easy to accidentally do computations with "double" because
           floating-point literals are implicitly of type "double".  For
           example, in:

                   float area(float radius)
                   {
                      return 3.14159 * radius * radius;
                   }

           the compiler performs the entire computation with "double" because
           the floating-point literal is a "double".

       --WWdduupplliiccaattee--ddeeccll--ssppeecciiffiieerr (C and Objective-C only)
           Warn if a declaration has duplicate "const", "volatile", "restrict"
           or "_Atomic" specifier.  This warning is enabled by --WWaallll.

       --WWffoorrmmaatt
       --WWffoorrmmaatt==_n
           Check calls to "printf" and "scanf", etc., to make sure that the
           arguments supplied have types appropriate to the format string
           specified, and that the conversions specified in the format string
           make sense.  This includes standard functions, and others specified
           by format attributes, in the "printf", "scanf", "strftime" and
           "strfmon" (an X/Open extension, not in the C standard) families (or
           other target-specific families).  Which functions are checked
           without format attributes having been specified depends on the
           standard version selected, and such checks of functions without the
           attribute specified are disabled by --ffffrreeeessttaannddiinngg or --ffnnoo--bbuuiillttiinn.

           The formats are checked against the format features supported by
           GNU libc version 2.2.  These include all ISO C90 and C99 features,
           as well as features from the Single Unix Specification and some BSD
           and GNU extensions.  Other library implementations may not support
           all these features; GCC does not support warning about features
           that go beyond a particular library's limitations.  However, if
           --WWppeeddaannttiicc is used with --WWffoorrmmaatt, warnings are given about format
           features not in the selected standard version (but not for
           "strfmon" formats, since those are not in any version of the C
           standard).

           --WWffoorrmmaatt==11
           --WWffoorrmmaatt
               Option --WWffoorrmmaatt is equivalent to --WWffoorrmmaatt==11, and --WWnnoo--ffoorrmmaatt is
               equivalent to --WWffoorrmmaatt==00.  Since --WWffoorrmmaatt also checks for null
               format arguments for several functions, --WWffoorrmmaatt also implies
               --WWnnoonnnnuullll.  Some aspects of this level of format checking can
               be disabled by the options: --WWnnoo--ffoorrmmaatt--ccoonnttaaiinnss--nnuull,
               --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss, and --WWnnoo--ffoorrmmaatt--zzeerroo--lleennggtthh.  --WWffoorrmmaatt
               is enabled by --WWaallll.

           --WWnnoo--ffoorrmmaatt--ccoonnttaaiinnss--nnuull
               If --WWffoorrmmaatt is specified, do not warn about format strings that
               contain NUL bytes.

           --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss
               If --WWffoorrmmaatt is specified, do not warn about excess arguments to
               a "printf" or "scanf" format function.  The C standard
               specifies that such arguments are ignored.

               Where the unused arguments lie between used arguments that are
               specified with $$ operand number specifications, normally
               warnings are still given, since the implementation could not
               know what type to pass to "va_arg" to skip the unused
               arguments.  However, in the case of "scanf" formats, this
               option suppresses the warning if the unused arguments are all
               pointers, since the Single Unix Specification says that such
               unused arguments are allowed.

           --WWffoorrmmaatt--oovveerrffllooww
           --WWffoorrmmaatt--oovveerrffllooww==_l_e_v_e_l
               Warn about calls to formatted input/output functions such as
               "sprintf" and "vsprintf" that might overflow the destination
               buffer.  When the exact number of bytes written by a format
               directive cannot be determined at compile-time it is estimated
               based on heuristics that depend on the _l_e_v_e_l argument and on
               optimization.  While enabling optimization will in most cases
               improve the accuracy of the warning, it may also result in
               false positives.

               --WWffoorrmmaatt--oovveerrffllooww
               --WWffoorrmmaatt--oovveerrffllooww==11
                   Level _1 of --WWffoorrmmaatt--oovveerrffllooww enabled by --WWffoorrmmaatt employs a
                   conservative approach that warns only about calls that most
                   likely overflow the buffer.  At this level, numeric
                   arguments to format directives with unknown values are
                   assumed to have the value of one, and strings of unknown
                   length to be empty.  Numeric arguments that are known to be
                   bounded to a subrange of their type, or string arguments
                   whose output is bounded either by their directive's
                   precision or by a finite set of string literals, are
                   assumed to take on the value within the range that results
                   in the most bytes on output.  For example, the call to
                   "sprintf" below is diagnosed because even with both _a and _b
                   equal to zero, the terminating NUL character ('\0')
                   appended by the function to the destination buffer will be
                   written past its end.  Increasing the size of the buffer by
                   a single byte is sufficient to avoid the warning, though it
                   may not be sufficient to avoid the overflow.

                           void f (int a, int b)
                           {
                             char buf [13];
                             sprintf (buf, "a = %i, b = %i\n", a, b);
                           }

               --WWffoorrmmaatt--oovveerrffllooww==22
                   Level _2 warns also about calls that might overflow the
                   destination buffer given an argument of sufficient length
                   or magnitude.  At level _2, unknown numeric arguments are
                   assumed to have the minimum representable value for signed
                   types with a precision greater than 1, and the maximum
                   representable value otherwise.  Unknown string arguments
                   whose length cannot be assumed to be bounded either by the
                   directive's precision, or by a finite set of string
                   literals they may evaluate to, or the character array they
                   may point to, are assumed to be 1 character long.

                   At level _2, the call in the example above is again
                   diagnosed, but this time because with _a equal to a 32-bit
                   "INT_MIN" the first %i directive will write some of its
                   digits beyond the end of the destination buffer.  To make
                   the call safe regardless of the values of the two
                   variables, the size of the destination buffer must be
                   increased to at least 34 bytes.  GCC includes the minimum
                   size of the buffer in an informational note following the
                   warning.

                   An alternative to increasing the size of the destination
                   buffer is to constrain the range of formatted values.  The
                   maximum length of string arguments can be bounded by
                   specifying the precision in the format directive.  When
                   numeric arguments of format directives can be assumed to be
                   bounded by less than the precision of their type, choosing
                   an appropriate length modifier to the format specifier will
                   reduce the required buffer size.  For example, if _a and _b
                   in the example above can be assumed to be within the
                   precision of the "short int" type then using either the %hi
                   format directive or casting the argument to "short" reduces
                   the maximum required size of the buffer to 24 bytes.

                           void f (int a, int b)
                           {
                             char buf [23];
                             sprintf (buf, "a = %hi, b = %i\n", a, (short)b);
                           }

           --WWnnoo--ffoorrmmaatt--zzeerroo--lleennggtthh
               If --WWffoorrmmaatt is specified, do not warn about zero-length
               formats.  The C standard specifies that zero-length formats are
               allowed.

           --WWffoorrmmaatt==22
               Enable --WWffoorrmmaatt plus additional format checks.  Currently
               equivalent to --WWffoorrmmaatt --WWffoorrmmaatt--nnoonnlliitteerraall --WWffoorrmmaatt--sseeccuurriittyy
               --WWffoorrmmaatt--yy22kk.

           --WWffoorrmmaatt--nnoonnlliitteerraall
               If --WWffoorrmmaatt is specified, also warn if the format string is not
               a string literal and so cannot be checked, unless the format
               function takes its format arguments as a "va_list".

           --WWffoorrmmaatt--sseeccuurriittyy
               If --WWffoorrmmaatt is specified, also warn about uses of format
               functions that represent possible security problems.  At
               present, this warns about calls to "printf" and "scanf"
               functions where the format string is not a string literal and
               there are no format arguments, as in "printf (foo);".  This may
               be a security hole if the format string came from untrusted
               input and contains %%nn.  (This is currently a subset of what
               --WWffoorrmmaatt--nnoonnlliitteerraall warns about, but in future warnings may be
               added to --WWffoorrmmaatt--sseeccuurriittyy that are not included in
               --WWffoorrmmaatt--nnoonnlliitteerraall.)

           --WWffoorrmmaatt--ssiiggnneeddnneessss
               If --WWffoorrmmaatt is specified, also warn if the format string
               requires an unsigned argument and the argument is signed and
               vice versa.

           --WWffoorrmmaatt--ttrruunnccaattiioonn
           --WWffoorrmmaatt--ttrruunnccaattiioonn==_l_e_v_e_l
               Warn about calls to formatted input/output functions such as
               "snprintf" and "vsnprintf" that might result in output
               truncation.  When the exact number of bytes written by a format
               directive cannot be determined at compile-time it is estimated
               based on heuristics that depend on the _l_e_v_e_l argument and on
               optimization.  While enabling optimization will in most cases
               improve the accuracy of the warning, it may also result in
               false positives.  Except as noted otherwise, the option uses
               the same logic --WWffoorrmmaatt--oovveerrffllooww.

               --WWffoorrmmaatt--ttrruunnccaattiioonn
               --WWffoorrmmaatt--ttrruunnccaattiioonn==11
                   Level _1 of --WWffoorrmmaatt--ttrruunnccaattiioonn enabled by --WWffoorrmmaatt employs
                   a conservative approach that warns only about calls to
                   bounded functions whose return value is unused and that
                   will most likely result in output truncation.

               --WWffoorrmmaatt--ttrruunnccaattiioonn==22
                   Level _2 warns also about calls to bounded functions whose
                   return value is used and that might result in truncation
                   given an argument of sufficient length or magnitude.

               NOTE: In Ubuntu 8.10 and later versions this option is enabled
               by default for C, C++, ObjC, ObjC++.  To disable, use
               --WWnnoo--ffoorrmmaatt--sseeccuurriittyy, or disable all format warnings with
               --WWffoorrmmaatt==00.  To make format security warnings fatal, specify
               --WWeerrrroorr==ffoorrmmaatt--sseeccuurriittyy.

           --WWffoorrmmaatt--yy22kk
               If --WWffoorrmmaatt is specified, also warn about "strftime" formats
               that may yield only a two-digit year.

       --WWnnoonnnnuullll
           Warn about passing a null pointer for arguments marked as requiring
           a non-null value by the "nonnull" function attribute.

           --WWnnoonnnnuullll is included in --WWaallll and --WWffoorrmmaatt.  It can be disabled
           with the --WWnnoo--nnoonnnnuullll option.

       --WWnnoonnnnuullll--ccoommppaarree
           Warn when comparing an argument marked with the "nonnull" function
           attribute against null inside the function.

           --WWnnoonnnnuullll--ccoommppaarree is included in --WWaallll.  It can be disabled with
           the --WWnnoo--nnoonnnnuullll--ccoommppaarree option.

       --WWnnuullll--ddeerreeffeerreennccee
           Warn if the compiler detects paths that trigger erroneous or
           undefined behavior due to dereferencing a null pointer.  This
           option is only active when --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss is active,
           which is enabled by optimizations in most targets.  The precision
           of the warnings depends on the optimization options used.

       --WWiinniitt--sseellff (C, C++, Objective-C and Objective-C++ only)
           Warn about uninitialized variables that are initialized with
           themselves.  Note this option can only be used with the
           --WWuunniinniittiiaalliizzeedd option.

           For example, GCC warns about "i" being uninitialized in the
           following snippet only when --WWiinniitt--sseellff has been specified:

                   int f()
                   {
                     int i = i;
                     return i;
                   }

           This warning is enabled by --WWaallll in C++.

       --WWiimmpplliicciitt--iinntt (C and Objective-C only)
           Warn when a declaration does not specify a type.  This warning is
           enabled by --WWaallll.

       --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn (C and Objective-C only)
           Give a warning whenever a function is used before being declared.
           In C99 mode (--ssttdd==cc9999 or --ssttdd==ggnnuu9999), this warning is enabled by
           default and it is made into an error by --ppeeddaannttiicc--eerrrroorrss. This
           warning is also enabled by --WWaallll.

       --WWiimmpplliicciitt (C and Objective-C only)
           Same as --WWiimmpplliicciitt--iinntt and --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn.  This
           warning is enabled by --WWaallll.

       --WWiimmpplliicciitt--ffaalllltthhrroouugghh
           --WWiimmpplliicciitt--ffaalllltthhrroouugghh is the same as --WWiimmpplliicciitt--ffaalllltthhrroouugghh==33 and
           --WWnnoo--iimmpplliicciitt--ffaalllltthhrroouugghh is the same as --WWiimmpplliicciitt--ffaalllltthhrroouugghh==00.

       --WWiimmpplliicciitt--ffaalllltthhrroouugghh==_n
           Warn when a switch case falls through.  For example:

                   switch (cond)
                     {
                     case 1:
                       a = 1;
                       break;
                     case 2:
                       a = 2;
                     case 3:
                       a = 3;
                       break;
                     }

           This warning does not warn when the last statement of a case cannot
           fall through, e.g. when there is a return statement or a call to
           function declared with the noreturn attribute.
           --WWiimmpplliicciitt--ffaalllltthhrroouugghh== also takes into account control flow
           statements, such as ifs, and only warns when appropriate.  E.g.

                   switch (cond)
                     {
                     case 1:
                       if (i > 3) {
                         bar (5);
                         break;
                       } else if (i < 1) {
                         bar (0);
                       } else
                         return;
                     default:
                       ...
                     }

           Since there are occasions where a switch case fall through is
           desirable, GCC provides an attribute, "__attribute__
           ((fallthrough))", that is to be used along with a null statement to
           suppress this warning that would normally occur:

                   switch (cond)
                     {
                     case 1:
                       bar (0);
                       __attribute__ ((fallthrough));
                     default:
                       ...
                     }

           C++17 provides a standard way to suppress the
           --WWiimmpplliicciitt--ffaalllltthhrroouugghh warning using "[[fallthrough]];" instead of
           the GNU attribute.  In C++11 or C++14 users can use
           "[[gnu::fallthrough]];", which is a GNU extension.  Instead of
           these attributes, it is also possible to add a fallthrough comment
           to silence the warning.  The whole body of the C or C++ style
           comment should match the given regular expressions listed below.
           The option argument _n specifies what kind of comments are accepted:

           *<--WWiimmpplliicciitt--ffaalllltthhrroouugghh==00 disables the warning altogether.>
           *<--WWiimmpplliicciitt--ffaalllltthhrroouugghh==11 matches ".*" regular>
               expression, any comment is used as fallthrough comment.

           *<--WWiimmpplliicciitt--ffaalllltthhrroouugghh==22 case insensitively matches>
               ".*falls?[ \t-]*thr(ough|u).*" regular expression.

           *<--WWiimmpplliicciitt--ffaalllltthhrroouugghh==33 case sensitively matches one of the>
               following regular expressions:

               *<"-fallthrough">
               *<"@fallthrough@">
               *<"lint -fallthrough[ \t]*">
               *<"[ \t.!]*(ELSE,? |INTENTIONAL(LY)? )?FALL(S |
               |-)?THR(OUGH|U)[ \t.!]*(-[^\n\r]*)?">
               *<"[ \t.!]*(Else,? |Intentional(ly)? )?Fall((s |
               |-)[Tt]|t)hr(ough|u)[ \t.!]*(-[^\n\r]*)?">
               *<"[ \t.!]*([Ee]lse,? |[Ii]ntentional(ly)? )?fall(s |
               |-)?thr(ough|u)[ \t.!]*(-[^\n\r]*)?">
           *<--WWiimmpplliicciitt--ffaalllltthhrroouugghh==44 case sensitively matches one of the>
               following regular expressions:

               *<"-fallthrough">
               *<"@fallthrough@">
               *<"lint -fallthrough[ \t]*">
               *<"[ \t]*FALLTHR(OUGH|U)[ \t]*">
           *<--WWiimmpplliicciitt--ffaalllltthhrroouugghh==55 doesn't recognize any comments as>
               fallthrough comments, only attributes disable the warning.

           The comment needs to be followed after optional whitespace and
           other comments by "case" or "default" keywords or by a user label
           that precedes some "case" or "default" label.

                   switch (cond)
                     {
                     case 1:
                       bar (0);
                       /* FALLTHRU */
                     default:
                       ...
                     }

           The --WWiimmpplliicciitt--ffaalllltthhrroouugghh==33 warning is enabled by --WWeexxttrraa.

       --WWiiff--nnoott--aalliiggnneedd (C, C++, Objective-C and Objective-C++ only)
           Control if warning triggered by the "warn_if_not_aligned" attribute
           should be issued.  This is enabled by default.  Use
           --WWnnoo--iiff--nnoott--aalliiggnneedd to disable it.

       --WWiiggnnoorreedd--qquuaalliiffiieerrss (C and C++ only)
           Warn if the return type of a function has a type qualifier such as
           "const".  For ISO C such a type qualifier has no effect, since the
           value returned by a function is not an lvalue.  For C++, the
           warning is only emitted for scalar types or "void".  ISO C
           prohibits qualified "void" return types on function definitions, so
           such return types always receive a warning even without this
           option.

           This warning is also enabled by --WWeexxttrraa.

       --WWiiggnnoorreedd--aattttrriibbuutteess (C and C++ only)
           Warn when an attribute is ignored.  This is different from the
           --WWaattttrriibbuutteess option in that it warns whenever the compiler decides
           to drop an attribute, not that the attribute is either unknown,
           used in a wrong place, etc.  This warning is enabled by default.

       --WWmmaaiinn
           Warn if the type of "main" is suspicious.  "main" should be a
           function with external linkage, returning int, taking either zero
           arguments, two, or three arguments of appropriate types.  This
           warning is enabled by default in C++ and is enabled by either --WWaallll
           or --WWppeeddaannttiicc.

       --WWmmiisslleeaaddiinngg--iinnddeennttaattiioonn (C and C++ only)
           Warn when the indentation of the code does not reflect the block
           structure.  Specifically, a warning is issued for "if", "else",
           "while", and "for" clauses with a guarded statement that does not
           use braces, followed by an unguarded statement with the same
           indentation.

           In the following example, the call to "bar" is misleadingly
           indented as if it were guarded by the "if" conditional.

                     if (some_condition ())
                       foo ();
                       bar ();  /* Gotcha: this is not guarded by the "if".  */

           In the case of mixed tabs and spaces, the warning uses the
           --ffttaabbssttoopp== option to determine if the statements line up
           (defaulting to 8).

           The warning is not issued for code involving multiline preprocessor
           logic such as the following example.

                     if (flagA)
                       foo (0);
                   #if SOME_CONDITION_THAT_DOES_NOT_HOLD
                     if (flagB)
                   #endif
                       foo (1);

           The warning is not issued after a "#line" directive, since this
           typically indicates autogenerated code, and no assumptions can be
           made about the layout of the file that the directive references.

           This warning is enabled by --WWaallll in C and C++.

       --WWmmiissssiinngg--aattttrriibbuutteess
           Warn when a declaration of a function is missing one or more
           attributes that a related function is declared with and whose
           absence may adversely affect the correctness or efficiency of
           generated code.  For example, in C++, the warning is issued when an
           explicit specialization of a primary template declared with
           attribute "alloc_align", "alloc_size", "assume_aligned", "format",
           "format_arg", "malloc", or "nonnull" is declared without it.
           Attributes "deprecated", "error", and "warning" suppress the
           warning..

           --WWmmiissssiinngg--aattttrriibbuutteess is enabled by --WWaallll.

           For example, since the declaration of the primary function template
           below makes use of both attribute "malloc" and "alloc_size" the
           declaration of the explicit specialization of the template is
           diagnosed because it is missing one of the attributes.

                   template <class T>
                   T* __attribute__ ((malloc, alloc_size (1)))
                   allocate (size_t);

                   template <>
                   void* __attribute__ ((malloc))   // missing alloc_size
                   allocate<void> (size_t);

       --WWmmiissssiinngg--bbrraacceess
           Warn if an aggregate or union initializer is not fully bracketed.
           In the following example, the initializer for "a" is not fully
           bracketed, but that for "b" is fully bracketed.  This warning is
           enabled by --WWaallll in C.

                   int a[2][2] = { 0, 1, 2, 3 };
                   int b[2][2] = { { 0, 1 }, { 2, 3 } };

           This warning is enabled by --WWaallll.

       --WWmmiissssiinngg--iinncclluuddee--ddiirrss (C, C++, Objective-C and Objective-C++ only)
           Warn if a user-supplied include directory does not exist.

       --WWmmuullttiissttaatteemmeenntt--mmaaccrrooss
           Warn about unsafe multiple statement macros that appear to be
           guarded by a clause such as "if", "else", "for", "switch", or
           "while", in which only the first statement is actually guarded
           after the macro is expanded.

           For example:

                   #define DOIT x++; y++
                   if (c)
                     DOIT;

           will increment "y" unconditionally, not just when "c" holds.  The
           can usually be fixed by wrapping the macro in a do-while loop:

                   #define DOIT do { x++; y++; } while (0)
                   if (c)
                     DOIT;

           This warning is enabled by --WWaallll in C and C++.

       --WWppaarreenntthheesseess
           Warn if parentheses are omitted in certain contexts, such as when
           there is an assignment in a context where a truth value is
           expected, or when operators are nested whose precedence people
           often get confused about.

           Also warn if a comparison like "x<=y<=z" appears; this is
           equivalent to "(x<=y ? 1 : 0) <= z", which is a different
           interpretation from that of ordinary mathematical notation.

           Also warn for dangerous uses of the GNU extension to "?:" with
           omitted middle operand. When the condition in the "?": operator is
           a boolean expression, the omitted value is always 1.  Often
           programmers expect it to be a value computed inside the conditional
           expression instead.

           For C++ this also warns for some cases of unnecessary parentheses
           in declarations, which can indicate an attempt at a function call
           instead of a declaration:

                   {
                     // Declares a local variable called mymutex.
                     std::unique_lock<std::mutex> (mymutex);
                     // User meant std::unique_lock<std::mutex> lock (mymutex);
                   }

           This warning is enabled by --WWaallll.

       --WWsseeqquueennccee--ppooiinntt
           Warn about code that may have undefined semantics because of
           violations of sequence point rules in the C and C++ standards.

           The C and C++ standards define the order in which expressions in a
           C/C++ program are evaluated in terms of _s_e_q_u_e_n_c_e _p_o_i_n_t_s, which
           represent a partial ordering between the execution of parts of the
           program: those executed before the sequence point, and those
           executed after it.  These occur after the evaluation of a full
           expression (one which is not part of a larger expression), after
           the evaluation of the first operand of a "&&", "||", "? :" or ","
           (comma) operator, before a function is called (but after the
           evaluation of its arguments and the expression denoting the called
           function), and in certain other places.  Other than as expressed by
           the sequence point rules, the order of evaluation of subexpressions
           of an expression is not specified.  All these rules describe only a
           partial order rather than a total order, since, for example, if two
           functions are called within one expression with no sequence point
           between them, the order in which the functions are called is not
           specified.  However, the standards committee have ruled that
           function calls do not overlap.

           It is not specified when between sequence points modifications to
           the values of objects take effect.  Programs whose behavior depends
           on this have undefined behavior; the C and C++ standards specify
           that "Between the previous and next sequence point an object shall
           have its stored value modified at most once by the evaluation of an
           expression.  Furthermore, the prior value shall be read only to
           determine the value to be stored.".  If a program breaks these
           rules, the results on any particular implementation are entirely
           unpredictable.

           Examples of code with undefined behavior are "a = a++;", "a[n] =
           b[n++]" and "a[i++] = i;".  Some more complicated cases are not
           diagnosed by this option, and it may give an occasional false
           positive result, but in general it has been found fairly effective
           at detecting this sort of problem in programs.

           The C++17 standard will define the order of evaluation of operands
           in more cases: in particular it requires that the right-hand side
           of an assignment be evaluated before the left-hand side, so the
           above examples are no longer undefined.  But this warning will
           still warn about them, to help people avoid writing code that is
           undefined in C and earlier revisions of C++.

           The standard is worded confusingly, therefore there is some debate
           over the precise meaning of the sequence point rules in subtle
           cases.  Links to discussions of the problem, including proposed
           formal definitions, may be found on the GCC readings page, at
           <hhttttpp::////ggcccc..ggnnuu..oorrgg//rreeaaddiinnggss..hhttmmll>.

           This warning is enabled by --WWaallll for C and C++.

       --WWnnoo--rreettuurrnn--llooccaall--aaddddrr
           Do not warn about returning a pointer (or in C++, a reference) to a
           variable that goes out of scope after the function returns.

       --WWrreettuurrnn--ttyyppee
           Warn whenever a function is defined with a return type that
           defaults to "int".  Also warn about any "return" statement with no
           return value in a function whose return type is not "void" (falling
           off the end of the function body is considered returning without a
           value).

           For C only, warn about a "return" statement with an expression in a
           function whose return type is "void", unless the expression type is
           also "void".  As a GNU extension, the latter case is accepted
           without a warning unless --WWppeeddaannttiicc is used.

           For C++, a function without return type always produces a
           diagnostic message, even when --WWnnoo--rreettuurrnn--ttyyppee is specified.  The
           only exceptions are "main" and functions defined in system headers.

           This warning is enabled by default for C++ and is enabled by --WWaallll.

       --WWsshhiifftt--ccoouunntt--nneeggaattiivvee
           Warn if shift count is negative. This warning is enabled by
           default.

       --WWsshhiifftt--ccoouunntt--oovveerrffllooww
           Warn if shift count >= width of type. This warning is enabled by
           default.

       --WWsshhiifftt--nneeggaattiivvee--vvaalluuee
           Warn if left shifting a negative value.  This warning is enabled by
           --WWeexxttrraa in C99 and C++11 modes (and newer).

       --WWsshhiifftt--oovveerrffllooww
       --WWsshhiifftt--oovveerrffllooww==_n
           Warn about left shift overflows.  This warning is enabled by
           default in C99 and C++11 modes (and newer).

           --WWsshhiifftt--oovveerrffllooww==11
               This is the warning level of --WWsshhiifftt--oovveerrffllooww and is enabled by
               default in C99 and C++11 modes (and newer).  This warning level
               does not warn about left-shifting 1 into the sign bit.
               (However, in C, such an overflow is still rejected in contexts
               where an integer constant expression is required.)

           --WWsshhiifftt--oovveerrffllooww==22
               This warning level also warns about left-shifting 1 into the
               sign bit, unless C++14 mode is active.

       --WWsswwiittcchh
           Warn whenever a "switch" statement has an index of enumerated type
           and lacks a "case" for one or more of the named codes of that
           enumeration.  (The presence of a "default" label prevents this
           warning.)  "case" labels outside the enumeration range also provoke
           warnings when this option is used (even if there is a "default"
           label).  This warning is enabled by --WWaallll.

       --WWsswwiittcchh--ddeeffaauulltt
           Warn whenever a "switch" statement does not have a "default" case.

       --WWsswwiittcchh--eennuumm
           Warn whenever a "switch" statement has an index of enumerated type
           and lacks a "case" for one or more of the named codes of that
           enumeration.  "case" labels outside the enumeration range also
           provoke warnings when this option is used.  The only difference
           between --WWsswwiittcchh and this option is that this option gives a
           warning about an omitted enumeration code even if there is a
           "default" label.

       --WWsswwiittcchh--bbooooll
           Warn whenever a "switch" statement has an index of boolean type and
           the case values are outside the range of a boolean type.  It is
           possible to suppress this warning by casting the controlling
           expression to a type other than "bool".  For example:

                   switch ((int) (a == 4))
                     {
                     ...
                     }

           This warning is enabled by default for C and C++ programs.

       --WWsswwiittcchh--uunnrreeaacchhaabbllee
           Warn whenever a "switch" statement contains statements between the
           controlling expression and the first case label, which will never
           be executed.  For example:

                   switch (cond)
                     {
                      i = 15;
                     ...
                      case 5:
                     ...
                     }

           --WWsswwiittcchh--uunnrreeaacchhaabbllee does not warn if the statement between the
           controlling expression and the first case label is just a
           declaration:

                   switch (cond)
                     {
                      int i;
                     ...
                      case 5:
                      i = 5;
                     ...
                     }

           This warning is enabled by default for C and C++ programs.

       --WWssyynncc--nnaanndd (C and C++ only)
           Warn when "__sync_fetch_and_nand" and "__sync_nand_and_fetch"
           built-in functions are used.  These functions changed semantics in
           GCC 4.4.

       --WWuunnuusseedd--bbuutt--sseett--ppaarraammeetteerr
           Warn whenever a function parameter is assigned to, but otherwise
           unused (aside from its declaration).

           To suppress this warning use the "unused" attribute.

           This warning is also enabled by --WWuunnuusseedd together with --WWeexxttrraa.

       --WWuunnuusseedd--bbuutt--sseett--vvaarriiaabbllee
           Warn whenever a local variable is assigned to, but otherwise unused
           (aside from its declaration).  This warning is enabled by --WWaallll.

           To suppress this warning use the "unused" attribute.

           This warning is also enabled by --WWuunnuusseedd, which is enabled by
           --WWaallll.

       --WWuunnuusseedd--ffuunnccttiioonn
           Warn whenever a static function is declared but not defined or a
           non-inline static function is unused.  This warning is enabled by
           --WWaallll.

       --WWuunnuusseedd--llaabbeell
           Warn whenever a label is declared but not used.  This warning is
           enabled by --WWaallll.

           To suppress this warning use the "unused" attribute.

       --WWuunnuusseedd--llooccaall--ttyyppeeddeeffss (C, Objective-C, C++ and Objective-C++ only)
           Warn when a typedef locally defined in a function is not used.
           This warning is enabled by --WWaallll.

       --WWuunnuusseedd--ppaarraammeetteerr
           Warn whenever a function parameter is unused aside from its
           declaration.

           To suppress this warning use the "unused" attribute.

       --WWnnoo--uunnuusseedd--rreessuulltt
           Do not warn if a caller of a function marked with attribute
           "warn_unused_result" does not use its return value. The default is
           --WWuunnuusseedd--rreessuulltt.

       --WWuunnuusseedd--vvaarriiaabbllee
           Warn whenever a local or static variable is unused aside from its
           declaration. This option implies --WWuunnuusseedd--ccoonnsstt--vvaarriiaabbllee==11 for C,
           but not for C++. This warning is enabled by --WWaallll.

           To suppress this warning use the "unused" attribute.

       --WWuunnuusseedd--ccoonnsstt--vvaarriiaabbllee
       --WWuunnuusseedd--ccoonnsstt--vvaarriiaabbllee==_n
           Warn whenever a constant static variable is unused aside from its
           declaration.  --WWuunnuusseedd--ccoonnsstt--vvaarriiaabbllee==11 is enabled by
           --WWuunnuusseedd--vvaarriiaabbllee for C, but not for C++. In C this declares
           variable storage, but in C++ this is not an error since const
           variables take the place of "#define"s.

           To suppress this warning use the "unused" attribute.

           --WWuunnuusseedd--ccoonnsstt--vvaarriiaabbllee==11
               This is the warning level that is enabled by --WWuunnuusseedd--vvaarriiaabbllee
               for C.  It warns only about unused static const variables
               defined in the main compilation unit, but not about static
               const variables declared in any header included.

           --WWuunnuusseedd--ccoonnsstt--vvaarriiaabbllee==22
               This warning level also warns for unused constant static
               variables in headers (excluding system headers).  This is the
               warning level of --WWuunnuusseedd--ccoonnsstt--vvaarriiaabbllee and must be explicitly
               requested since in C++ this isn't an error and in C it might be
               harder to clean up all headers included.

       --WWuunnuusseedd--vvaalluuee
           Warn whenever a statement computes a result that is explicitly not
           used. To suppress this warning cast the unused expression to
           "void". This includes an expression-statement or the left-hand side
           of a comma expression that contains no side effects. For example,
           an expression such as "x[i,j]" causes a warning, while
           "x[(void)i,j]" does not.

           This warning is enabled by --WWaallll.

       --WWuunnuusseedd
           All the above --WWuunnuusseedd options combined.

           In order to get a warning about an unused function parameter, you
           must either specify --WWeexxttrraa --WWuunnuusseedd (note that --WWaallll implies
           --WWuunnuusseedd), or separately specify --WWuunnuusseedd--ppaarraammeetteerr.

       --WWuunniinniittiiaalliizzeedd
           Warn if an automatic variable is used without first being
           initialized or if a variable may be clobbered by a "setjmp" call.
           In C++, warn if a non-static reference or non-static "const" member
           appears in a class without constructors.

           If you want to warn about code that uses the uninitialized value of
           the variable in its own initializer, use the --WWiinniitt--sseellff option.

           These warnings occur for individual uninitialized or clobbered
           elements of structure, union or array variables as well as for
           variables that are uninitialized or clobbered as a whole.  They do
           not occur for variables or elements declared "volatile".  Because
           these warnings depend on optimization, the exact variables or
           elements for which there are warnings depends on the precise
           optimization options and version of GCC used.

           Note that there may be no warning about a variable that is used
           only to compute a value that itself is never used, because such
           computations may be deleted by data flow analysis before the
           warnings are printed.

       --WWiinnvvaalliidd--mmeemmoorryy--mmooddeell
           Warn for invocations of ____aattoommiicc BBuuiillttiinnss, ____ssyynncc BBuuiillttiinnss, and the
           C11 atomic generic functions with a memory consistency argument
           that is either invalid for the operation or outside the range of
           values of the "memory_order" enumeration.  For example, since the
           "__atomic_store" and "__atomic_store_n" built-ins are only defined
           for the relaxed, release, and sequentially consistent memory orders
           the following code is diagnosed:

                   void store (int *i)
                   {
                     __atomic_store_n (i, 0, memory_order_consume);
                   }

           --WWiinnvvaalliidd--mmeemmoorryy--mmooddeell is enabled by default.

       --WWmmaayybbee--uunniinniittiiaalliizzeedd
           For an automatic (i.e. local) variable, if there exists a path from
           the function entry to a use of the variable that is initialized,
           but there exist some other paths for which the variable is not
           initialized, the compiler emits a warning if it cannot prove the
           uninitialized paths are not executed at run time.

           These warnings are only possible in optimizing compilation, because
           otherwise GCC does not keep track of the state of variables.

           These warnings are made optional because GCC may not be able to
           determine when the code is correct in spite of appearing to have an
           error.  Here is one example of how this can happen:

                   {
                     int x;
                     switch (y)
                       {
                       case 1: x = 1;
                         break;
                       case 2: x = 4;
                         break;
                       case 3: x = 5;
                       }
                     foo (x);
                   }

           If the value of "y" is always 1, 2 or 3, then "x" is always
           initialized, but GCC doesn't know this. To suppress the warning,
           you need to provide a default case with aasssseerrtt(0) or similar code.

           This option also warns when a non-volatile automatic variable might
           be changed by a call to "longjmp".  The compiler sees only the
           calls to "setjmp".  It cannot know where "longjmp" will be called;
           in fact, a signal handler could call it at any point in the code.
           As a result, you may get a warning even when there is in fact no
           problem because "longjmp" cannot in fact be called at the place
           that would cause a problem.

           Some spurious warnings can be avoided if you declare all the
           functions you use that never return as "noreturn".

           This warning is enabled by --WWaallll or --WWeexxttrraa.

       --WWuunnkknnoowwnn--pprraaggmmaass
           Warn when a "#pragma" directive is encountered that is not
           understood by GCC.  If this command-line option is used, warnings
           are even issued for unknown pragmas in system header files.  This
           is not the case if the warnings are only enabled by the --WWaallll
           command-line option.

       --WWnnoo--pprraaggmmaass
           Do not warn about misuses of pragmas, such as incorrect parameters,
           invalid syntax, or conflicts between pragmas.  See also
           --WWuunnkknnoowwnn--pprraaggmmaass.

       --WWssttrriicctt--aalliiaassiinngg
           This option is only active when --ffssttrriicctt--aalliiaassiinngg is active.  It
           warns about code that might break the strict aliasing rules that
           the compiler is using for optimization.  The warning does not catch
           all cases, but does attempt to catch the more common pitfalls.  It
           is included in --WWaallll.  It is equivalent to --WWssttrriicctt--aalliiaassiinngg==33

       --WWssttrriicctt--aalliiaassiinngg==nn
           This option is only active when --ffssttrriicctt--aalliiaassiinngg is active.  It
           warns about code that might break the strict aliasing rules that
           the compiler is using for optimization.  Higher levels correspond
           to higher accuracy (fewer false positives).  Higher levels also
           correspond to more effort, similar to the way --OO works.
           --WWssttrriicctt--aalliiaassiinngg is equivalent to --WWssttrriicctt--aalliiaassiinngg==33.

           Level 1: Most aggressive, quick, least accurate.  Possibly useful
           when higher levels do not warn but --ffssttrriicctt--aalliiaassiinngg still breaks
           the code, as it has very few false negatives.  However, it has many
           false positives.  Warns for all pointer conversions between
           possibly incompatible types, even if never dereferenced.  Runs in
           the front end only.

           Level 2: Aggressive, quick, not too precise.  May still have many
           false positives (not as many as level 1 though), and few false
           negatives (but possibly more than level 1).  Unlike level 1, it
           only warns when an address is taken.  Warns about incomplete types.
           Runs in the front end only.

           Level 3 (default for --WWssttrriicctt--aalliiaassiinngg): Should have very few false
           positives and few false negatives.  Slightly slower than levels 1
           or 2 when optimization is enabled.  Takes care of the common
           pun+dereference pattern in the front end: "*(int*)&some_float".  If
           optimization is enabled, it also runs in the back end, where it
           deals with multiple statement cases using flow-sensitive points-to
           information.  Only warns when the converted pointer is
           dereferenced.  Does not warn about incomplete types.

       --WWssttrriicctt--oovveerrffllooww
       --WWssttrriicctt--oovveerrffllooww==_n
           This option is only active when signed overflow is undefined.  It
           warns about cases where the compiler optimizes based on the
           assumption that signed overflow does not occur.  Note that it does
           not warn about all cases where the code might overflow: it only
           warns about cases where the compiler implements some optimization.
           Thus this warning depends on the optimization level.

           An optimization that assumes that signed overflow does not occur is
           perfectly safe if the values of the variables involved are such
           that overflow never does, in fact, occur.  Therefore this warning
           can easily give a false positive: a warning about code that is not
           actually a problem.  To help focus on important issues, several
           warning levels are defined.  No warnings are issued for the use of
           undefined signed overflow when estimating how many iterations a
           loop requires, in particular when determining whether a loop will
           be executed at all.

           --WWssttrriicctt--oovveerrffllooww==11
               Warn about cases that are both questionable and easy to avoid.
               For example the compiler simplifies "x + 1 > x" to 1.  This
               level of --WWssttrriicctt--oovveerrffllooww is enabled by --WWaallll; higher levels
               are not, and must be explicitly requested.

           --WWssttrriicctt--oovveerrffllooww==22
               Also warn about other cases where a comparison is simplified to
               a constant.  For example: "abs (x) >= 0".  This can only be
               simplified when signed integer overflow is undefined, because
               "abs (INT_MIN)" overflows to "INT_MIN", which is less than
               zero.  --WWssttrriicctt--oovveerrffllooww (with no level) is the same as
               --WWssttrriicctt--oovveerrffllooww==22.

           --WWssttrriicctt--oovveerrffllooww==33
               Also warn about other cases where a comparison is simplified.
               For example: "x + 1 > 1" is simplified to "x > 0".

           --WWssttrriicctt--oovveerrffllooww==44
               Also warn about other simplifications not covered by the above
               cases.  For example: "(x * 10) / 5" is simplified to "x * 2".

           --WWssttrriicctt--oovveerrffllooww==55
               Also warn about cases where the compiler reduces the magnitude
               of a constant involved in a comparison.  For example: "x + 2 >
               y" is simplified to "x + 1 >= y".  This is reported only at the
               highest warning level because this simplification applies to
               many comparisons, so this warning level gives a very large
               number of false positives.

       --WWssttrriinnggoopp--oovveerrffllooww
       --WWssttrriinnggoopp--oovveerrffllooww==_t_y_p_e
           Warn for calls to string manipulation functions such as "memcpy"
           and "strcpy" that are determined to overflow the destination
           buffer.  The optional argument is one greater than the type of
           Object Size Checking to perform to determine the size of the
           destination.  The argument is meaningful only for functions that
           operate on character arrays but not for raw memory functions like
           "memcpy" which always make use of Object Size type-0.  The option
           also warns for calls that specify a size in excess of the largest
           possible object or at most "SIZE_MAX / 2" bytes.  The option
           produces the best results with optimization enabled but can detect
           a small subset of simple buffer overflows even without optimization
           in calls to the GCC built-in functions like "__builtin_memcpy" that
           correspond to the standard functions.  In any case, the option
           warns about just a subset of buffer overflows detected by the
           corresponding overflow checking built-ins.  For example, the option
           will issue a warning for the "strcpy" call below because it copies
           at least 5 characters (the string "blue" including the terminating
           NUL) into the buffer of size 4.

                   enum Color { blue, purple, yellow };
                   const char* f (enum Color clr)
                   {
                     static char buf [4];
                     const char *str;
                     switch (clr)
                       {
                         case blue: str = "blue"; break;
                         case purple: str = "purple"; break;
                         case yellow: str = "yellow"; break;
                       }

                     return strcpy (buf, str);   // warning here
                   }

           Option --WWssttrriinnggoopp--oovveerrffllooww==22 is enabled by default.

           --WWssttrriinnggoopp--oovveerrffllooww
           --WWssttrriinnggoopp--oovveerrffllooww==11
               The --WWssttrriinnggoopp--oovveerrffllooww==11 option uses type-zero Object Size
               Checking to determine the sizes of destination objects.  This
               is the default setting of the option.  At this setting the
               option will not warn for writes past the end of subobjects of
               larger objects accessed by pointers unless the size of the
               largest surrounding object is known.  When the destination may
               be one of several objects it is assumed to be the largest one
               of them.  On Linux systems, when optimization is enabled at
               this setting the option warns for the same code as when the
               "_FORTIFY_SOURCE" macro is defined to a non-zero value.

           --WWssttrriinnggoopp--oovveerrffllooww==22
               The --WWssttrriinnggoopp--oovveerrffllooww==22 option uses type-one Object Size
               Checking to determine the sizes of destination objects.  At
               this setting the option will warn about overflows when writing
               to members of the largest complete objects whose exact size is
               known.  It will, however, not warn for excessive writes to the
               same members of unknown objects referenced by pointers since
               they may point to arrays containing unknown numbers of
               elements.

           --WWssttrriinnggoopp--oovveerrffllooww==33
               The --WWssttrriinnggoopp--oovveerrffllooww==33 option uses type-two Object Size
               Checking to determine the sizes of destination objects.  At
               this setting the option warns about overflowing the smallest
               object or data member.  This is the most restrictive setting of
               the option that may result in warnings for safe code.

           --WWssttrriinnggoopp--oovveerrffllooww==44
               The --WWssttrriinnggoopp--oovveerrffllooww==44 option uses type-three Object Size
               Checking to determine the sizes of destination objects.  At
               this setting the option will warn about overflowing any data
               members, and when the destination is one of several objects it
               uses the size of the largest of them to decide whether to issue
               a warning.  Similarly to --WWssttrriinnggoopp--oovveerrffllooww==33 this setting of
               the option may result in warnings for benign code.

       --WWssttrriinnggoopp--ttrruunnccaattiioonn
           Warn for calls to bounded string manipulation functions such as
           "strncat", "strncpy", and "stpncpy" that may either truncate the
           copied string or leave the destination unchanged.

           In the following example, the call to "strncat" specifies a bound
           that is less than the length of the source string.  As a result,
           the copy of the source will be truncated and so the call is
           diagnosed.  To avoid the warning use "bufsize - strlen (buf) - 1)"
           as the bound.

                   void append (char *buf, size_t bufsize)
                   {
                     strncat (buf, ".txt", 3);
                   }

           As another example, the following call to "strncpy" results in
           copying to "d" just the characters preceding the terminating NUL,
           without appending the NUL to the end.  Assuming the result of
           "strncpy" is necessarily a NUL-terminated string is a common
           mistake, and so the call is diagnosed.  To avoid the warning when
           the result is not expected to be NUL-terminated, call "memcpy"
           instead.

                   void copy (char *d, const char *s)
                   {
                     strncpy (d, s, strlen (s));
                   }

           In the following example, the call to "strncpy" specifies the size
           of the destination buffer as the bound.  If the length of the
           source string is equal to or greater than this size the result of
           the copy will not be NUL-terminated.  Therefore, the call is also
           diagnosed.  To avoid the warning, specify "sizeof buf - 1" as the
           bound and set the last element of the buffer to "NUL".

                   void copy (const char *s)
                   {
                     char buf[80];
                     strncpy (buf, s, sizeof buf);
                     ...
                   }

           In situations where a character array is intended to store a
           sequence of bytes with no terminating "NUL" such an array may be
           annotated with attribute "nonstring" to avoid this warning.  Such
           arrays, however, are not suitable arguments to functions that
           expect "NUL"-terminated strings.  To help detect accidental misuses
           of such arrays GCC issues warnings unless it can prove that the use
           is safe.

           Option --WWssttrriinnggoopp--ttrruunnccaattiioonn is enabled by --WWaallll.

       --WWssuuggggeesstt--aattttrriibbuuttee==[ppuurree|ccoonnsstt|nnoorreettuurrnn|ffoorrmmaatt|ccoolldd|mmaalllloocc]
           Warn for cases where adding an attribute may be beneficial. The
           attributes currently supported are listed below.

           --WWssuuggggeesstt--aattttrriibbuuttee==ppuurree
           --WWssuuggggeesstt--aattttrriibbuuttee==ccoonnsstt
           --WWssuuggggeesstt--aattttrriibbuuttee==nnoorreettuurrnn
           --WWssuuggggeesstt--aattttrriibbuuttee==mmaalllloocc
               Warn about functions that might be candidates for attributes
               "pure", "const" or "noreturn" or "malloc". The compiler only
               warns for functions visible in other compilation units or (in
               the case of "pure" and "const") if it cannot prove that the
               function returns normally. A function returns normally if it
               doesn't contain an infinite loop or return abnormally by
               throwing, calling "abort" or trapping.  This analysis requires
               option --ffiippaa--ppuurree--ccoonnsstt, which is enabled by default at --OO and
               higher.  Higher optimization levels improve the accuracy of the
               analysis.

           --WWssuuggggeesstt--aattttrriibbuuttee==ffoorrmmaatt
           --WWmmiissssiinngg--ffoorrmmaatt--aattttrriibbuuttee
               Warn about function pointers that might be candidates for
               "format" attributes.  Note these are only possible candidates,
               not absolute ones.  GCC guesses that function pointers with
               "format" attributes that are used in assignment,
               initialization, parameter passing or return statements should
               have a corresponding "format" attribute in the resulting type.
               I.e. the left-hand side of the assignment or initialization,
               the type of the parameter variable, or the return type of the
               containing function respectively should also have a "format"
               attribute to avoid the warning.

               GCC also warns about function definitions that might be
               candidates for "format" attributes.  Again, these are only
               possible candidates.  GCC guesses that "format" attributes
               might be appropriate for any function that calls a function
               like "vprintf" or "vscanf", but this might not always be the
               case, and some functions for which "format" attributes are
               appropriate may not be detected.

           --WWssuuggggeesstt--aattttrriibbuuttee==ccoolldd
               Warn about functions that might be candidates for "cold"
               attribute.  This is based on static detection and generally
               will only warn about functions which always leads to a call to
               another "cold" function such as wrappers of C++ "throw" or
               fatal error reporting functions leading to "abort".

       --WWssuuggggeesstt--ffiinnaall--ttyyppeess
           Warn about types with virtual methods where code quality would be
           improved if the type were declared with the C++11 "final"
           specifier, or, if possible, declared in an anonymous namespace.
           This allows GCC to more aggressively devirtualize the polymorphic
           calls. This warning is more effective with link time optimization,
           where the information about the class hierarchy graph is more
           complete.

       --WWssuuggggeesstt--ffiinnaall--mmeetthhooddss
           Warn about virtual methods where code quality would be improved if
           the method were declared with the C++11 "final" specifier, or, if
           possible, its type were declared in an anonymous namespace or with
           the "final" specifier.  This warning is more effective with link-
           time optimization, where the information about the class hierarchy
           graph is more complete. It is recommended to first consider
           suggestions of --WWssuuggggeesstt--ffiinnaall--ttyyppeess and then rebuild with new
           annotations.

       --WWssuuggggeesstt--oovveerrrriiddee
           Warn about overriding virtual functions that are not marked with
           the override keyword.

       --WWaalllloocc--zzeerroo
           Warn about calls to allocation functions decorated with attribute
           "alloc_size" that specify zero bytes, including those to the built-
           in forms of the functions "aligned_alloc", "alloca", "calloc",
           "malloc", and "realloc".  Because the behavior of these functions
           when called with a zero size differs among implementations (and in
           the case of "realloc" has been deprecated) relying on it may result
           in subtle portability bugs and should be avoided.

       --WWaalllloocc--ssiizzee--llaarrggeerr--tthhaann==_n
           Warn about calls to functions decorated with attribute "alloc_size"
           that attempt to allocate objects larger than the specified number
           of bytes, or where the result of the size computation in an integer
           type with infinite precision would exceed "SIZE_MAX / 2".  The
           option argument _n may end in one of the standard suffixes
           designating a multiple of bytes such as "kB" and "KiB" for kilobyte
           and kibibyte, respectively, "MB" and "MiB" for megabyte and
           mebibyte, and so on.  --WWaalllloocc--ssiizzee--llaarrggeerr--tthhaann==_P_T_R_D_I_F_F___M_A_X is
           enabled by default.  Warnings controlled by the option can be
           disabled by specifying _n of _S_I_Z_E___M_A_X or more.

       --WWaallllooccaa
           This option warns on all uses of "alloca" in the source.

       --WWaallllooccaa--llaarrggeerr--tthhaann==_n
           This option warns on calls to "alloca" that are not bounded by a
           controlling predicate limiting its argument of integer type to at
           most _n bytes, or calls to "alloca" where the bound is unknown.
           Arguments of non-integer types are considered unbounded even if
           they appear to be constrained to the expected range.

           For example, a bounded case of "alloca" could be:

                   void func (size_t n)
                   {
                     void *p;
                     if (n <= 1000)
                       p = alloca (n);
                     else
                       p = malloc (n);
                     f (p);
                   }

           In the above example, passing "-Walloca-larger-than=1000" would not
           issue a warning because the call to "alloca" is known to be at most
           1000 bytes.  However, if "-Walloca-larger-than=500" were passed,
           the compiler would emit a warning.

           Unbounded uses, on the other hand, are uses of "alloca" with no
           controlling predicate constraining its integer argument.  For
           example:

                   void func ()
                   {
                     void *p = alloca (n);
                     f (p);
                   }

           If "-Walloca-larger-than=500" were passed, the above would trigger
           a warning, but this time because of the lack of bounds checking.

           Note, that even seemingly correct code involving signed integers
           could cause a warning:

                   void func (signed int n)
                   {
                     if (n < 500)
                       {
                         p = alloca (n);
                         f (p);
                       }
                   }

           In the above example, _n could be negative, causing a larger than
           expected argument to be implicitly cast into the "alloca" call.

           This option also warns when "alloca" is used in a loop.

           This warning is not enabled by --WWaallll, and is only active when
           --ffttrreeee--vvrrpp is active (default for --OO22 and above).

           See also --WWvvllaa--llaarrggeerr--tthhaann==_n.

       --WWaarrrraayy--bboouunnddss
       --WWaarrrraayy--bboouunnddss==_n
           This option is only active when --ffttrreeee--vvrrpp is active (default for
           --OO22 and above). It warns about subscripts to arrays that are always
           out of bounds. This warning is enabled by --WWaallll.

           --WWaarrrraayy--bboouunnddss==11
               This is the warning level of --WWaarrrraayy--bboouunnddss and is enabled by
               --WWaallll; higher levels are not, and must be explicitly requested.

           --WWaarrrraayy--bboouunnddss==22
               This warning level also warns about out of bounds access for
               arrays at the end of a struct and for arrays accessed through
               pointers. This warning level may give a larger number of false
               positives and is deactivated by default.

       --WWaattttrriibbuuttee--aalliiaass
           Warn about declarations using the "alias" and similar attributes
           whose target is incompatible with the type of the alias.

       --WWbbooooll--ccoommppaarree
           Warn about boolean expression compared with an integer value
           different from "true"/"false".  For instance, the following
           comparison is always false:

                   int n = 5;
                   ...
                   if ((n > 1) == 2) { ... }

           This warning is enabled by --WWaallll.

       --WWbbooooll--ooppeerraattiioonn
           Warn about suspicious operations on expressions of a boolean type.
           For instance, bitwise negation of a boolean is very likely a bug in
           the program.  For C, this warning also warns about incrementing or
           decrementing a boolean, which rarely makes sense.  (In C++,
           decrementing a boolean is always invalid.  Incrementing a boolean
           is invalid in C++17, and deprecated otherwise.)

           This warning is enabled by --WWaallll.

       --WWdduupplliiccaatteedd--bbrraanncchheess
           Warn when an if-else has identical branches.  This warning detects
           cases like

                   if (p != NULL)
                     return 0;
                   else
                     return 0;

           It doesn't warn when both branches contain just a null statement.
           This warning also warn for conditional operators:

                     int i = x ? *p : *p;

       --WWdduupplliiccaatteedd--ccoonndd
           Warn about duplicated conditions in an if-else-if chain.  For
           instance, warn for the following code:

                   if (p->q != NULL) { ... }
                   else if (p->q != NULL) { ... }

       --WWffrraammee--aaddddrreessss
           Warn when the ____bbuuiillttiinn__ffrraammee__aaddddrreessss or ____bbuuiillttiinn__rreettuurrnn__aaddddrreessss
           is called with an argument greater than 0.  Such calls may return
           indeterminate values or crash the program.  The warning is included
           in --WWaallll.

       --WWnnoo--ddiissccaarrddeedd--qquuaalliiffiieerrss (C and Objective-C only)
           Do not warn if type qualifiers on pointers are being discarded.
           Typically, the compiler warns if a "const char *" variable is
           passed to a function that takes a "char *" parameter.  This option
           can be used to suppress such a warning.

       --WWnnoo--ddiissccaarrddeedd--aarrrraayy--qquuaalliiffiieerrss (C and Objective-C only)
           Do not warn if type qualifiers on arrays which are pointer targets
           are being discarded. Typically, the compiler warns if a "const int
           (*)[]" variable is passed to a function that takes a "int (*)[]"
           parameter.  This option can be used to suppress such a warning.

       --WWnnoo--iinnccoommppaattiibbllee--ppooiinntteerr--ttyyppeess (C and Objective-C only)
           Do not warn when there is a conversion between pointers that have
           incompatible types.  This warning is for cases not covered by
           --WWnnoo--ppooiinntteerr--ssiiggnn, which warns for pointer argument passing or
           assignment with different signedness.

       --WWnnoo--iinntt--ccoonnvveerrssiioonn (C and Objective-C only)
           Do not warn about incompatible integer to pointer and pointer to
           integer conversions.  This warning is about implicit conversions;
           for explicit conversions the warnings --WWnnoo--iinntt--ttoo--ppooiinntteerr--ccaasstt and
           --WWnnoo--ppooiinntteerr--ttoo--iinntt--ccaasstt may be used.

       --WWnnoo--ddiivv--bbyy--zzeerroo
           Do not warn about compile-time integer division by zero.  Floating-
           point division by zero is not warned about, as it can be a
           legitimate way of obtaining infinities and NaNs.

       --WWssyysstteemm--hheeaaddeerrss
           Print warning messages for constructs found in system header files.
           Warnings from system headers are normally suppressed, on the
           assumption that they usually do not indicate real problems and
           would only make the compiler output harder to read.  Using this
           command-line option tells GCC to emit warnings from system headers
           as if they occurred in user code.  However, note that using --WWaallll
           in conjunction with this option does _n_o_t warn about unknown pragmas
           in system headers---for that, --WWuunnkknnoowwnn--pprraaggmmaass must also be used.

       --WWttaauuttoollooggiiccaall--ccoommppaarree
           Warn if a self-comparison always evaluates to true or false.  This
           warning detects various mistakes such as:

                   int i = 1;
                   ...
                   if (i > i) { ... }

           This warning also warns about bitwise comparisons that always
           evaluate to true or false, for instance:

                   if ((a & 16) == 10) { ... }

           will always be false.

           This warning is enabled by --WWaallll.

       --WWttrraammppoolliinneess
           Warn about trampolines generated for pointers to nested functions.
           A trampoline is a small piece of data or code that is created at
           run time on the stack when the address of a nested function is
           taken, and is used to call the nested function indirectly.  For
           some targets, it is made up of data only and thus requires no
           special treatment.  But, for most targets, it is made up of code
           and thus requires the stack to be made executable in order for the
           program to work properly.

       --WWffllooaatt--eeqquuaall
           Warn if floating-point values are used in equality comparisons.

           The idea behind this is that sometimes it is convenient (for the
           programmer) to consider floating-point values as approximations to
           infinitely precise real numbers.  If you are doing this, then you
           need to compute (by analyzing the code, or in some other way) the
           maximum or likely maximum error that the computation introduces,
           and allow for it when performing comparisons (and when producing
           output, but that's a different problem).  In particular, instead of
           testing for equality, you should check to see whether the two
           values have ranges that overlap; and this is done with the
           relational operators, so equality comparisons are probably
           mistaken.

       --WWttrraaddiittiioonnaall (C and Objective-C only)
           Warn about certain constructs that behave differently in
           traditional and ISO C.  Also warn about ISO C constructs that have
           no traditional C equivalent, and/or problematic constructs that
           should be avoided.

           *   Macro parameters that appear within string literals in the
               macro body.  In traditional C macro replacement takes place
               within string literals, but in ISO C it does not.

           *   In traditional C, some preprocessor directives did not exist.
               Traditional preprocessors only considered a line to be a
               directive if the ## appeared in column 1 on the line.  Therefore
               --WWttrraaddiittiioonnaall warns about directives that traditional C
               understands but ignores because the ## does not appear as the
               first character on the line.  It also suggests you hide
               directives like "#pragma" not understood by traditional C by
               indenting them.  Some traditional implementations do not
               recognize "#elif", so this option suggests avoiding it
               altogether.

           *   A function-like macro that appears without arguments.

           *   The unary plus operator.

           *   The UU integer constant suffix, or the FF or LL floating-point
               constant suffixes.  (Traditional C does support the LL suffix on
               integer constants.)  Note, these suffixes appear in macros
               defined in the system headers of most modern systems, e.g. the
               __MMIINN/__MMAAXX macros in "<limits.h>".  Use of these macros in user
               code might normally lead to spurious warnings, however GCC's
               integrated preprocessor has enough context to avoid warning in
               these cases.

           *   A function declared external in one block and then used after
               the end of the block.

           *   A "switch" statement has an operand of type "long".

           *   A non-"static" function declaration follows a "static" one.
               This construct is not accepted by some traditional C compilers.

           *   The ISO type of an integer constant has a different width or
               signedness from its traditional type.  This warning is only
               issued if the base of the constant is ten.  I.e. hexadecimal or
               octal values, which typically represent bit patterns, are not
               warned about.

           *   Usage of ISO string concatenation is detected.

           *   Initialization of automatic aggregates.

           *   Identifier conflicts with labels.  Traditional C lacks a
               separate namespace for labels.

           *   Initialization of unions.  If the initializer is zero, the
               warning is omitted.  This is done under the assumption that the
               zero initializer in user code appears conditioned on e.g.
               "__STDC__" to avoid missing initializer warnings and relies on
               default initialization to zero in the traditional C case.

           *   Conversions by prototypes between fixed/floating-point values
               and vice versa.  The absence of these prototypes when compiling
               with traditional C causes serious problems.  This is a subset
               of the possible conversion warnings; for the full set use
               --WWttrraaddiittiioonnaall--ccoonnvveerrssiioonn.

           *   Use of ISO C style function definitions.  This warning
               intentionally is _n_o_t issued for prototype declarations or
               variadic functions because these ISO C features appear in your
               code when using libiberty's traditional C compatibility macros,
               "PARAMS" and "VPARAMS".  This warning is also bypassed for
               nested functions because that feature is already a GCC
               extension and thus not relevant to traditional C compatibility.

       --WWttrraaddiittiioonnaall--ccoonnvveerrssiioonn (C and Objective-C only)
           Warn if a prototype causes a type conversion that is different from
           what would happen to the same argument in the absence of a
           prototype.  This includes conversions of fixed point to floating
           and vice versa, and conversions changing the width or signedness of
           a fixed-point argument except when the same as the default
           promotion.

       --WWddeeccllaarraattiioonn--aafftteerr--ssttaatteemmeenntt (C and Objective-C only)
           Warn when a declaration is found after a statement in a block.
           This construct, known from C++, was introduced with ISO C99 and is
           by default allowed in GCC.  It is not supported by ISO C90.

       --WWsshhaaddooww
           Warn whenever a local variable or type declaration shadows another
           variable, parameter, type, class member (in C++), or instance
           variable (in Objective-C) or whenever a built-in function is
           shadowed. Note that in C++, the compiler warns if a local variable
           shadows an explicit typedef, but not if it shadows a
           struct/class/enum.  Same as --WWsshhaaddooww==gglloobbaall.

       --WWnnoo--sshhaaddooww--iivvaarr (Objective-C only)
           Do not warn whenever a local variable shadows an instance variable
           in an Objective-C method.

       --WWsshhaaddooww==gglloobbaall
           The default for --WWsshhaaddooww. Warns for any (global) shadowing.

       --WWsshhaaddooww==llooccaall
           Warn when a local variable shadows another local variable or
           parameter.  This warning is enabled by --WWsshhaaddooww==gglloobbaall.

       --WWsshhaaddooww==ccoommppaattiibbllee--llooccaall
           Warn when a local variable shadows another local variable or
           parameter whose type is compatible with that of the shadowing
           variable. In C++, type compatibility here means the type of the
           shadowing variable can be converted to that of the shadowed
           variable. The creation of this flag (in addition to --WWsshhaaddooww==llooccaall)
           is based on the idea that when a local variable shadows another one
           of incompatible type, it is most likely intentional, not a bug or
           typo, as shown in the following example:

                   for (SomeIterator i = SomeObj.begin(); i != SomeObj.end(); ++i)
                   {
                     for (int i = 0; i < N; ++i)
                     {
                       ...
                     }
                     ...
                   }

           Since the two variable "i" in the example above have incompatible
           types, enabling only --WWsshhaaddooww==ccoommppaattiibbllee--llooccaall will not emit a
           warning.  Because their types are incompatible, if a programmer
           accidentally uses one in place of the other, type checking will
           catch that and emit an error or warning. So not warning (about
           shadowing) in this case will not lead to undetected bugs. Use of
           this flag instead of --WWsshhaaddooww==llooccaall can possibly reduce the number
           of warnings triggered by intentional shadowing.

           This warning is enabled by --WWsshhaaddooww==llooccaall.

       --WWllaarrggeerr--tthhaann==_l_e_n
           Warn whenever an object of larger than _l_e_n bytes is defined.

       --WWffrraammee--llaarrggeerr--tthhaann==_l_e_n
           Warn if the size of a function frame is larger than _l_e_n bytes.  The
           computation done to determine the stack frame size is approximate
           and not conservative.  The actual requirements may be somewhat
           greater than _l_e_n even if you do not get a warning.  In addition,
           any space allocated via "alloca", variable-length arrays, or
           related constructs is not included by the compiler when determining
           whether or not to issue a warning.

       --WWnnoo--ffrreeee--nnoonnhheeaapp--oobbjjeecctt
           Do not warn when attempting to free an object that was not
           allocated on the heap.

       --WWssttaacckk--uussaaggee==_l_e_n
           Warn if the stack usage of a function might be larger than _l_e_n
           bytes.  The computation done to determine the stack usage is
           conservative.  Any space allocated via "alloca", variable-length
           arrays, or related constructs is included by the compiler when
           determining whether or not to issue a warning.

           The message is in keeping with the output of --ffssttaacckk--uussaaggee.

           *   If the stack usage is fully static but exceeds the specified
               amount, it's:

                         warning: stack usage is 1120 bytes

           *   If the stack usage is (partly) dynamic but bounded, it's:

                         warning: stack usage might be 1648 bytes

           *   If the stack usage is (partly) dynamic and not bounded, it's:

                         warning: stack usage might be unbounded

       --WWnnoo--ppeeddaannttiicc--mmss--ffoorrmmaatt (MinGW targets only)
           When used in combination with --WWffoorrmmaatt and --ppeeddaannttiicc without GNU
           extensions, this option disables the warnings about non-ISO
           "printf" / "scanf" format width specifiers "I32", "I64", and "I"
           used on Windows targets, which depend on the MS runtime.

       --WWaalliiggnneedd--nneeww
           Warn about a new-expression of a type that requires greater
           alignment than the "alignof(std::max_align_t)" but uses an
           allocation function without an explicit alignment parameter. This
           option is enabled by --WWaallll.

           Normally this only warns about global allocation functions, but
           --WWaalliiggnneedd--nneeww==aallll also warns about class member allocation
           functions.

       --WWppllaacceemmeenntt--nneeww
       --WWppllaacceemmeenntt--nneeww==_n
           Warn about placement new expressions with undefined behavior, such
           as constructing an object in a buffer that is smaller than the type
           of the object.  For example, the placement new expression below is
           diagnosed because it attempts to construct an array of 64 integers
           in a buffer only 64 bytes large.

                   char buf [64];
                   new (buf) int[64];

           This warning is enabled by default.

           --WWppllaacceemmeenntt--nneeww==11
               This is the default warning level of --WWppllaacceemmeenntt--nneeww.  At this
               level the warning is not issued for some strictly undefined
               constructs that GCC allows as extensions for compatibility with
               legacy code.  For example, the following "new" expression is
               not diagnosed at this level even though it has undefined
               behavior according to the C++ standard because it writes past
               the end of the one-element array.

                       struct S { int n, a[1]; };
                       S *s = (S *)malloc (sizeof *s + 31 * sizeof s->a[0]);
                       new (s->a)int [32]();

           --WWppllaacceemmeenntt--nneeww==22
               At this level, in addition to diagnosing all the same
               constructs as at level 1, a diagnostic is also issued for
               placement new expressions that construct an object in the last
               member of structure whose type is an array of a single element
               and whose size is less than the size of the object being
               constructed.  While the previous example would be diagnosed,
               the following construct makes use of the flexible member array
               extension to avoid the warning at level 2.

                       struct S { int n, a[]; };
                       S *s = (S *)malloc (sizeof *s + 32 * sizeof s->a[0]);
                       new (s->a)int [32]();

       --WWppooiinntteerr--aarriitthh
           Warn about anything that depends on the "size of" a function type
           or of "void".  GNU C assigns these types a size of 1, for
           convenience in calculations with "void *" pointers and pointers to
           functions.  In C++, warn also when an arithmetic operation involves
           "NULL".  This warning is also enabled by --WWppeeddaannttiicc.

       --WWppooiinntteerr--ccoommppaarree
           Warn if a pointer is compared with a zero character constant.  This
           usually means that the pointer was meant to be dereferenced.  For
           example:

                   const char *p = foo ();
                   if (p == '\0')
                     return 42;

           Note that the code above is invalid in C++11.

           This warning is enabled by default.

       --WWttyyppee--lliimmiittss
           Warn if a comparison is always true or always false due to the
           limited range of the data type, but do not warn for constant
           expressions.  For example, warn if an unsigned variable is compared
           against zero with "<" or ">=".  This warning is also enabled by
           --WWeexxttrraa.

       --WWccoommmmeenntt
       --WWccoommmmeennttss
           Warn whenever a comment-start sequence //** appears in a //** comment,
           or whenever a backslash-newline appears in a //// comment.  This
           warning is enabled by --WWaallll.

       --WWttrriiggrraapphhss
           Warn if any trigraphs are encountered that might change the meaning
           of the program.  Trigraphs within comments are not warned about,
           except those that would form escaped newlines.

           This option is implied by --WWaallll.  If --WWaallll is not given, this
           option is still enabled unless trigraphs are enabled.  To get
           trigraph conversion without warnings, but get the other --WWaallll
           warnings, use --ttrriiggrraapphhss --WWaallll --WWnnoo--ttrriiggrraapphhss.

       --WWuunnddeeff
           Warn if an undefined identifier is evaluated in an "#if" directive.
           Such identifiers are replaced with zero.

       --WWeexxppaannssiioonn--ttoo--ddeeffiinneedd
           Warn whenever ddeeffiinneedd is encountered in the expansion of a macro
           (including the case where the macro is expanded by an ##iiff
           directive).  Such usage is not portable.  This warning is also
           enabled by --WWppeeddaannttiicc and --WWeexxttrraa.

       --WWuunnuusseedd--mmaaccrrooss
           Warn about macros defined in the main file that are unused.  A
           macro is _u_s_e_d if it is expanded or tested for existence at least
           once.  The preprocessor also warns if the macro has not been used
           at the time it is redefined or undefined.

           Built-in macros, macros defined on the command line, and macros
           defined in include files are not warned about.

           _N_o_t_e_: If a macro is actually used, but only used in skipped
           conditional blocks, then the preprocessor reports it as unused.  To
           avoid the warning in such a case, you might improve the scope of
           the macro's definition by, for example, moving it into the first
           skipped block.  Alternatively, you could provide a dummy use with
           something like:

                   #if defined the_macro_causing_the_warning
                   #endif

       --WWnnoo--eennddiiff--llaabbeellss
           Do not warn whenever an "#else" or an "#endif" are followed by
           text.  This sometimes happens in older programs with code of the
           form

                   #if FOO
                   ...
                   #else FOO
                   ...
                   #endif FOO

           The second and third "FOO" should be in comments.  This warning is
           on by default.

       --WWbbaadd--ffuunnccttiioonn--ccaasstt (C and Objective-C only)
           Warn when a function call is cast to a non-matching type.  For
           example, warn if a call to a function returning an integer type is
           cast to a pointer type.

       --WWcc9900--cc9999--ccoommppaatt (C and Objective-C only)
           Warn about features not present in ISO C90, but present in ISO C99.
           For instance, warn about use of variable length arrays, "long long"
           type, "bool" type, compound literals, designated initializers, and
           so on.  This option is independent of the standards mode.  Warnings
           are disabled in the expression that follows "__extension__".

       --WWcc9999--cc1111--ccoommppaatt (C and Objective-C only)
           Warn about features not present in ISO C99, but present in ISO C11.
           For instance, warn about use of anonymous structures and unions,
           "_Atomic" type qualifier, "_Thread_local" storage-class specifier,
           "_Alignas" specifier, "Alignof" operator, "_Generic" keyword, and
           so on.  This option is independent of the standards mode.  Warnings
           are disabled in the expression that follows "__extension__".

       --WWcc++++--ccoommppaatt (C and Objective-C only)
           Warn about ISO C constructs that are outside of the common subset
           of ISO C and ISO C++, e.g. request for implicit conversion from
           "void *" to a pointer to non-"void" type.

       --WWcc++++1111--ccoommppaatt (C++ and Objective-C++ only)
           Warn about C++ constructs whose meaning differs between ISO C++
           1998 and ISO C++ 2011, e.g., identifiers in ISO C++ 1998 that are
           keywords in ISO C++ 2011.  This warning turns on --WWnnaarrrroowwiinngg and is
           enabled by --WWaallll.

       --WWcc++++1144--ccoommppaatt (C++ and Objective-C++ only)
           Warn about C++ constructs whose meaning differs between ISO C++
           2011 and ISO C++ 2014.  This warning is enabled by --WWaallll.

       --WWcc++++1177--ccoommppaatt (C++ and Objective-C++ only)
           Warn about C++ constructs whose meaning differs between ISO C++
           2014 and ISO C++ 2017.  This warning is enabled by --WWaallll.

       --WWccaasstt--qquuaall
           Warn whenever a pointer is cast so as to remove a type qualifier
           from the target type.  For example, warn if a "const char *" is
           cast to an ordinary "char *".

           Also warn when making a cast that introduces a type qualifier in an
           unsafe way.  For example, casting "char **" to "const char **" is
           unsafe, as in this example:

                     /* p is char ** value.  */
                     const char **q = (const char **) p;
                     /* Assignment of readonly string to const char * is OK.  */
                     *q = "string";
                     /* Now char** pointer points to read-only memory.  */
                     **p = 'b';

       --WWccaasstt--aalliiggnn
           Warn whenever a pointer is cast such that the required alignment of
           the target is increased.  For example, warn if a "char *" is cast
           to an "int *" on machines where integers can only be accessed at
           two- or four-byte boundaries.

       --WWccaasstt--aalliiggnn==ssttrriicctt
           Warn whenever a pointer is cast such that the required alignment of
           the target is increased.  For example, warn if a "char *" is cast
           to an "int *" regardless of the target machine.

       --WWccaasstt--ffuunnccttiioonn--ttyyppee
           Warn when a function pointer is cast to an incompatible function
           pointer.  In a cast involving function types with a variable
           argument list only the types of initial arguments that are provided
           are considered.  Any parameter of pointer-type matches any other
           pointer-type.  Any benign differences in integral types are
           ignored, like "int" vs. "long" on ILP32 targets.  Likewise type
           qualifiers are ignored.  The function type "void (*) (void)" is
           special and matches everything, which can be used to suppress this
           warning.  In a cast involving pointer to member types this warning
           warns whenever the type cast is changing the pointer to member
           type.  This warning is enabled by --WWeexxttrraa.

       --WWwwrriittee--ssttrriinnggss
           When compiling C, give string constants the type "const
           char[_l_e_n_g_t_h_]_" so that copying the address of one into a non-"const"
           "char *" pointer produces a warning.  These warnings help you find
           at compile time code that can try to write into a string constant,
           but only if you have been very careful about using "const" in
           declarations and prototypes.  Otherwise, it is just a nuisance.
           This is why we did not make --WWaallll request these warnings.

           When compiling C++, warn about the deprecated conversion from
           string literals to "char *".  This warning is enabled by default
           for C++ programs.

       --WWccaattcchh--vvaalluuee
       --WWccaattcchh--vvaalluuee==_n (C++ and Objective-C++ only)
           Warn about catch handlers that do not catch via reference.  With
           --WWccaattcchh--vvaalluuee==11 (or --WWccaattcchh--vvaalluuee for short) warn about polymorphic
           class types that are caught by value.  With --WWccaattcchh--vvaalluuee==22 warn
           about all class types that are caught by value. With
           --WWccaattcchh--vvaalluuee==33 warn about all types that are not caught by
           reference. --WWccaattcchh--vvaalluuee is enabled by --WWaallll.

       --WWcclloobbbbeerreedd
           Warn for variables that might be changed by "longjmp" or "vfork".
           This warning is also enabled by --WWeexxttrraa.

       --WWccoonnddiittiioonnaallllyy--ssuuppppoorrtteedd (C++ and Objective-C++ only)
           Warn for conditionally-supported (C++11 [intro.defs]) constructs.

       --WWccoonnvveerrssiioonn
           Warn for implicit conversions that may alter a value. This includes
           conversions between real and integer, like "abs (x)" when "x" is
           "double"; conversions between signed and unsigned, like "unsigned
           ui = -1"; and conversions to smaller types, like "sqrtf (M_PI)". Do
           not warn for explicit casts like "abs ((int) x)" and "ui =
           (unsigned) -1", or if the value is not changed by the conversion
           like in "abs (2.0)".  Warnings about conversions between signed and
           unsigned integers can be disabled by using --WWnnoo--ssiiggnn--ccoonnvveerrssiioonn.

           For C++, also warn for confusing overload resolution for user-
           defined conversions; and conversions that never use a type
           conversion operator: conversions to "void", the same type, a base
           class or a reference to them. Warnings about conversions between
           signed and unsigned integers are disabled by default in C++ unless
           --WWssiiggnn--ccoonnvveerrssiioonn is explicitly enabled.

       --WWnnoo--ccoonnvveerrssiioonn--nnuullll (C++ and Objective-C++ only)
           Do not warn for conversions between "NULL" and non-pointer types.
           --WWccoonnvveerrssiioonn--nnuullll is enabled by default.

       --WWzzeerroo--aass--nnuullll--ppooiinntteerr--ccoonnssttaanntt (C++ and Objective-C++ only)
           Warn when a literal 00 is used as null pointer constant.  This can
           be useful to facilitate the conversion to "nullptr" in C++11.

       --WWssuubboobbjjeecctt--lliinnkkaaggee (C++ and Objective-C++ only)
           Warn if a class type has a base or a field whose type uses the
           anonymous namespace or depends on a type with no linkage.  If a
           type A depends on a type B with no or internal linkage, defining it
           in multiple translation units would be an ODR violation because the
           meaning of B is different in each translation unit.  If A only
           appears in a single translation unit, the best way to silence the
           warning is to give it internal linkage by putting it in an
           anonymous namespace as well.  The compiler doesn't give this
           warning for types defined in the main .C file, as those are
           unlikely to have multiple definitions.  --WWssuubboobbjjeecctt--lliinnkkaaggee is
           enabled by default.

       --WWddaanngglliinngg--eellssee
           Warn about constructions where there may be confusion to which "if"
           statement an "else" branch belongs.  Here is an example of such a
           case:

                   {
                     if (a)
                       if (b)
                         foo ();
                     else
                       bar ();
                   }

           In C/C++, every "else" branch belongs to the innermost possible
           "if" statement, which in this example is "if (b)".  This is often
           not what the programmer expected, as illustrated in the above
           example by indentation the programmer chose.  When there is the
           potential for this confusion, GCC issues a warning when this flag
           is specified.  To eliminate the warning, add explicit braces around
           the innermost "if" statement so there is no way the "else" can
           belong to the enclosing "if".  The resulting code looks like this:

                   {
                     if (a)
                       {
                         if (b)
                           foo ();
                         else
                           bar ();
                       }
                   }

           This warning is enabled by --WWppaarreenntthheesseess.

       --WWddaattee--ttiimmee
           Warn when macros "__TIME__", "__DATE__" or "__TIMESTAMP__" are
           encountered as they might prevent bit-wise-identical reproducible
           compilations.

       --WWddeelleettee--iinnccoommpplleettee (C++ and Objective-C++ only)
           Warn when deleting a pointer to incomplete type, which may cause
           undefined behavior at runtime.  This warning is enabled by default.

       --WWuusseelleessss--ccaasstt (C++ and Objective-C++ only)
           Warn when an expression is casted to its own type.

       --WWeemmppttyy--bbooddyy
           Warn if an empty body occurs in an "if", "else" or "do while"
           statement.  This warning is also enabled by --WWeexxttrraa.

       --WWeennuumm--ccoommppaarree
           Warn about a comparison between values of different enumerated
           types.  In C++ enumerated type mismatches in conditional
           expressions are also diagnosed and the warning is enabled by
           default.  In C this warning is enabled by --WWaallll.

       --WWeexxttrraa--sseemmii (C++, Objective-C++ only)
           Warn about redundant semicolon after in-class function definition.

       --WWjjuummpp--mmiisssseess--iinniitt (C, Objective-C only)
           Warn if a "goto" statement or a "switch" statement jumps forward
           across the initialization of a variable, or jumps backward to a
           label after the variable has been initialized.  This only warns
           about variables that are initialized when they are declared.  This
           warning is only supported for C and Objective-C; in C++ this sort
           of branch is an error in any case.

           --WWjjuummpp--mmiisssseess--iinniitt is included in --WWcc++++--ccoommppaatt.  It can be disabled
           with the --WWnnoo--jjuummpp--mmiisssseess--iinniitt option.

       --WWssiiggnn--ccoommppaarree
           Warn when a comparison between signed and unsigned values could
           produce an incorrect result when the signed value is converted to
           unsigned.  In C++, this warning is also enabled by --WWaallll.  In C, it
           is also enabled by --WWeexxttrraa.

       --WWssiiggnn--ccoonnvveerrssiioonn
           Warn for implicit conversions that may change the sign of an
           integer value, like assigning a signed integer expression to an
           unsigned integer variable. An explicit cast silences the warning.
           In C, this option is enabled also by --WWccoonnvveerrssiioonn.

       --WWffllooaatt--ccoonnvveerrssiioonn
           Warn for implicit conversions that reduce the precision of a real
           value.  This includes conversions from real to integer, and from
           higher precision real to lower precision real values.  This option
           is also enabled by --WWccoonnvveerrssiioonn.

       --WWnnoo--ssccaallaarr--ssttoorraaggee--oorrddeerr
           Do not warn on suspicious constructs involving reverse scalar
           storage order.

       --WWssiizzeedd--ddeeaallllooccaattiioonn (C++ and Objective-C++ only)
           Warn about a definition of an unsized deallocation function

                   void operator delete (void *) noexcept;
                   void operator delete[] (void *) noexcept;

           without a definition of the corresponding sized deallocation
           function

                   void operator delete (void *, std::size_t) noexcept;
                   void operator delete[] (void *, std::size_t) noexcept;

           or vice versa.  Enabled by --WWeexxttrraa along with --ffssiizzeedd--ddeeaallllooccaattiioonn.

       --WWssiizzeeooff--ppooiinntteerr--ddiivv
           Warn for suspicious divisions of two sizeof expressions that divide
           the pointer size by the element size, which is the usual way to
           compute the array size but won't work out correctly with pointers.
           This warning warns e.g. about "sizeof (ptr) / sizeof (ptr[0])" if
           "ptr" is not an array, but a pointer.  This warning is enabled by
           --WWaallll.

       --WWssiizzeeooff--ppooiinntteerr--mmeemmaacccceessss
           Warn for suspicious length parameters to certain string and memory
           built-in functions if the argument uses "sizeof".  This warning
           triggers for example for "memset (ptr, 0, sizeof (ptr));" if "ptr"
           is not an array, but a pointer, and suggests a possible fix, or
           about "memcpy (&foo, ptr, sizeof (&foo));".
           --WWssiizzeeooff--ppooiinntteerr--mmeemmaacccceessss also warns about calls to bounded string
           copy functions like "strncat" or "strncpy" that specify as the
           bound a "sizeof" expression of the source array.  For example, in
           the following function the call to "strncat" specifies the size of
           the source string as the bound.  That is almost certainly a mistake
           and so the call is diagnosed.

                   void make_file (const char *name)
                   {
                     char path[PATH_MAX];
                     strncpy (path, name, sizeof path - 1);
                     strncat (path, ".text", sizeof ".text");
                     ...
                   }

           The --WWssiizzeeooff--ppooiinntteerr--mmeemmaacccceessss option is enabled by --WWaallll.

       --WWssiizzeeooff--aarrrraayy--aarrgguummeenntt
           Warn when the "sizeof" operator is applied to a parameter that is
           declared as an array in a function definition.  This warning is
           enabled by default for C and C++ programs.

       --WWmmeemmsseett--eelltt--ssiizzee
           Warn for suspicious calls to the "memset" built-in function, if the
           first argument references an array, and the third argument is a
           number equal to the number of elements, but not equal to the size
           of the array in memory.  This indicates that the user has omitted a
           multiplication by the element size.  This warning is enabled by
           --WWaallll.

       --WWmmeemmsseett--ttrraannssppoosseedd--aarrggss
           Warn for suspicious calls to the "memset" built-in function, if the
           second argument is not zero and the third argument is zero.  This
           warns e.g.@ about "memset (buf, sizeof buf, 0)" where most probably
           "memset (buf, 0, sizeof buf)" was meant instead.  The diagnostics
           is only emitted if the third argument is literal zero.  If it is
           some expression that is folded to zero, a cast of zero to some
           type, etc., it is far less likely that the user has mistakenly
           exchanged the arguments and no warning is emitted.  This warning is
           enabled by --WWaallll.

       --WWaaddddrreessss
           Warn about suspicious uses of memory addresses. These include using
           the address of a function in a conditional expression, such as
           "void func(void); if (func)", and comparisons against the memory
           address of a string literal, such as "if (x == "abc")".  Such uses
           typically indicate a programmer error: the address of a function
           always evaluates to true, so their use in a conditional usually
           indicate that the programmer forgot the parentheses in a function
           call; and comparisons against string literals result in unspecified
           behavior and are not portable in C, so they usually indicate that
           the programmer intended to use "strcmp".  This warning is enabled
           by --WWaallll.

       --WWllooggiiccaall--oopp
           Warn about suspicious uses of logical operators in expressions.
           This includes using logical operators in contexts where a bit-wise
           operator is likely to be expected.  Also warns when the operands of
           a logical operator are the same:

                   extern int a;
                   if (a < 0 && a < 0) { ... }

       --WWllooggiiccaall--nnoott--ppaarreenntthheesseess
           Warn about logical not used on the left hand side operand of a
           comparison.  This option does not warn if the right operand is
           considered to be a boolean expression.  Its purpose is to detect
           suspicious code like the following:

                   int a;
                   ...
                   if (!a > 1) { ... }

           It is possible to suppress the warning by wrapping the LHS into
           parentheses:

                   if ((!a) > 1) { ... }

           This warning is enabled by --WWaallll.

       --WWaaggggrreeggaattee--rreettuurrnn
           Warn if any functions that return structures or unions are defined
           or called.  (In languages where you can return an array, this also
           elicits a warning.)

       --WWnnoo--aaggggrreessssiivvee--lloooopp--ooppttiimmiizzaattiioonnss
           Warn if in a loop with constant number of iterations the compiler
           detects undefined behavior in some statement during one or more of
           the iterations.

       --WWnnoo--aattttrriibbuutteess
           Do not warn if an unexpected "__attribute__" is used, such as
           unrecognized attributes, function attributes applied to variables,
           etc.  This does not stop errors for incorrect use of supported
           attributes.

       --WWnnoo--bbuuiillttiinn--ddeeccllaarraattiioonn--mmiissmmaattcchh
           Warn if a built-in function is declared with the wrong signature or
           as non-function.  This warning is enabled by default.

       --WWnnoo--bbuuiillttiinn--mmaaccrroo--rreeddeeffiinneedd
           Do not warn if certain built-in macros are redefined.  This
           suppresses warnings for redefinition of "__TIMESTAMP__",
           "__TIME__", "__DATE__", "__FILE__", and "__BASE_FILE__".

       --WWssttrriicctt--pprroottoottyyppeess (C and Objective-C only)
           Warn if a function is declared or defined without specifying the
           argument types.  (An old-style function definition is permitted
           without a warning if preceded by a declaration that specifies the
           argument types.)

       --WWoolldd--ssttyyllee--ddeeccllaarraattiioonn (C and Objective-C only)
           Warn for obsolescent usages, according to the C Standard, in a
           declaration. For example, warn if storage-class specifiers like
           "static" are not the first things in a declaration.  This warning
           is also enabled by --WWeexxttrraa.

       --WWoolldd--ssttyyllee--ddeeffiinniittiioonn (C and Objective-C only)
           Warn if an old-style function definition is used.  A warning is
           given even if there is a previous prototype.

       --WWmmiissssiinngg--ppaarraammeetteerr--ttyyppee (C and Objective-C only)
           A function parameter is declared without a type specifier in
           K&R-style functions:

                   void foo(bar) { }

           This warning is also enabled by --WWeexxttrraa.

       --WWmmiissssiinngg--pprroottoottyyppeess (C and Objective-C only)
           Warn if a global function is defined without a previous prototype
           declaration.  This warning is issued even if the definition itself
           provides a prototype.  Use this option to detect global functions
           that do not have a matching prototype declaration in a header file.
           This option is not valid for C++ because all function declarations
           provide prototypes and a non-matching declaration declares an
           overload rather than conflict with an earlier declaration.  Use
           --WWmmiissssiinngg--ddeeccllaarraattiioonnss to detect missing declarations in C++.

       --WWmmiissssiinngg--ddeeccllaarraattiioonnss
           Warn if a global function is defined without a previous
           declaration.  Do so even if the definition itself provides a
           prototype.  Use this option to detect global functions that are not
           declared in header files.  In C, no warnings are issued for
           functions with previous non-prototype declarations; use
           --WWmmiissssiinngg--pprroottoottyyppeess to detect missing prototypes.  In C++, no
           warnings are issued for function templates, or for inline
           functions, or for functions in anonymous namespaces.

       --WWmmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss
           Warn if a structure's initializer has some fields missing.  For
           example, the following code causes such a warning, because "x.h" is
           implicitly zero:

                   struct s { int f, g, h; };
                   struct s x = { 3, 4 };

           This option does not warn about designated initializers, so the
           following modification does not trigger a warning:

                   struct s { int f, g, h; };
                   struct s x = { .f = 3, .g = 4 };

           In C this option does not warn about the universal zero initializer
           {{ 00 }}:

                   struct s { int f, g, h; };
                   struct s x = { 0 };

           Likewise, in C++ this option does not warn about the empty { }
           initializer, for example:

                   struct s { int f, g, h; };
                   s x = { };

           This warning is included in --WWeexxttrraa.  To get other --WWeexxttrraa warnings
           without this one, use --WWeexxttrraa --WWnnoo--mmiissssiinngg--ffiieelldd--iinniittiiaalliizzeerrss.

       --WWnnoo--mmuullttiicchhaarr
           Do not warn if a multicharacter constant (''FFOOOOFF'') is used.  Usually
           they indicate a typo in the user's code, as they have
           implementation-defined values, and should not be used in portable
           code.

       --WWnnoorrmmaalliizzeedd==[nnoonnee|iidd|nnffcc|nnffkkcc]
           In ISO C and ISO C++, two identifiers are different if they are
           different sequences of characters.  However, sometimes when
           characters outside the basic ASCII character set are used, you can
           have two different character sequences that look the same.  To
           avoid confusion, the ISO 10646 standard sets out some _n_o_r_m_a_l_i_z_a_t_i_o_n
           _r_u_l_e_s which when applied ensure that two sequences that look the
           same are turned into the same sequence.  GCC can warn you if you
           are using identifiers that have not been normalized; this option
           controls that warning.

           There are four levels of warning supported by GCC.  The default is
           --WWnnoorrmmaalliizzeedd==nnffcc, which warns about any identifier that is not in
           the ISO 10646 "C" normalized form, _N_F_C.  NFC is the recommended
           form for most uses.  It is equivalent to --WWnnoorrmmaalliizzeedd.

           Unfortunately, there are some characters allowed in identifiers by
           ISO C and ISO C++ that, when turned into NFC, are not allowed in
           identifiers.  That is, there's no way to use these symbols in
           portable ISO C or C++ and have all your identifiers in NFC.
           --WWnnoorrmmaalliizzeedd==iidd suppresses the warning for these characters.  It is
           hoped that future versions of the standards involved will correct
           this, which is why this option is not the default.

           You can switch the warning off for all characters by writing
           --WWnnoorrmmaalliizzeedd==nnoonnee or --WWnnoo--nnoorrmmaalliizzeedd.  You should only do this if
           you are using some other normalization scheme (like "D"), because
           otherwise you can easily create bugs that are literally impossible
           to see.

           Some characters in ISO 10646 have distinct meanings but look
           identical in some fonts or display methodologies, especially once
           formatting has been applied.  For instance "\u207F", "SUPERSCRIPT
           LATIN SMALL LETTER N", displays just like a regular "n" that has
           been placed in a superscript.  ISO 10646 defines the _N_F_K_C
           normalization scheme to convert all these into a standard form as
           well, and GCC warns if your code is not in NFKC if you use
           --WWnnoorrmmaalliizzeedd==nnffkkcc.  This warning is comparable to warning about
           every identifier that contains the letter O because it might be
           confused with the digit 0, and so is not the default, but may be
           useful as a local coding convention if the programming environment
           cannot be fixed to display these characters distinctly.

       --WWnnoo--ddeepprreeccaatteedd
           Do not warn about usage of deprecated features.

       --WWnnoo--ddeepprreeccaatteedd--ddeeccllaarraattiioonnss
           Do not warn about uses of functions, variables, and types marked as
           deprecated by using the "deprecated" attribute.

       --WWnnoo--oovveerrffllooww
           Do not warn about compile-time overflow in constant expressions.

       --WWnnoo--ooddrr
           Warn about One Definition Rule violations during link-time
           optimization.  Requires --ffllttoo--ooddrr--ttyyppee--mmeerrggiinngg to be enabled.
           Enabled by default.

       --WWooppeennmmpp--ssiimmdd
           Warn if the vectorizer cost model overrides the OpenMP simd
           directive set by user.  The --ffssiimmdd--ccoosstt--mmooddeell==uunnlliimmiitteedd option can
           be used to relax the cost model.

       --WWoovveerrrriiddee--iinniitt (C and Objective-C only)
           Warn if an initialized field without side effects is overridden
           when using designated initializers.

           This warning is included in --WWeexxttrraa.  To get other --WWeexxttrraa warnings
           without this one, use --WWeexxttrraa --WWnnoo--oovveerrrriiddee--iinniitt.

       --WWoovveerrrriiddee--iinniitt--ssiiddee--eeffffeeccttss (C and Objective-C only)
           Warn if an initialized field with side effects is overridden when
           using designated initializers.  This warning is enabled by default.

       --WWppaacckkeedd
           Warn if a structure is given the packed attribute, but the packed
           attribute has no effect on the layout or size of the structure.
           Such structures may be mis-aligned for little benefit.  For
           instance, in this code, the variable "f.x" in "struct bar" is
           misaligned even though "struct bar" does not itself have the packed
           attribute:

                   struct foo {
                     int x;
                     char a, b, c, d;
                   } __attribute__((packed));
                   struct bar {
                     char z;
                     struct foo f;
                   };

       --WWppaacckkeedd--bbiittffiieelldd--ccoommppaatt
           The 4.1, 4.2 and 4.3 series of GCC ignore the "packed" attribute on
           bit-fields of type "char".  This has been fixed in GCC 4.4 but the
           change can lead to differences in the structure layout.  GCC
           informs you when the offset of such a field has changed in GCC 4.4.
           For example there is no longer a 4-bit padding between field "a"
           and "b" in this structure:

                   struct foo
                   {
                     char a:4;
                     char b:8;
                   } __attribute__ ((packed));

           This warning is enabled by default.  Use
           --WWnnoo--ppaacckkeedd--bbiittffiieelldd--ccoommppaatt to disable this warning.

       --WWppaacckkeedd--nnoott--aalliiggnneedd (C, C++, Objective-C and Objective-C++ only)
           Warn if a structure field with explicitly specified alignment in a
           packed struct or union is misaligned.  For example, a warning will
           be issued on "struct S", like, "warning: alignment 1 of 'struct S'
           is less than 8", in this code:

                   struct __attribute__ ((aligned (8))) S8 { char a[8]; };
                   struct __attribute__ ((packed)) S {
                     struct S8 s8;
                   };

           This warning is enabled by --WWaallll.

       --WWppaaddddeedd
           Warn if padding is included in a structure, either to align an
           element of the structure or to align the whole structure.
           Sometimes when this happens it is possible to rearrange the fields
           of the structure to reduce the padding and so make the structure
           smaller.

       --WWrreedduunnddaanntt--ddeeccllss
           Warn if anything is declared more than once in the same scope, even
           in cases where multiple declaration is valid and changes nothing.

       --WWnnoo--rreessttrriicctt
           Warn when an object referenced by a "restrict"-qualified parameter
           (or, in C++, a "__restrict"-qualified parameter) is aliased by
           another argument, or when copies between such objects overlap.  For
           example, the call to the "strcpy" function below attempts to
           truncate the string by replacing its initial characters with the
           last four.  However, because the call writes the terminating NUL
           into "a[4]", the copies overlap and the call is diagnosed.

                   void foo (void)
                   {
                     char a[] = "abcd1234";
                     strcpy (a, a + 4);
                     ...
                   }

           The --WWrreessttrriicctt option detects some instances of simple overlap even
           without optimization but works best at --OO22 and above.  It is
           included in --WWaallll.

       --WWnneesstteedd--eexxtteerrnnss (C and Objective-C only)
           Warn if an "extern" declaration is encountered within a function.

       --WWnnoo--iinnhheerriitteedd--vvaarriiaaddiicc--ccttoorr
           Suppress warnings about use of C++11 inheriting constructors when
           the base class inherited from has a C variadic constructor; the
           warning is on by default because the ellipsis is not inherited.

       --WWiinnlliinnee
           Warn if a function that is declared as inline cannot be inlined.
           Even with this option, the compiler does not warn about failures to
           inline functions declared in system headers.

           The compiler uses a variety of heuristics to determine whether or
           not to inline a function.  For example, the compiler takes into
           account the size of the function being inlined and the amount of
           inlining that has already been done in the current function.
           Therefore, seemingly insignificant changes in the source program
           can cause the warnings produced by --WWiinnlliinnee to appear or disappear.

       --WWnnoo--iinnvvaalliidd--ooffffsseettooff (C++ and Objective-C++ only)
           Suppress warnings from applying the "offsetof" macro to a non-POD
           type.  According to the 2014 ISO C++ standard, applying "offsetof"
           to a non-standard-layout type is undefined.  In existing C++
           implementations, however, "offsetof" typically gives meaningful
           results.  This flag is for users who are aware that they are
           writing nonportable code and who have deliberately chosen to ignore
           the warning about it.

           The restrictions on "offsetof" may be relaxed in a future version
           of the C++ standard.

       --WWiinntt--iinn--bbooooll--ccoonntteexxtt
           Warn for suspicious use of integer values where boolean values are
           expected, such as conditional expressions (?:) using non-boolean
           integer constants in boolean context, like "if (a <= b ? 2 : 3)".
           Or left shifting of signed integers in boolean context, like "for
           (a = 0; 1 << a; a++);".  Likewise for all kinds of multiplications
           regardless of the data type.  This warning is enabled by --WWaallll.

       --WWnnoo--iinntt--ttoo--ppooiinntteerr--ccaasstt
           Suppress warnings from casts to pointer type of an integer of a
           different size. In C++, casting to a pointer type of smaller size
           is an error. WWiinntt--ttoo--ppooiinntteerr--ccaasstt is enabled by default.

       --WWnnoo--ppooiinntteerr--ttoo--iinntt--ccaasstt (C and Objective-C only)
           Suppress warnings from casts from a pointer to an integer type of a
           different size.

       --WWiinnvvaalliidd--ppcchh
           Warn if a precompiled header is found in the search path but cannot
           be used.

       --WWlloonngg--lloonngg
           Warn if "long long" type is used.  This is enabled by either
           --WWppeeddaannttiicc or --WWttrraaddiittiioonnaall in ISO C90 and C++98 modes.  To inhibit
           the warning messages, use --WWnnoo--lloonngg--lloonngg.

       --WWvvaarriiaaddiicc--mmaaccrrooss
           Warn if variadic macros are used in ISO C90 mode, or if the GNU
           alternate syntax is used in ISO C99 mode.  This is enabled by
           either --WWppeeddaannttiicc or --WWttrraaddiittiioonnaall.  To inhibit the warning
           messages, use --WWnnoo--vvaarriiaaddiicc--mmaaccrrooss.

       --WWvvaarraarrggss
           Warn upon questionable usage of the macros used to handle variable
           arguments like "va_start".  This is default.  To inhibit the
           warning messages, use --WWnnoo--vvaarraarrggss.

       --WWvveeccttoorr--ooppeerraattiioonn--ppeerrffoorrmmaannccee
           Warn if vector operation is not implemented via SIMD capabilities
           of the architecture.  Mainly useful for the performance tuning.
           Vector operation can be implemented "piecewise", which means that
           the scalar operation is performed on every vector element; "in
           parallel", which means that the vector operation is implemented
           using scalars of wider type, which normally is more performance
           efficient; and "as a single scalar", which means that vector fits
           into a scalar type.

       --WWnnoo--vviirrttuuaall--mmoovvee--aassssiiggnn
           Suppress warnings about inheriting from a virtual base with a non-
           trivial C++11 move assignment operator.  This is dangerous because
           if the virtual base is reachable along more than one path, it is
           moved multiple times, which can mean both objects end up in the
           moved-from state.  If the move assignment operator is written to
           avoid moving from a moved-from object, this warning can be
           disabled.

       --WWvvllaa
           Warn if a variable-length array is used in the code.  --WWnnoo--vvllaa
           prevents the --WWppeeddaannttiicc warning of the variable-length array.

       --WWvvllaa--llaarrggeerr--tthhaann==_n
           If this option is used, the compiler will warn on uses of variable-
           length arrays where the size is either unbounded, or bounded by an
           argument that can be larger than _n bytes.  This is similar to how
           --WWaallllooccaa--llaarrggeerr--tthhaann==_n works, but with variable-length arrays.

           Note that GCC may optimize small variable-length arrays of a known
           value into plain arrays, so this warning may not get triggered for
           such arrays.

           This warning is not enabled by --WWaallll, and is only active when
           --ffttrreeee--vvrrpp is active (default for --OO22 and above).

           See also --WWaallllooccaa--llaarrggeerr--tthhaann==_n.

       --WWvvoollaattiillee--rreeggiisstteerr--vvaarr
           Warn if a register variable is declared volatile.  The volatile
           modifier does not inhibit all optimizations that may eliminate
           reads and/or writes to register variables.  This warning is enabled
           by --WWaallll.

       --WWddiissaabblleedd--ooppttiimmiizzaattiioonn
           Warn if a requested optimization pass is disabled.  This warning
           does not generally indicate that there is anything wrong with your
           code; it merely indicates that GCC's optimizers are unable to
           handle the code effectively.  Often, the problem is that your code
           is too big or too complex; GCC refuses to optimize programs when
           the optimization itself is likely to take inordinate amounts of
           time.

       --WWppooiinntteerr--ssiiggnn (C and Objective-C only)
           Warn for pointer argument passing or assignment with different
           signedness.  This option is only supported for C and Objective-C.
           It is implied by --WWaallll and by --WWppeeddaannttiicc, which can be disabled
           with --WWnnoo--ppooiinntteerr--ssiiggnn.

       --WWssttaacckk--pprrootteeccttoorr
           This option is only active when --ffssttaacckk--pprrootteeccttoorr is active.  It
           warns about functions that are not protected against stack
           smashing.

       --WWoovveerrlleennggtthh--ssttrriinnggss
           Warn about string constants that are longer than the "minimum
           maximum" length specified in the C standard.  Modern compilers
           generally allow string constants that are much longer than the
           standard's minimum limit, but very portable programs should avoid
           using longer strings.

           The limit applies _a_f_t_e_r string constant concatenation, and does not
           count the trailing NUL.  In C90, the limit was 509 characters; in
           C99, it was raised to 4095.  C++98 does not specify a normative
           minimum maximum, so we do not diagnose overlength strings in C++.

           This option is implied by --WWppeeddaannttiicc, and can be disabled with
           --WWnnoo--oovveerrlleennggtthh--ssttrriinnggss.

       --WWuunnssuuffffiixxeedd--ffllooaatt--ccoonnssttaannttss (C and Objective-C only)
           Issue a warning for any floating constant that does not have a
           suffix.  When used together with --WWssyysstteemm--hheeaaddeerrss it warns about
           such constants in system header files.  This can be useful when
           preparing code to use with the "FLOAT_CONST_DECIMAL64" pragma from
           the decimal floating-point extension to C99.

       --WWnnoo--ddeessiiggnnaatteedd--iinniitt (C and Objective-C only)
           Suppress warnings when a positional initializer is used to
           initialize a structure that has been marked with the
           "designated_init" attribute.

       --WWhhssaa
           Issue a warning when HSAIL cannot be emitted for the compiled
           function or OpenMP construct.

   OOppttiioonnss ffoorr DDeebbuuggggiinngg YYoouurr PPrrooggrraamm
       To tell GCC to emit extra information for use by a debugger, in almost
       all cases you need only to add --gg to your other options.

       GCC allows you to use --gg with --OO.  The shortcuts taken by optimized
       code may occasionally be surprising: some variables you declared may
       not exist at all; flow of control may briefly move where you did not
       expect it; some statements may not be executed because they compute
       constant results or their values are already at hand; some statements
       may execute in different places because they have been moved out of
       loops.  Nevertheless it is possible to debug optimized output.  This
       makes it reasonable to use the optimizer for programs that might have
       bugs.

       If you are not using some other optimization option, consider using --OOgg
       with --gg.  With no --OO option at all, some compiler passes that collect
       information useful for debugging do not run at all, so that --OOgg may
       result in a better debugging experience.

       --gg  Produce debugging information in the operating system's native
           format (stabs, COFF, XCOFF, or DWARF).  GDB can work with this
           debugging information.

           On most systems that use stabs format, --gg enables use of extra
           debugging information that only GDB can use; this extra information
           makes debugging work better in GDB but probably makes other
           debuggers crash or refuse to read the program.  If you want to
           control for certain whether to generate the extra information, use
           --ggssttaabbss++, --ggssttaabbss, --ggxxccooffff++, --ggxxccooffff, or --ggvvmmss (see below).

       --ggggddbb
           Produce debugging information for use by GDB.  This means to use
           the most expressive format available (DWARF, stabs, or the native
           format if neither of those are supported), including GDB extensions
           if at all possible.

       --ggddwwaarrff
       --ggddwwaarrff--_v_e_r_s_i_o_n
           Produce debugging information in DWARF format (if that is
           supported).  The value of _v_e_r_s_i_o_n may be either 2, 3, 4 or 5; the
           default version for most targets is 4.  DWARF Version 5 is only
           experimental.

           Note that with DWARF Version 2, some ports require and always use
           some non-conflicting DWARF 3 extensions in the unwind tables.

           Version 4 may require GDB 7.0 and --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss for
           maximum benefit.

           GCC no longer supports DWARF Version 1, which is substantially
           different than Version 2 and later.  For historical reasons, some
           other DWARF-related options such as --ffnnoo--ddwwaarrff22--ccffii--aassmm) retain a
           reference to DWARF Version 2 in their names, but apply to all
           currently-supported versions of DWARF.

       --ggssttaabbss
           Produce debugging information in stabs format (if that is
           supported), without GDB extensions.  This is the format used by DBX
           on most BSD systems.  On MIPS, Alpha and System V Release 4 systems
           this option produces stabs debugging output that is not understood
           by DBX.  On System V Release 4 systems this option requires the GNU
           assembler.

       --ggssttaabbss++
           Produce debugging information in stabs format (if that is
           supported), using GNU extensions understood only by the GNU
           debugger (GDB).  The use of these extensions is likely to make
           other debuggers crash or refuse to read the program.

       --ggxxccooffff
           Produce debugging information in XCOFF format (if that is
           supported).  This is the format used by the DBX debugger on IBM
           RS/6000 systems.

       --ggxxccooffff++
           Produce debugging information in XCOFF format (if that is
           supported), using GNU extensions understood only by the GNU
           debugger (GDB).  The use of these extensions is likely to make
           other debuggers crash or refuse to read the program, and may cause
           assemblers other than the GNU assembler (GAS) to fail with an
           error.

       --ggvvmmss
           Produce debugging information in Alpha/VMS debug format (if that is
           supported).  This is the format used by DEBUG on Alpha/VMS systems.

       --gg_l_e_v_e_l
       --ggggddbb_l_e_v_e_l
       --ggssttaabbss_l_e_v_e_l
       --ggxxccooffff_l_e_v_e_l
       --ggvvmmss_l_e_v_e_l
           Request debugging information and also use _l_e_v_e_l to specify how
           much information.  The default level is 2.

           Level 0 produces no debug information at all.  Thus, --gg00 negates
           --gg.

           Level 1 produces minimal information, enough for making backtraces
           in parts of the program that you don't plan to debug.  This
           includes descriptions of functions and external variables, and line
           number tables, but no information about local variables.

           Level 3 includes extra information, such as all the macro
           definitions present in the program.  Some debuggers support macro
           expansion when you use --gg33.

           --ggddwwaarrff does not accept a concatenated debug level, to avoid
           confusion with --ggddwwaarrff--_l_e_v_e_l.  Instead use an additional --gg_l_e_v_e_l
           option to change the debug level for DWARF.

       --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ssyymmbboollss
           Produce debugging information in stabs format (if that is
           supported), for only symbols that are actually used.

       --ffeemmiitt--ccllaassss--ddeebbuugg--aallwwaayyss
           Instead of emitting debugging information for a C++ class in only
           one object file, emit it in all object files using the class.  This
           option should be used only with debuggers that are unable to handle
           the way GCC normally emits debugging information for classes
           because using this option increases the size of debugging
           information by as much as a factor of two.

       --ffnnoo--mmeerrggee--ddeebbuugg--ssttrriinnggss
           Direct the linker to not merge together strings in the debugging
           information that are identical in different object files.  Merging
           is not supported by all assemblers or linkers.  Merging decreases
           the size of the debug information in the output file at the cost of
           increasing link processing time.  Merging is enabled by default.

       --ffddeebbuugg--pprreeffiixx--mmaapp==_o_l_d==_n_e_w
           When compiling files residing in directory _o_l_d, record debugging
           information describing them as if the files resided in directory
           _n_e_w instead.  This can be used to replace a build-time path with an
           install-time path in the debug info.  It can also be used to change
           an absolute path to a relative path by using _. for _n_e_w.  This can
           give more reproducible builds, which are location independent, but
           may require an extra command to tell GDB where to find the source
           files. See also --ffffiillee--pprreeffiixx--mmaapp.

       --ffvvaarr--ttrraacckkiinngg
           Run variable tracking pass.  It computes where variables are stored
           at each position in code.  Better debugging information is then
           generated (if the debugging information format supports this
           information).

           It is enabled by default when compiling with optimization (--OOss, --OO,
           --OO22, ...), debugging information (--gg) and the debug info format
           supports it.

       --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss
           Annotate assignments to user variables early in the compilation and
           attempt to carry the annotations over throughout the compilation
           all the way to the end, in an attempt to improve debug information
           while optimizing.  Use of --ggddwwaarrff--44 is recommended along with it.

           It can be enabled even if var-tracking is disabled, in which case
           annotations are created and maintained, but discarded at the end.
           By default, this flag is enabled together with --ffvvaarr--ttrraacckkiinngg,
           except when selective scheduling is enabled.

       --ggsspplliitt--ddwwaarrff
           Separate as much DWARF debugging information as possible into a
           separate output file with the extension _._d_w_o.  This option allows
           the build system to avoid linking files with debug information.  To
           be useful, this option requires a debugger capable of reading _._d_w_o
           files.

       --ggppuubbnnaammeess
           Generate DWARF ".debug_pubnames" and ".debug_pubtypes" sections.

       --ggggnnuu--ppuubbnnaammeess
           Generate ".debug_pubnames" and ".debug_pubtypes" sections in a
           format suitable for conversion into a GDB index.  This option is
           only useful with a linker that can produce GDB index version 7.

       --ffddeebbuugg--ttyyppeess--sseeccttiioonn
           When using DWARF Version 4 or higher, type DIEs can be put into
           their own ".debug_types" section instead of making them part of the
           ".debug_info" section.  It is more efficient to put them in a
           separate comdat sections since the linker can then remove
           duplicates.  But not all DWARF consumers support ".debug_types"
           sections yet and on some objects ".debug_types" produces larger
           instead of smaller debugging information.

       --ggrreeccoorrdd--ggcccc--sswwiittcchheess
       --ggnnoo--rreeccoorrdd--ggcccc--sswwiittcchheess
           This switch causes the command-line options used to invoke the
           compiler that may affect code generation to be appended to the
           DW_AT_producer attribute in DWARF debugging information.  The
           options are concatenated with spaces separating them from each
           other and from the compiler version.  It is enabled by default.
           See also --ffrreeccoorrdd--ggcccc--sswwiittcchheess for another way of storing compiler
           options into the object file.

       --ggssttrriicctt--ddwwaarrff
           Disallow using extensions of later DWARF standard version than
           selected with --ggddwwaarrff--_v_e_r_s_i_o_n.  On most targets using non-
           conflicting DWARF extensions from later standard versions is
           allowed.

       --ggnnoo--ssttrriicctt--ddwwaarrff
           Allow using extensions of later DWARF standard version than
           selected with --ggddwwaarrff--_v_e_r_s_i_o_n.

       --ggaass--lloocc--ssuuppppoorrtt
           Inform the compiler that the assembler supports ".loc" directives.
           It may then use them for the assembler to generate DWARF2+ line
           number tables.

           This is generally desirable, because assembler-generated line-
           number tables are a lot more compact than those the compiler can
           generate itself.

           This option will be enabled by default if, at GCC configure time,
           the assembler was found to support such directives.

       --ggnnoo--aass--lloocc--ssuuppppoorrtt
           Force GCC to generate DWARF2+ line number tables internally, if
           DWARF2+ line number tables are to be generated.

       ggaass--llooccvviieeww--ssuuppppoorrtt
           Inform the compiler that the assembler supports "view" assignment
           and reset assertion checking in ".loc" directives.

           This option will be enabled by default if, at GCC configure time,
           the assembler was found to support them.

       ggnnoo--aass--llooccvviieeww--ssuuppppoorrtt
           Force GCC to assign view numbers internally, if
           --ggvvaarriiaabbllee--llooccaattiioonn--vviieewwss are explicitly requested.

       --ggccoolluummnn--iinnffoo
       --ggnnoo--ccoolluummnn--iinnffoo
           Emit location column information into DWARF debugging information,
           rather than just file and line.  This option is enabled by default.

       --ggssttaatteemmeenntt--ffrroonnttiieerrss
       --ggnnoo--ssttaatteemmeenntt--ffrroonnttiieerrss
           This option causes GCC to create markers in the internal
           representation at the beginning of statements, and to keep them
           roughly in place throughout compilation, using them to guide the
           output of "is_stmt" markers in the line number table.  This is
           enabled by default when compiling with optimization (--OOss, --OO, --OO22,
           ...), and outputting DWARF 2 debug information at the normal level.

       --ggvvaarriiaabbllee--llooccaattiioonn--vviieewwss
       --ggvvaarriiaabbllee--llooccaattiioonn--vviieewwss==iinnccoommppaatt55
       --ggnnoo--vvaarriiaabbllee--llooccaattiioonn--vviieewwss
           Augment variable location lists with progressive view numbers
           implied from the line number table.  This enables debug information
           consumers to inspect state at certain points of the program, even
           if no instructions associated with the corresponding source
           locations are present at that point.  If the assembler lacks
           support for view numbers in line number tables, this will cause the
           compiler to emit the line number table, which generally makes them
           somewhat less compact.  The augmented line number tables and
           location lists are fully backward-compatible, so they can be
           consumed by debug information consumers that are not aware of these
           augmentations, but they won't derive any benefit from them either.

           This is enabled by default when outputting DWARF 2 debug
           information at the normal level, as long as there is assembler
           support, --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss is enabled and --ggssttrriicctt--ddwwaarrff
           is not.  When assembler support is not available, this may still be
           enabled, but it will force GCC to output internal line number
           tables, and if --ggiinntteerrnnaall--rreesseett--llooccaattiioonn--vviieewwss is not enabled, that
           will most certainly lead to silently mismatching location views.

           There is a proposed representation for view numbers that is not
           backward compatible with the location list format introduced in
           DWARF 5, that can be enabled with
           --ggvvaarriiaabbllee--llooccaattiioonn--vviieewwss==iinnccoommppaatt55.  This option may be removed in
           the future, is only provided as a reference implementation of the
           proposed representation.  Debug information consumers are not
           expected to support this extended format, and they would be
           rendered unable to decode location lists using it.

       --ggiinntteerrnnaall--rreesseett--llooccaattiioonn--vviieewwss
       --ggnnooiinntteerrnnaall--rreesseett--llooccaattiioonn--vviieewwss
           Attempt to determine location views that can be omitted from
           location view lists.  This requires the compiler to have very
           accurate insn length estimates, which isn't always the case, and it
           may cause incorrect view lists to be generated silently when using
           an assembler that does not support location view lists.  The GNU
           assembler will flag any such error as a "view number mismatch".
           This is only enabled on ports that define a reliable estimation
           function.

       --ggiinnlliinnee--ppooiinnttss
       --ggnnoo--iinnlliinnee--ppooiinnttss
           Generate extended debug information for inlined functions.
           Location view tracking markers are inserted at inlined entry
           points, so that address and view numbers can be computed and output
           in debug information.  This can be enabled independently of
           location views, in which case the view numbers won't be output, but
           it can only be enabled along with statement frontiers, and it is
           only enabled by default if location views are enabled.

       --ggzz[==_t_y_p_e]
           Produce compressed debug sections in DWARF format, if that is
           supported.  If _t_y_p_e is not given, the default type depends on the
           capabilities of the assembler and linker used.  _t_y_p_e may be one of
           nnoonnee (don't compress debug sections), zzlliibb (use zlib compression in
           ELF gABI format), or zzlliibb--ggnnuu (use zlib compression in traditional
           GNU format).  If the linker doesn't support writing compressed
           debug sections, the option is rejected.  Otherwise, if the
           assembler does not support them, --ggzz is silently ignored when
           producing object files.

       --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy
           Emit debug information for struct-like types only when the base
           name of the compilation source file matches the base name of file
           in which the struct is defined.

           This option substantially reduces the size of debugging
           information, but at significant potential loss in type information
           to the debugger.  See --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd for a less
           aggressive option.  See --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd for more
           detailed control.

           This option works only with DWARF debug output.

       --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd
           Emit debug information for struct-like types only when the base
           name of the compilation source file matches the base name of file
           in which the type is defined, unless the struct is a template or
           defined in a system header.

           This option significantly reduces the size of debugging
           information, with some potential loss in type information to the
           debugger.  See --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy for a more aggressive
           option.  See --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd for more detailed
           control.

           This option works only with DWARF debug output.

       --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd[==_s_p_e_c_-_l_i_s_t]
           Specify the struct-like types for which the compiler generates
           debug information.  The intent is to reduce duplicate struct debug
           information between different object files within the same program.

           This option is a detailed version of --ffeemmiitt--ssttrruucctt--ddeebbuugg--rreedduucceedd
           and --ffeemmiitt--ssttrruucctt--ddeebbuugg--bbaasseeoonnllyy, which serves for most needs.

           A specification has the
           syntax[ddiirr::|iinndd::][oorrdd::|ggeenn::](aannyy|ssyyss|bbaassee|nnoonnee)

           The optional first word limits the specification to structs that
           are used directly (ddiirr::) or used indirectly (iinndd::).  A struct type
           is used directly when it is the type of a variable, member.
           Indirect uses arise through pointers to structs.  That is, when use
           of an incomplete struct is valid, the use is indirect.  An example
           is ssttrruucctt oonnee ddiirreecctt;; ssttrruucctt ttwwoo ** iinnddiirreecctt;;.

           The optional second word limits the specification to ordinary
           structs (oorrdd::) or generic structs (ggeenn::).  Generic structs are a
           bit complicated to explain.  For C++, these are non-explicit
           specializations of template classes, or non-template classes within
           the above.  Other programming languages have generics, but
           --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd does not yet implement them.

           The third word specifies the source files for those structs for
           which the compiler should emit debug information.  The values nnoonnee
           and aannyy have the normal meaning.  The value bbaassee means that the
           base of name of the file in which the type declaration appears must
           match the base of the name of the main compilation file.  In
           practice, this means that when compiling _f_o_o_._c, debug information
           is generated for types declared in that file and _f_o_o_._h, but not
           other header files.  The value ssyyss means those types satisfying
           bbaassee or declared in system or compiler headers.

           You may need to experiment to determine the best settings for your
           application.

           The default is --ffeemmiitt--ssttrruucctt--ddeebbuugg--ddeettaaiilleedd==aallll.

           This option works only with DWARF debug output.

       --ffnnoo--ddwwaarrff22--ccffii--aassmm
           Emit DWARF unwind info as compiler generated ".eh_frame" section
           instead of using GAS ".cfi_*" directives.

       --ffnnoo--eelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ttyyppeess
           Normally, when producing DWARF output, GCC avoids producing debug
           symbol output for types that are nowhere used in the source file
           being compiled.  Sometimes it is useful to have GCC emit debugging
           information for all types declared in a compilation unit,
           regardless of whether or not they are actually used in that
           compilation unit, for example if, in the debugger, you want to cast
           a value to a type that is not actually used in your program (but is
           declared).  More often, however, this results in a significant
           amount of wasted space.

   OOppttiioonnss TThhaatt CCoonnttrrooll OOppttiimmiizzaattiioonn
       These options control various sorts of optimizations.

       Without any optimization option, the compiler's goal is to reduce the
       cost of compilation and to make debugging produce the expected results.
       Statements are independent: if you stop the program with a breakpoint
       between statements, you can then assign a new value to any variable or
       change the program counter to any other statement in the function and
       get exactly the results you expect from the source code.

       Turning on optimization flags makes the compiler attempt to improve the
       performance and/or code size at the expense of compilation time and
       possibly the ability to debug the program.

       The compiler performs optimization based on the knowledge it has of the
       program.  Compiling multiple files at once to a single output file mode
       allows the compiler to use information gained from all of the files
       when compiling each of them.

       Not all optimizations are controlled directly by a flag.  Only
       optimizations that have a flag are listed in this section.

       Most optimizations are only enabled if an --OO level is set on the
       command line.  Otherwise they are disabled, even if individual
       optimization flags are specified.

       Depending on the target and how GCC was configured, a slightly
       different set of optimizations may be enabled at each --OO level than
       those listed here.  You can invoke GCC with --QQ ----hheellpp==ooppttiimmiizzeerrss to
       find out the exact set of optimizations that are enabled at each level.

       --OO
       --OO11 Optimize.  Optimizing compilation takes somewhat more time, and a
           lot more memory for a large function.

           With --OO, the compiler tries to reduce code size and execution time,
           without performing any optimizations that take a great deal of
           compilation time.

           --OO turns on the following optimization flags:

           --ffaauuttoo--iinncc--ddeecc --ffbbrraanncchh--ccoouunntt--rreegg --ffccoommbbiinnee--ssttaacckk--aaddjjuussttmmeennttss
           --ffccoommppaarree--eelliimm --ffccpprroopp--rreeggiisstteerrss --ffddccee --ffddeeffeerr--ppoopp --ffddeellaayyeedd--bbrraanncchh
           --ffddssee --ffffoorrwwaarrdd--pprrooppaaggaattee --ffgguueessss--bbrraanncchh--pprroobbaabbiilliittyy
           --ffiiff--ccoonnvveerrssiioonn22 --ffiiff--ccoonnvveerrssiioonn --ffiinnlliinnee--ffuunnccttiioonnss--ccaalllleedd--oonnccee
           --ffiippaa--ppuurree--ccoonnsstt --ffiippaa--pprrooffiillee --ffiippaa--rreeffeerreennccee --ffmmeerrggee--ccoonnssttaannttss
           --ffmmoovvee--lloooopp--iinnvvaarriiaannttss --ffoommiitt--ffrraammee--ppooiinntteerr --ffrreeoorrddeerr--bblloocckkss
           --ffsshhrriinnkk--wwrraapp --ffsshhrriinnkk--wwrraapp--sseeppaarraattee --ffsspplliitt--wwiiddee--ttyyppeess
           --ffssssaa--bbaacckkpprroopp --ffssssaa--pphhiioopptt --ffttrreeee--bbiitt--ccccpp --ffttrreeee--ccccpp --ffttrreeee--cchh
           --ffttrreeee--ccooaalleessccee--vvaarrss --ffttrreeee--ccooppyy--pprroopp --ffttrreeee--ddccee
           --ffttrreeee--ddoommiinnaattoorr--ooppttss --ffttrreeee--ddssee --ffttrreeee--ffoorrwwpprroopp --ffttrreeee--ffrree
           --ffttrreeee--pphhiipprroopp --ffttrreeee--ssiinnkk --ffttrreeee--ssllssrr --ffttrreeee--ssrraa --ffttrreeee--ppttaa
           --ffttrreeee--tteerr --ffuunniitt--aatt--aa--ttiimmee

       --OO22 Optimize even more.  GCC performs nearly all supported
           optimizations that do not involve a space-speed tradeoff.  As
           compared to --OO, this option increases both compilation time and the
           performance of the generated code.

           --OO22 turns on all optimization flags specified by --OO.  It also turns
           on the following optimization flags: --fftthhrreeaadd--jjuummppss
           --ffaalliiggnn--ffuunnccttiioonnss  --ffaalliiggnn--jjuummppss --ffaalliiggnn--llooooppss  --ffaalliiggnn--llaabbeellss
           --ffccaalllleerr--ssaavveess --ffccrroossssjjuummppiinngg --ffccssee--ffoollllooww--jjuummppss  --ffccssee--sskkiipp--bblloocckkss
           --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss --ffddeevviirrttuuaalliizzee
           --ffddeevviirrttuuaalliizzee--ssppeeccuullaattiivveellyy --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss --ffggccssee
           --ffggccssee--llmm --ffhhooiisstt--aaddjjaacceenntt--llooaaddss --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss
           --ffiinnddiirreecctt--iinnlliinniinngg --ffiippaa--ccpp --ffiippaa--bbiitt--ccpp --ffiippaa--vvrrpp --ffiippaa--ssrraa
           --ffiippaa--iiccff --ffiissoollaattee--eerrrroonneeoouuss--ppaatthhss--ddeerreeffeerreennccee --ffllrraa--rreemmaatt
           --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss --ffooppttiimmiizzee--ssttrrlleenn --ffppaarrttiiaall--iinnlliinniinngg
           --ffppeeeepphhoollee22 --ffrreeoorrddeerr--bblloocckkss--aallggoorriitthhmm==ssttcc
           --ffrreeoorrddeerr--bblloocckkss--aanndd--ppaarrttiittiioonn --ffrreeoorrddeerr--ffuunnccttiioonnss
           --ffrreerruunn--ccssee--aafftteerr--lloooopp --ffsscchheedd--iinntteerrbblloocckk  --ffsscchheedd--ssppeecc
           --ffsscchheedduullee--iinnssnnss  --ffsscchheedduullee--iinnssnnss22 --ffssttoorree--mmeerrggiinngg
           --ffssttrriicctt--aalliiaassiinngg --ffttrreeee--bbuuiillttiinn--ccaallll--ddccee --ffttrreeee--sswwiittcchh--ccoonnvveerrssiioonn
           --ffttrreeee--ttaaiill--mmeerrggee --ffccooddee--hhooiissttiinngg --ffttrreeee--pprree --ffttrreeee--vvrrpp --ffiippaa--rraa

           Please note the warning under --ffggccssee about invoking --OO22 on programs
           that use computed gotos.

           NOTE: In Ubuntu 8.10 and later versions, --DD__FFOORRTTIIFFYY__SSOOUURRCCEE==22 is set
           by default, and is activated when --OO is set to 2 or higher.  This
           enables additional compile-time and run-time checks for several
           libc functions.  To disable, specify either --UU__FFOORRTTIIFFYY__SSOOUURRCCEE or
           --DD__FFOORRTTIIFFYY__SSOOUURRCCEE==00.

       --OO33 Optimize yet more.  --OO33 turns on all optimizations specified by --OO22
           and also turns on the following optimization flags:
           --ffiinnlliinnee--ffuunnccttiioonnss --ffuunnsswwiittcchh--llooooppss --ffpprreeddiiccttiivvee--ccoommmmoonniinngg
           --ffggccssee--aafftteerr--rreellooaadd --ffttrreeee--lloooopp--vveeccttoorriizzee --ffttrreeee--lloooopp--ddiissttrriibbuuttiioonn
           --ffttrreeee--lloooopp--ddiissttrriibbuuttee--ppaatttteerrnnss --fflloooopp--iinntteerrcchhaannggee
           --fflloooopp--uunnrroollll--aanndd--jjaamm --ffsspplliitt--ppaatthhss --ffttrreeee--ssllpp--vveeccttoorriizzee
           --ffvveecctt--ccoosstt--mmooddeell --ffttrreeee--ppaarrttiiaall--pprree --ffppeeeell--llooooppss --ffiippaa--ccpp--cclloonnee

       --OO00 Reduce compilation time and make debugging produce the expected
           results.  This is the default.

       --OOss Optimize for size.  --OOss enables all --OO22 optimizations that do not
           typically increase code size.

           --OOss disables the following optimization flags: --ffaalliiggnn--ffuunnccttiioonnss
           --ffaalliiggnn--jjuummppss  --ffaalliiggnn--llooooppss --ffaalliiggnn--llaabbeellss  --ffrreeoorrddeerr--bblloocckkss
           --ffrreeoorrddeerr--bblloocckkss--aallggoorriitthhmm==ssttcc --ffrreeoorrddeerr--bblloocckkss--aanndd--ppaarrttiittiioonn
           --ffpprreeffeettcchh--lloooopp--aarrrraayyss

           It also enables --ffiinnlliinnee--ffuunnccttiioonnss, causes the compiler to tune for
           code size rather than execution speed, and performs further
           optimizations designed to reduce code size.

       --OOffaasstt
           Disregard strict standards compliance.  --OOffaasstt enables all --OO33
           optimizations.  It also enables optimizations that are not valid
           for all standard-compliant programs.  It turns on --ffffaasstt--mmaatthh and
           the Fortran-specific --ffssttaacckk--aarrrraayyss, unless --ffmmaaxx--ssttaacckk--vvaarr--ssiizzee is
           specified, and --ffnnoo--pprrootteecctt--ppaarreennss.

       --OOgg Optimize debugging experience.  --OOgg enables optimizations that do
           not interfere with debugging. It should be the optimization level
           of choice for the standard edit-compile-debug cycle, offering a
           reasonable level of optimization while maintaining fast compilation
           and a good debugging experience.

       If you use multiple --OO options, with or without level numbers, the last
       such option is the one that is effective.

       Options of the form --ff_f_l_a_g specify machine-independent flags.  Most
       flags have both positive and negative forms; the negative form of --ffffoooo
       is --ffnnoo--ffoooo.  In the table below, only one of the forms is listed---the
       one you typically use.  You can figure out the other form by either
       removing nnoo-- or adding it.

       The following options control specific optimizations.  They are either
       activated by --OO options or are related to ones that are.  You can use
       the following flags in the rare cases when "fine-tuning" of
       optimizations to be performed is desired.

       --ffnnoo--ddeeffeerr--ppoopp
           Always pop the arguments to each function call as soon as that
           function returns.  For machines that must pop arguments after a
           function call, the compiler normally lets arguments accumulate on
           the stack for several function calls and pops them all at once.

           Disabled at levels --OO, --OO22, --OO33, --OOss.

       --ffffoorrwwaarrdd--pprrooppaaggaattee
           Perform a forward propagation pass on RTL.  The pass tries to
           combine two instructions and checks if the result can be
           simplified.  If loop unrolling is active, two passes are performed
           and the second is scheduled after loop unrolling.

           This option is enabled by default at optimization levels --OO, --OO22,
           --OO33, --OOss.

       --ffffpp--ccoonnttrraacctt==_s_t_y_l_e
           --ffffpp--ccoonnttrraacctt==ooffff disables floating-point expression contraction.
           --ffffpp--ccoonnttrraacctt==ffaasstt enables floating-point expression contraction
           such as forming of fused multiply-add operations if the target has
           native support for them.  --ffffpp--ccoonnttrraacctt==oonn enables floating-point
           expression contraction if allowed by the language standard.  This
           is currently not implemented and treated equal to
           --ffffpp--ccoonnttrraacctt==ooffff.

           The default is --ffffpp--ccoonnttrraacctt==ffaasstt.

       --ffoommiitt--ffrraammee--ppooiinntteerr
           Omit the frame pointer in functions that don't need one.  This
           avoids the instructions to save, set up and restore the frame
           pointer; on many targets it also makes an extra register available.

           On some targets this flag has no effect because the standard
           calling sequence always uses a frame pointer, so it cannot be
           omitted.

           Note that --ffnnoo--oommiitt--ffrraammee--ppooiinntteerr doesn't guarantee the frame
           pointer is used in all functions.  Several targets always omit the
           frame pointer in leaf functions.

           Enabled by default at --OO and higher.

       --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss
           Optimize sibling and tail recursive calls.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffooppttiimmiizzee--ssttrrlleenn
           Optimize various standard C string functions (e.g. "strlen",
           "strchr" or "strcpy") and their "_FORTIFY_SOURCE" counterparts into
           faster alternatives.

           Enabled at levels --OO22, --OO33.

       --ffnnoo--iinnlliinnee
           Do not expand any functions inline apart from those marked with the
           "always_inline" attribute.  This is the default when not
           optimizing.

           Single functions can be exempted from inlining by marking them with
           the "noinline" attribute.

       --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss
           Integrate functions into their callers when their body is smaller
           than expected function call code (so overall size of program gets
           smaller).  The compiler heuristically decides which functions are
           simple enough to be worth integrating in this way.  This inlining
           applies to all functions, even those not declared inline.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffiinnddiirreecctt--iinnlliinniinngg
           Inline also indirect calls that are discovered to be known at
           compile time thanks to previous inlining.  This option has any
           effect only when inlining itself is turned on by the
           --ffiinnlliinnee--ffuunnccttiioonnss or --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss options.

           Enabled at levels --OO33, --OOss.  Also enabled by --ffpprrooffiillee--uussee and
           --ffaauuttoo--pprrooffiillee.

       --ffiinnlliinnee--ffuunnccttiioonnss
           Consider all functions for inlining, even if they are not declared
           inline.  The compiler heuristically decides which functions are
           worth integrating in this way.

           If all calls to a given function are integrated, and the function
           is declared "static", then the function is normally not output as
           assembler code in its own right.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffiinnlliinnee--ffuunnccttiioonnss--ccaalllleedd--oonnccee
           Consider all "static" functions called once for inlining into their
           caller even if they are not marked "inline".  If a call to a given
           function is integrated, then the function is not output as
           assembler code in its own right.

           Enabled at levels --OO11, --OO22, --OO33 and --OOss.

       --ffeeaarrllyy--iinnlliinniinngg
           Inline functions marked by "always_inline" and functions whose body
           seems smaller than the function call overhead early before doing
           --ffpprrooffiillee--ggeenneerraattee instrumentation and real inlining pass.  Doing
           so makes profiling significantly cheaper and usually inlining
           faster on programs having large chains of nested wrapper functions.

           Enabled by default.

       --ffiippaa--ssrraa
           Perform interprocedural scalar replacement of aggregates, removal
           of unused parameters and replacement of parameters passed by
           reference by parameters passed by value.

           Enabled at levels --OO22, --OO33 and --OOss.

       --ffiinnlliinnee--lliimmiitt==_n
           By default, GCC limits the size of functions that can be inlined.
           This flag allows coarse control of this limit.  _n is the size of
           functions that can be inlined in number of pseudo instructions.

           Inlining is actually controlled by a number of parameters, which
           may be specified individually by using ----ppaarraamm _n_a_m_e==_v_a_l_u_e.  The
           --ffiinnlliinnee--lliimmiitt==_n option sets some of these parameters as follows:

           mmaaxx--iinnlliinnee--iinnssnnss--ssiinnggllee
               is set to _n/2.

           mmaaxx--iinnlliinnee--iinnssnnss--aauuttoo
               is set to _n/2.

           See below for a documentation of the individual parameters
           controlling inlining and for the defaults of these parameters.

           _N_o_t_e_: there may be no value to --ffiinnlliinnee--lliimmiitt that results in
           default behavior.

           _N_o_t_e_: pseudo instruction represents, in this particular context, an
           abstract measurement of function's size.  In no way does it
           represent a count of assembly instructions and as such its exact
           meaning might change from one release to an another.

       --ffnnoo--kkeeeepp--iinnlliinnee--ddlllleexxppoorrtt
           This is a more fine-grained version of --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss,
           which applies only to functions that are declared using the
           "dllexport" attribute or declspec.

       --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss
           In C, emit "static" functions that are declared "inline" into the
           object file, even if the function has been inlined into all of its
           callers.  This switch does not affect functions using the "extern
           inline" extension in GNU C90.  In C++, emit any and all inline
           functions into the object file.

       --ffkkeeeepp--ssttaattiicc--ffuunnccttiioonnss
           Emit "static" functions into the object file, even if the function
           is never used.

       --ffkkeeeepp--ssttaattiicc--ccoonnssttss
           Emit variables declared "static const" when optimization isn't
           turned on, even if the variables aren't referenced.

           GCC enables this option by default.  If you want to force the
           compiler to check if a variable is referenced, regardless of
           whether or not optimization is turned on, use the
           --ffnnoo--kkeeeepp--ssttaattiicc--ccoonnssttss option.

       --ffmmeerrggee--ccoonnssttaannttss
           Attempt to merge identical constants (string constants and
           floating-point constants) across compilation units.

           This option is the default for optimized compilation if the
           assembler and linker support it.  Use --ffnnoo--mmeerrggee--ccoonnssttaannttss to
           inhibit this behavior.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffmmeerrggee--aallll--ccoonnssttaannttss
           Attempt to merge identical constants and identical variables.

           This option implies --ffmmeerrggee--ccoonnssttaannttss.  In addition to
           --ffmmeerrggee--ccoonnssttaannttss this considers e.g. even constant initialized
           arrays or initialized constant variables with integral or floating-
           point types.  Languages like C or C++ require each variable,
           including multiple instances of the same variable in recursive
           calls, to have distinct locations, so using this option results in
           non-conforming behavior.

       --ffmmoodduulloo--sscchheedd
           Perform swing modulo scheduling immediately before the first
           scheduling pass.  This pass looks at innermost loops and reorders
           their instructions by overlapping different iterations.

       --ffmmoodduulloo--sscchheedd--aallllooww--rreeggmmoovveess
           Perform more aggressive SMS-based modulo scheduling with register
           moves allowed.  By setting this flag certain anti-dependences edges
           are deleted, which triggers the generation of reg-moves based on
           the life-range analysis.  This option is effective only with
           --ffmmoodduulloo--sscchheedd enabled.

       --ffnnoo--bbrraanncchh--ccoouunntt--rreegg
           Avoid running a pass scanning for opportunities to use "decrement
           and branch" instructions on a count register instead of generating
           sequences of instructions that decrement a register, compare it
           against zero, and then branch based upon the result.  This option
           is only meaningful on architectures that support such instructions,
           which include x86, PowerPC, IA-64 and S/390.  Note that the
           --ffnnoo--bbrraanncchh--ccoouunntt--rreegg option doesn't remove the decrement and
           branch instructions from the generated instruction stream
           introduced by other optimization passes.

           Enabled by default at --OO11 and higher.

           The default is --ffbbrraanncchh--ccoouunntt--rreegg.

       --ffnnoo--ffuunnccttiioonn--ccssee
           Do not put function addresses in registers; make each instruction
           that calls a constant function contain the function's address
           explicitly.

           This option results in less efficient code, but some strange hacks
           that alter the assembler output may be confused by the
           optimizations performed when this option is not used.

           The default is --ffffuunnccttiioonn--ccssee

       --ffnnoo--zzeerroo--iinniittiiaalliizzeedd--iinn--bbssss
           If the target supports a BSS section, GCC by default puts variables
           that are initialized to zero into BSS.  This can save space in the
           resulting code.

           This option turns off this behavior because some programs
           explicitly rely on variables going to the data section---e.g., so
           that the resulting executable can find the beginning of that
           section and/or make assumptions based on that.

           The default is --ffzzeerroo--iinniittiiaalliizzeedd--iinn--bbssss.

       --fftthhrreeaadd--jjuummppss
           Perform optimizations that check to see if a jump branches to a
           location where another comparison subsumed by the first is found.
           If so, the first branch is redirected to either the destination of
           the second branch or a point immediately following it, depending on
           whether the condition is known to be true or false.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffsspplliitt--wwiiddee--ttyyppeess
           When using a type that occupies multiple registers, such as "long
           long" on a 32-bit system, split the registers apart and allocate
           them independently.  This normally generates better code for those
           types, but may make debugging more difficult.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffccssee--ffoollllooww--jjuummppss
           In common subexpression elimination (CSE), scan through jump
           instructions when the target of the jump is not reached by any
           other path.  For example, when CSE encounters an "if" statement
           with an "else" clause, CSE follows the jump when the condition
           tested is false.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffccssee--sskkiipp--bblloocckkss
           This is similar to --ffccssee--ffoollllooww--jjuummppss, but causes CSE to follow
           jumps that conditionally skip over blocks.  When CSE encounters a
           simple "if" statement with no else clause, --ffccssee--sskkiipp--bblloocckkss causes
           CSE to follow the jump around the body of the "if".

           Enabled at levels --OO22, --OO33, --OOss.

       --ffrreerruunn--ccssee--aafftteerr--lloooopp
           Re-run common subexpression elimination after loop optimizations
           are performed.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffggccssee
           Perform a global common subexpression elimination pass.  This pass
           also performs global constant and copy propagation.

           _N_o_t_e_: When compiling a program using computed gotos, a GCC
           extension, you may get better run-time performance if you disable
           the global common subexpression elimination pass by adding
           --ffnnoo--ggccssee to the command line.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffggccssee--llmm
           When --ffggccssee--llmm is enabled, global common subexpression elimination
           attempts to move loads that are only killed by stores into
           themselves.  This allows a loop containing a load/store sequence to
           be changed to a load outside the loop, and a copy/store within the
           loop.

           Enabled by default when --ffggccssee is enabled.

       --ffggccssee--ssmm
           When --ffggccssee--ssmm is enabled, a store motion pass is run after global
           common subexpression elimination.  This pass attempts to move
           stores out of loops.  When used in conjunction with --ffggccssee--llmm,
           loops containing a load/store sequence can be changed to a load
           before the loop and a store after the loop.

           Not enabled at any optimization level.

       --ffggccssee--llaass
           When --ffggccssee--llaass is enabled, the global common subexpression
           elimination pass eliminates redundant loads that come after stores
           to the same memory location (both partial and full redundancies).

           Not enabled at any optimization level.

       --ffggccssee--aafftteerr--rreellooaadd
           When --ffggccssee--aafftteerr--rreellooaadd is enabled, a redundant load elimination
           pass is performed after reload.  The purpose of this pass is to
           clean up redundant spilling.

       --ffaaggggrreessssiivvee--lloooopp--ooppttiimmiizzaattiioonnss
           This option tells the loop optimizer to use language constraints to
           derive bounds for the number of iterations of a loop.  This assumes
           that loop code does not invoke undefined behavior by for example
           causing signed integer overflows or out-of-bound array accesses.
           The bounds for the number of iterations of a loop are used to guide
           loop unrolling and peeling and loop exit test optimizations.  This
           option is enabled by default.

       --ffuunnccoonnssttrraaiinneedd--ccoommmmoonnss
           This option tells the compiler that variables declared in common
           blocks (e.g. Fortran) may later be overridden with longer trailing
           arrays. This prevents certain optimizations that depend on knowing
           the array bounds.

       --ffccrroossssjjuummppiinngg
           Perform cross-jumping transformation.  This transformation unifies
           equivalent code and saves code size.  The resulting code may or may
           not perform better than without cross-jumping.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffaauuttoo--iinncc--ddeecc
           Combine increments or decrements of addresses with memory accesses.
           This pass is always skipped on architectures that do not have
           instructions to support this.  Enabled by default at --OO and higher
           on architectures that support this.

       --ffddccee
           Perform dead code elimination (DCE) on RTL.  Enabled by default at
           --OO and higher.

       --ffddssee
           Perform dead store elimination (DSE) on RTL.  Enabled by default at
           --OO and higher.

       --ffiiff--ccoonnvveerrssiioonn
           Attempt to transform conditional jumps into branch-less
           equivalents.  This includes use of conditional moves, min, max, set
           flags and abs instructions, and some tricks doable by standard
           arithmetics.  The use of conditional execution on chips where it is
           available is controlled by --ffiiff--ccoonnvveerrssiioonn22.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffiiff--ccoonnvveerrssiioonn22
           Use conditional execution (where available) to transform
           conditional jumps into branch-less equivalents.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffddeecclloonnee--ccttoorr--ddttoorr
           The C++ ABI requires multiple entry points for constructors and
           destructors: one for a base subobject, one for a complete object,
           and one for a virtual destructor that calls operator delete
           afterwards.  For a hierarchy with virtual bases, the base and
           complete variants are clones, which means two copies of the
           function.  With this option, the base and complete variants are
           changed to be thunks that call a common implementation.

           Enabled by --OOss.

       --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss
           Assume that programs cannot safely dereference null pointers, and
           that no code or data element resides at address zero.  This option
           enables simple constant folding optimizations at all optimization
           levels.  In addition, other optimization passes in GCC use this
           flag to control global dataflow analyses that eliminate useless
           checks for null pointers; these assume that a memory access to
           address zero always results in a trap, so that if a pointer is
           checked after it has already been dereferenced, it cannot be null.

           Note however that in some environments this assumption is not true.
           Use --ffnnoo--ddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss to disable this optimization
           for programs that depend on that behavior.

           This option is enabled by default on most targets.  On Nios II ELF,
           it defaults to off.  On AVR, CR16, and MSP430, this option is
           completely disabled.

           Passes that use the dataflow information are enabled independently
           at different optimization levels.

       --ffddeevviirrttuuaalliizzee
           Attempt to convert calls to virtual functions to direct calls.
           This is done both within a procedure and interprocedurally as part
           of indirect inlining (--ffiinnddiirreecctt--iinnlliinniinngg) and interprocedural
           constant propagation (--ffiippaa--ccpp).  Enabled at levels --OO22, --OO33, --OOss.

       --ffddeevviirrttuuaalliizzee--ssppeeccuullaattiivveellyy
           Attempt to convert calls to virtual functions to speculative direct
           calls.  Based on the analysis of the type inheritance graph,
           determine for a given call the set of likely targets. If the set is
           small, preferably of size 1, change the call into a conditional
           deciding between direct and indirect calls.  The speculative calls
           enable more optimizations, such as inlining.  When they seem
           useless after further optimization, they are converted back into
           original form.

       --ffddeevviirrttuuaalliizzee--aatt--llttrraannss
           Stream extra information needed for aggressive devirtualization
           when running the link-time optimizer in local transformation mode.
           This option enables more devirtualization but significantly
           increases the size of streamed data. For this reason it is disabled
           by default.

       --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss
           Perform a number of minor optimizations that are relatively
           expensive.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffrreeee
           Attempt to remove redundant extension instructions.  This is
           especially helpful for the x86-64 architecture, which implicitly
           zero-extends in 64-bit registers after writing to their lower
           32-bit half.

           Enabled for Alpha, AArch64 and x86 at levels --OO22, --OO33, --OOss.

       --ffnnoo--lliiffeettiimmee--ddssee
           In C++ the value of an object is only affected by changes within
           its lifetime: when the constructor begins, the object has an
           indeterminate value, and any changes during the lifetime of the
           object are dead when the object is destroyed.  Normally dead store
           elimination will take advantage of this; if your code relies on the
           value of the object storage persisting beyond the lifetime of the
           object, you can use this flag to disable this optimization.  To
           preserve stores before the constructor starts (e.g. because your
           operator new clears the object storage) but still treat the object
           as dead after the destructor you, can use --fflliiffeettiimmee--ddssee==11.  The
           default behavior can be explicitly selected with --fflliiffeettiimmee--ddssee==22.
           --fflliiffeettiimmee--ddssee==00 is equivalent to --ffnnoo--lliiffeettiimmee--ddssee.

       --fflliivvee--rraannggee--sshhrriinnkkaaggee
           Attempt to decrease register pressure through register live range
           shrinkage.  This is helpful for fast processors with small or
           moderate size register sets.

       --ffiirraa--aallggoorriitthhmm==_a_l_g_o_r_i_t_h_m
           Use the specified coloring algorithm for the integrated register
           allocator.  The _a_l_g_o_r_i_t_h_m argument can be pprriioorriittyy, which specifies
           Chow's priority coloring, or CCBB, which specifies Chaitin-Briggs
           coloring.  Chaitin-Briggs coloring is not implemented for all
           architectures, but for those targets that do support it, it is the
           default because it generates better code.

       --ffiirraa--rreeggiioonn==_r_e_g_i_o_n
           Use specified regions for the integrated register allocator.  The
           _r_e_g_i_o_n argument should be one of the following:

           aallll Use all loops as register allocation regions.  This can give
               the best results for machines with a small and/or irregular
               register set.

           mmiixxeedd
               Use all loops except for loops with small register pressure as
               the regions.  This value usually gives the best results in most
               cases and for most architectures, and is enabled by default
               when compiling with optimization for speed (--OO, --OO22, ...).

           oonnee Use all functions as a single region.  This typically results
               in the smallest code size, and is enabled by default for --OOss or
               --OO00.

       --ffiirraa--hhooiisstt--pprreessssuurree
           Use IRA to evaluate register pressure in the code hoisting pass for
           decisions to hoist expressions.  This option usually results in
           smaller code, but it can slow the compiler down.

           This option is enabled at level --OOss for all targets.

       --ffiirraa--lloooopp--pprreessssuurree
           Use IRA to evaluate register pressure in loops for decisions to
           move loop invariants.  This option usually results in generation of
           faster and smaller code on machines with large register files (>=
           32 registers), but it can slow the compiler down.

           This option is enabled at level --OO33 for some targets.

       --ffnnoo--iirraa--sshhaarree--ssaavvee--sslloottss
           Disable sharing of stack slots used for saving call-used hard
           registers living through a call.  Each hard register gets a
           separate stack slot, and as a result function stack frames are
           larger.

       --ffnnoo--iirraa--sshhaarree--ssppiillll--sslloottss
           Disable sharing of stack slots allocated for pseudo-registers.
           Each pseudo-register that does not get a hard register gets a
           separate stack slot, and as a result function stack frames are
           larger.

       --ffllrraa--rreemmaatt
           Enable CFG-sensitive rematerialization in LRA.  Instead of loading
           values of spilled pseudos, LRA tries to rematerialize (recalculate)
           values if it is profitable.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffddeellaayyeedd--bbrraanncchh
           If supported for the target machine, attempt to reorder
           instructions to exploit instruction slots available after delayed
           branch instructions.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffsscchheedduullee--iinnssnnss
           If supported for the target machine, attempt to reorder
           instructions to eliminate execution stalls due to required data
           being unavailable.  This helps machines that have slow floating
           point or memory load instructions by allowing other instructions to
           be issued until the result of the load or floating-point
           instruction is required.

           Enabled at levels --OO22, --OO33.

       --ffsscchheedduullee--iinnssnnss22
           Similar to --ffsscchheedduullee--iinnssnnss, but requests an additional pass of
           instruction scheduling after register allocation has been done.
           This is especially useful on machines with a relatively small
           number of registers and where memory load instructions take more
           than one cycle.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffnnoo--sscchheedd--iinntteerrbblloocckk
           Don't schedule instructions across basic blocks.  This is normally
           enabled by default when scheduling before register allocation, i.e.
           with --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.

       --ffnnoo--sscchheedd--ssppeecc
           Don't allow speculative motion of non-load instructions.  This is
           normally enabled by default when scheduling before register
           allocation, i.e.  with --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.

       --ffsscchheedd--pprreessssuurree
           Enable register pressure sensitive insn scheduling before register
           allocation.  This only makes sense when scheduling before register
           allocation is enabled, i.e. with --ffsscchheedduullee--iinnssnnss or at --OO22 or
           higher.  Usage of this option can improve the generated code and
           decrease its size by preventing register pressure increase above
           the number of available hard registers and subsequent spills in
           register allocation.

       --ffsscchheedd--ssppeecc--llooaadd
           Allow speculative motion of some load instructions.  This only
           makes sense when scheduling before register allocation, i.e. with
           --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.

       --ffsscchheedd--ssppeecc--llooaadd--ddaannggeerroouuss
           Allow speculative motion of more load instructions.  This only
           makes sense when scheduling before register allocation, i.e. with
           --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.

       --ffsscchheedd--ssttaalllleedd--iinnssnnss
       --ffsscchheedd--ssttaalllleedd--iinnssnnss==_n
           Define how many insns (if any) can be moved prematurely from the
           queue of stalled insns into the ready list during the second
           scheduling pass.  --ffnnoo--sscchheedd--ssttaalllleedd--iinnssnnss means that no insns are
           moved prematurely, --ffsscchheedd--ssttaalllleedd--iinnssnnss==00 means there is no limit
           on how many queued insns can be moved prematurely.
           --ffsscchheedd--ssttaalllleedd--iinnssnnss without a value is equivalent to
           --ffsscchheedd--ssttaalllleedd--iinnssnnss==11.

       --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp
       --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp==_n
           Define how many insn groups (cycles) are examined for a dependency
           on a stalled insn that is a candidate for premature removal from
           the queue of stalled insns.  This has an effect only during the
           second scheduling pass, and only if --ffsscchheedd--ssttaalllleedd--iinnssnnss is used.
           --ffnnoo--sscchheedd--ssttaalllleedd--iinnssnnss--ddeepp is equivalent to
           --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp==00.  --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp without a
           value is equivalent to --ffsscchheedd--ssttaalllleedd--iinnssnnss--ddeepp==11.

       --ffsscchheedd22--uussee--ssuuppeerrbblloocckkss
           When scheduling after register allocation, use superblock
           scheduling.  This allows motion across basic block boundaries,
           resulting in faster schedules.  This option is experimental, as not
           all machine descriptions used by GCC model the CPU closely enough
           to avoid unreliable results from the algorithm.

           This only makes sense when scheduling after register allocation,
           i.e. with --ffsscchheedduullee--iinnssnnss22 or at --OO22 or higher.

       --ffsscchheedd--ggrroouupp--hheeuurriissttiicc
           Enable the group heuristic in the scheduler.  This heuristic favors
           the instruction that belongs to a schedule group.  This is enabled
           by default when scheduling is enabled, i.e. with --ffsscchheedduullee--iinnssnnss
           or --ffsscchheedduullee--iinnssnnss22 or at --OO22 or higher.

       --ffsscchheedd--ccrriittiiccaall--ppaatthh--hheeuurriissttiicc
           Enable the critical-path heuristic in the scheduler.  This
           heuristic favors instructions on the critical path.  This is
           enabled by default when scheduling is enabled, i.e. with
           --ffsscchheedduullee--iinnssnnss or --ffsscchheedduullee--iinnssnnss22 or at --OO22 or higher.

       --ffsscchheedd--ssppeecc--iinnssnn--hheeuurriissttiicc
           Enable the speculative instruction heuristic in the scheduler.
           This heuristic favors speculative instructions with greater
           dependency weakness.  This is enabled by default when scheduling is
           enabled, i.e.  with --ffsscchheedduullee--iinnssnnss or --ffsscchheedduullee--iinnssnnss22 or at --OO22
           or higher.

       --ffsscchheedd--rraannkk--hheeuurriissttiicc
           Enable the rank heuristic in the scheduler.  This heuristic favors
           the instruction belonging to a basic block with greater size or
           frequency.  This is enabled by default when scheduling is enabled,
           i.e.  with --ffsscchheedduullee--iinnssnnss or --ffsscchheedduullee--iinnssnnss22 or at --OO22 or
           higher.

       --ffsscchheedd--llaasstt--iinnssnn--hheeuurriissttiicc
           Enable the last-instruction heuristic in the scheduler.  This
           heuristic favors the instruction that is less dependent on the last
           instruction scheduled.  This is enabled by default when scheduling
           is enabled, i.e. with --ffsscchheedduullee--iinnssnnss or --ffsscchheedduullee--iinnssnnss22 or at
           --OO22 or higher.

       --ffsscchheedd--ddeepp--ccoouunntt--hheeuurriissttiicc
           Enable the dependent-count heuristic in the scheduler.  This
           heuristic favors the instruction that has more instructions
           depending on it.  This is enabled by default when scheduling is
           enabled, i.e.  with --ffsscchheedduullee--iinnssnnss or --ffsscchheedduullee--iinnssnnss22 or at --OO22
           or higher.

       --ffrreesscchheedduullee--mmoodduulloo--sscchheedduulleedd--llooooppss
           Modulo scheduling is performed before traditional scheduling.  If a
           loop is modulo scheduled, later scheduling passes may change its
           schedule.  Use this option to control that behavior.

       --ffsseelleeccttiivvee--sscchheedduulliinngg
           Schedule instructions using selective scheduling algorithm.
           Selective scheduling runs instead of the first scheduler pass.

       --ffsseelleeccttiivvee--sscchheedduulliinngg22
           Schedule instructions using selective scheduling algorithm.
           Selective scheduling runs instead of the second scheduler pass.

       --ffsseell--sscchheedd--ppiippeelliinniinngg
           Enable software pipelining of innermost loops during selective
           scheduling.  This option has no effect unless one of
           --ffsseelleeccttiivvee--sscchheedduulliinngg or --ffsseelleeccttiivvee--sscchheedduulliinngg22 is turned on.

       --ffsseell--sscchheedd--ppiippeelliinniinngg--oouutteerr--llooooppss
           When pipelining loops during selective scheduling, also pipeline
           outer loops.  This option has no effect unless
           --ffsseell--sscchheedd--ppiippeelliinniinngg is turned on.

       --ffsseemmaannttiicc--iinntteerrppoossiittiioonn
           Some object formats, like ELF, allow interposing of symbols by the
           dynamic linker.  This means that for symbols exported from the DSO,
           the compiler cannot perform interprocedural propagation, inlining
           and other optimizations in anticipation that the function or
           variable in question may change. While this feature is useful, for
           example, to rewrite memory allocation functions by a debugging
           implementation, it is expensive in the terms of code quality.  With
           --ffnnoo--sseemmaannttiicc--iinntteerrppoossiittiioonn the compiler assumes that if
           interposition happens for functions the overwriting function will
           have precisely the same semantics (and side effects).  Similarly if
           interposition happens for variables, the constructor of the
           variable will be the same. The flag has no effect for functions
           explicitly declared inline (where it is never allowed for
           interposition to change semantics) and for symbols explicitly
           declared weak.

       --ffsshhrriinnkk--wwrraapp
           Emit function prologues only before parts of the function that need
           it, rather than at the top of the function.  This flag is enabled
           by default at --OO and higher.

       --ffsshhrriinnkk--wwrraapp--sseeppaarraattee
           Shrink-wrap separate parts of the prologue and epilogue separately,
           so that those parts are only executed when needed.  This option is
           on by default, but has no effect unless --ffsshhrriinnkk--wwrraapp is also
           turned on and the target supports this.

       --ffccaalllleerr--ssaavveess
           Enable allocation of values to registers that are clobbered by
           function calls, by emitting extra instructions to save and restore
           the registers around such calls.  Such allocation is done only when
           it seems to result in better code.

           This option is always enabled by default on certain machines,
           usually those which have no call-preserved registers to use
           instead.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffccoommbbiinnee--ssttaacckk--aaddjjuussttmmeennttss
           Tracks stack adjustments (pushes and pops) and stack memory
           references and then tries to find ways to combine them.

           Enabled by default at --OO11 and higher.

       --ffiippaa--rraa
           Use caller save registers for allocation if those registers are not
           used by any called function.  In that case it is not necessary to
           save and restore them around calls.  This is only possible if
           called functions are part of same compilation unit as current
           function and they are compiled before it.

           Enabled at levels --OO22, --OO33, --OOss, however the option is disabled if
           generated code will be instrumented for profiling (--pp, or --ppgg) or
           if callee's register usage cannot be known exactly (this happens on
           targets that do not expose prologues and epilogues in RTL).

       --ffccoonnsseerrvvee--ssttaacckk
           Attempt to minimize stack usage.  The compiler attempts to use less
           stack space, even if that makes the program slower.  This option
           implies setting the llaarrggee--ssttaacckk--ffrraammee parameter to 100 and the
           llaarrggee--ssttaacckk--ffrraammee--ggrroowwtthh parameter to 400.

       --ffttrreeee--rreeaassssoocc
           Perform reassociation on trees.  This flag is enabled by default at
           --OO and higher.

       --ffccooddee--hhooiissttiinngg
           Perform code hoisting.  Code hoisting tries to move the evaluation
           of expressions executed on all paths to the function exit as early
           as possible.  This is especially useful as a code size
           optimization, but it often helps for code speed as well.  This flag
           is enabled by default at --OO22 and higher.

       --ffttrreeee--pprree
           Perform partial redundancy elimination (PRE) on trees.  This flag
           is enabled by default at --OO22 and --OO33.

       --ffttrreeee--ppaarrttiiaall--pprree
           Make partial redundancy elimination (PRE) more aggressive.  This
           flag is enabled by default at --OO33.

       --ffttrreeee--ffoorrwwpprroopp
           Perform forward propagation on trees.  This flag is enabled by
           default at --OO and higher.

       --ffttrreeee--ffrree
           Perform full redundancy elimination (FRE) on trees.  The difference
           between FRE and PRE is that FRE only considers expressions that are
           computed on all paths leading to the redundant computation.  This
           analysis is faster than PRE, though it exposes fewer redundancies.
           This flag is enabled by default at --OO and higher.

       --ffttrreeee--pphhiipprroopp
           Perform hoisting of loads from conditional pointers on trees.  This
           pass is enabled by default at --OO and higher.

       --ffhhooiisstt--aaddjjaacceenntt--llooaaddss
           Speculatively hoist loads from both branches of an if-then-else if
           the loads are from adjacent locations in the same structure and the
           target architecture has a conditional move instruction.  This flag
           is enabled by default at --OO22 and higher.

       --ffttrreeee--ccooppyy--pprroopp
           Perform copy propagation on trees.  This pass eliminates
           unnecessary copy operations.  This flag is enabled by default at --OO
           and higher.

       --ffiippaa--ppuurree--ccoonnsstt
           Discover which functions are pure or constant.  Enabled by default
           at --OO and higher.

       --ffiippaa--rreeffeerreennccee
           Discover which static variables do not escape the compilation unit.
           Enabled by default at --OO and higher.

       --ffiippaa--ppttaa
           Perform interprocedural pointer analysis and interprocedural
           modification and reference analysis.  This option can cause
           excessive memory and compile-time usage on large compilation units.
           It is not enabled by default at any optimization level.

       --ffiippaa--pprrooffiillee
           Perform interprocedural profile propagation.  The functions called
           only from cold functions are marked as cold. Also functions
           executed once (such as "cold", "noreturn", static constructors or
           destructors) are identified. Cold functions and loop less parts of
           functions executed once are then optimized for size.  Enabled by
           default at --OO and higher.

       --ffiippaa--ccpp
           Perform interprocedural constant propagation.  This optimization
           analyzes the program to determine when values passed to functions
           are constants and then optimizes accordingly.  This optimization
           can substantially increase performance if the application has
           constants passed to functions.  This flag is enabled by default at
           --OO22, --OOss and --OO33.

       --ffiippaa--ccpp--cclloonnee
           Perform function cloning to make interprocedural constant
           propagation stronger.  When enabled, interprocedural constant
           propagation performs function cloning when externally visible
           function can be called with constant arguments.  Because this
           optimization can create multiple copies of functions, it may
           significantly increase code size (see ----ppaarraamm
           iippccpp--uunniitt--ggrroowwtthh==_v_a_l_u_e).  This flag is enabled by default at --OO33.

       --ffiippaa--bbiitt--ccpp
           When enabled, perform interprocedural bitwise constant propagation.
           This flag is enabled by default at --OO22. It requires that --ffiippaa--ccpp
           is enabled.

       --ffiippaa--vvrrpp
           When enabled, perform interprocedural propagation of value ranges.
           This flag is enabled by default at --OO22. It requires that --ffiippaa--ccpp
           is enabled.

       --ffiippaa--iiccff
           Perform Identical Code Folding for functions and read-only
           variables.  The optimization reduces code size and may disturb
           unwind stacks by replacing a function by equivalent one with a
           different name. The optimization works more effectively with link-
           time optimization enabled.

           Nevertheless the behavior is similar to Gold Linker ICF
           optimization, GCC ICF works on different levels and thus the
           optimizations are not same - there are equivalences that are found
           only by GCC and equivalences found only by Gold.

           This flag is enabled by default at --OO22 and --OOss.

       --ffiissoollaattee--eerrrroonneeoouuss--ppaatthhss--ddeerreeffeerreennccee
           Detect paths that trigger erroneous or undefined behavior due to
           dereferencing a null pointer.  Isolate those paths from the main
           control flow and turn the statement with erroneous or undefined
           behavior into a trap.  This flag is enabled by default at --OO22 and
           higher and depends on --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss also being
           enabled.

       --ffiissoollaattee--eerrrroonneeoouuss--ppaatthhss--aattttrriibbuuttee
           Detect paths that trigger erroneous or undefined behavior due to a
           null value being used in a way forbidden by a "returns_nonnull" or
           "nonnull" attribute.  Isolate those paths from the main control
           flow and turn the statement with erroneous or undefined behavior
           into a trap.  This is not currently enabled, but may be enabled by
           --OO22 in the future.

       --ffttrreeee--ssiinnkk
           Perform forward store motion on trees.  This flag is enabled by
           default at --OO and higher.

       --ffttrreeee--bbiitt--ccccpp
           Perform sparse conditional bit constant propagation on trees and
           propagate pointer alignment information.  This pass only operates
           on local scalar variables and is enabled by default at --OO and
           higher.  It requires that --ffttrreeee--ccccpp is enabled.

       --ffttrreeee--ccccpp
           Perform sparse conditional constant propagation (CCP) on trees.
           This pass only operates on local scalar variables and is enabled by
           default at --OO and higher.

       --ffssssaa--bbaacckkpprroopp
           Propagate information about uses of a value up the definition chain
           in order to simplify the definitions.  For example, this pass
           strips sign operations if the sign of a value never matters.  The
           flag is enabled by default at --OO and higher.

       --ffssssaa--pphhiioopptt
           Perform pattern matching on SSA PHI nodes to optimize conditional
           code.  This pass is enabled by default at --OO and higher.

       --ffttrreeee--sswwiittcchh--ccoonnvveerrssiioonn
           Perform conversion of simple initializations in a switch to
           initializations from a scalar array.  This flag is enabled by
           default at --OO22 and higher.

       --ffttrreeee--ttaaiill--mmeerrggee
           Look for identical code sequences.  When found, replace one with a
           jump to the other.  This optimization is known as tail merging or
           cross jumping.  This flag is enabled by default at --OO22 and higher.
           The compilation time in this pass can be limited using mmaaxx--ttaaiill--
           mmeerrggee--ccoommppaarriissoonnss parameter and mmaaxx--ttaaiill--mmeerrggee--iitteerraattiioonnss
           parameter.

       --ffttrreeee--ddccee
           Perform dead code elimination (DCE) on trees.  This flag is enabled
           by default at --OO and higher.

       --ffttrreeee--bbuuiillttiinn--ccaallll--ddccee
           Perform conditional dead code elimination (DCE) for calls to built-
           in functions that may set "errno" but are otherwise free of side
           effects.  This flag is enabled by default at --OO22 and higher if --OOss
           is not also specified.

       --ffttrreeee--ddoommiinnaattoorr--ooppttss
           Perform a variety of simple scalar cleanups (constant/copy
           propagation, redundancy elimination, range propagation and
           expression simplification) based on a dominator tree traversal.
           This also performs jump threading (to reduce jumps to jumps). This
           flag is enabled by default at --OO and higher.

       --ffttrreeee--ddssee
           Perform dead store elimination (DSE) on trees.  A dead store is a
           store into a memory location that is later overwritten by another
           store without any intervening loads.  In this case the earlier
           store can be deleted.  This flag is enabled by default at --OO and
           higher.

       --ffttrreeee--cchh
           Perform loop header copying on trees.  This is beneficial since it
           increases effectiveness of code motion optimizations.  It also
           saves one jump.  This flag is enabled by default at --OO and higher.
           It is not enabled for --OOss, since it usually increases code size.

       --ffttrreeee--lloooopp--ooppttiimmiizzee
           Perform loop optimizations on trees.  This flag is enabled by
           default at --OO and higher.

       --ffttrreeee--lloooopp--lliinneeaarr
       --fflloooopp--ssttrriipp--mmiinnee
       --fflloooopp--bblloocckk
           Perform loop nest optimizations.  Same as --fflloooopp--nneesstt--ooppttiimmiizzee.  To
           use this code transformation, GCC has to be configured with
           ----wwiitthh--iissll to enable the Graphite loop transformation
           infrastructure.

       --ffggrraapphhiittee--iiddeennttiittyy
           Enable the identity transformation for graphite.  For every SCoP we
           generate the polyhedral representation and transform it back to
           gimple.  Using --ffggrraapphhiittee--iiddeennttiittyy we can check the costs or
           benefits of the GIMPLE -> GRAPHITE -> GIMPLE transformation.  Some
           minimal optimizations are also performed by the code generator isl,
           like index splitting and dead code elimination in loops.

       --fflloooopp--nneesstt--ooppttiimmiizzee
           Enable the isl based loop nest optimizer.  This is a generic loop
           nest optimizer based on the Pluto optimization algorithms.  It
           calculates a loop structure optimized for data-locality and
           parallelism.  This option is experimental.

       --fflloooopp--ppaarraalllleelliizzee--aallll
           Use the Graphite data dependence analysis to identify loops that
           can be parallelized.  Parallelize all the loops that can be
           analyzed to not contain loop carried dependences without checking
           that it is profitable to parallelize the loops.

       --ffttrreeee--ccooaalleessccee--vvaarrss
           While transforming the program out of the SSA representation,
           attempt to reduce copying by coalescing versions of different user-
           defined variables, instead of just compiler temporaries.  This may
           severely limit the ability to debug an optimized program compiled
           with --ffnnoo--vvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss.  In the negated form, this flag
           prevents SSA coalescing of user variables.  This option is enabled
           by default if optimization is enabled, and it does very little
           otherwise.

       --ffttrreeee--lloooopp--iiff--ccoonnvveerrtt
           Attempt to transform conditional jumps in the innermost loops to
           branch-less equivalents.  The intent is to remove control-flow from
           the innermost loops in order to improve the ability of the
           vectorization pass to handle these loops.  This is enabled by
           default if vectorization is enabled.

       --ffttrreeee--lloooopp--ddiissttrriibbuuttiioonn
           Perform loop distribution.  This flag can improve cache performance
           on big loop bodies and allow further loop optimizations, like
           parallelization or vectorization, to take place.  For example, the
           loop

                   DO I = 1, N
                     A(I) = B(I) + C
                     D(I) = E(I) * F
                   ENDDO

           is transformed to

                   DO I = 1, N
                      A(I) = B(I) + C
                   ENDDO
                   DO I = 1, N
                      D(I) = E(I) * F
                   ENDDO

       --ffttrreeee--lloooopp--ddiissttrriibbuuttee--ppaatttteerrnnss
           Perform loop distribution of patterns that can be code generated
           with calls to a library.  This flag is enabled by default at --OO33.

           This pass distributes the initialization loops and generates a call
           to memset zero.  For example, the loop

                   DO I = 1, N
                     A(I) = 0
                     B(I) = A(I) + I
                   ENDDO

           is transformed to

                   DO I = 1, N
                      A(I) = 0
                   ENDDO
                   DO I = 1, N
                      B(I) = A(I) + I
                   ENDDO

           and the initialization loop is transformed into a call to memset
           zero.

       --fflloooopp--iinntteerrcchhaannggee
           Perform loop interchange outside of graphite.  This flag can
           improve cache performance on loop nest and allow further loop
           optimizations, like vectorization, to take place.  For example, the
           loop

                   for (int i = 0; i < N; i++)
                     for (int j = 0; j < N; j++)
                       for (int k = 0; k < N; k++)
                         c[i][j] = c[i][j] + a[i][k]*b[k][j];

           is transformed to

                   for (int i = 0; i < N; i++)
                     for (int k = 0; k < N; k++)
                       for (int j = 0; j < N; j++)
                         c[i][j] = c[i][j] + a[i][k]*b[k][j];

           This flag is enabled by default at --OO33.

       --fflloooopp--uunnrroollll--aanndd--jjaamm
           Apply unroll and jam transformations on feasible loops.  In a loop
           nest this unrolls the outer loop by some factor and fuses the
           resulting multiple inner loops.  This flag is enabled by default at
           --OO33.

       --ffttrreeee--lloooopp--iimm
           Perform loop invariant motion on trees.  This pass moves only
           invariants that are hard to handle at RTL level (function calls,
           operations that expand to nontrivial sequences of insns).  With
           --ffuunnsswwiittcchh--llooooppss it also moves operands of conditions that are
           invariant out of the loop, so that we can use just trivial
           invariantness analysis in loop unswitching.  The pass also includes
           store motion.

       --ffttrreeee--lloooopp--iivvccaannoonn
           Create a canonical counter for number of iterations in loops for
           which determining number of iterations requires complicated
           analysis.  Later optimizations then may determine the number
           easily.  Useful especially in connection with unrolling.

       --ffiivvooppttss
           Perform induction variable optimizations (strength reduction,
           induction variable merging and induction variable elimination) on
           trees.

       --ffttrreeee--ppaarraalllleelliizzee--llooooppss==nn
           Parallelize loops, i.e., split their iteration space to run in n
           threads.  This is only possible for loops whose iterations are
           independent and can be arbitrarily reordered.  The optimization is
           only profitable on multiprocessor machines, for loops that are CPU-
           intensive, rather than constrained e.g. by memory bandwidth.  This
           option implies --pptthhrreeaadd, and thus is only supported on targets that
           have support for --pptthhrreeaadd.

       --ffttrreeee--ppttaa
           Perform function-local points-to analysis on trees.  This flag is
           enabled by default at --OO and higher.

       --ffttrreeee--ssrraa
           Perform scalar replacement of aggregates.  This pass replaces
           structure references with scalars to prevent committing structures
           to memory too early.  This flag is enabled by default at --OO and
           higher.

       --ffssttoorree--mmeerrggiinngg
           Perform merging of narrow stores to consecutive memory addresses.
           This pass merges contiguous stores of immediate values narrower
           than a word into fewer wider stores to reduce the number of
           instructions.  This is enabled by default at --OO22 and higher as well
           as --OOss.

       --ffttrreeee--tteerr
           Perform temporary expression replacement during the SSA->normal
           phase.  Single use/single def temporaries are replaced at their use
           location with their defining expression.  This results in non-
           GIMPLE code, but gives the expanders much more complex trees to
           work on resulting in better RTL generation.  This is enabled by
           default at --OO and higher.

       --ffttrreeee--ssllssrr
           Perform straight-line strength reduction on trees.  This recognizes
           related expressions involving multiplications and replaces them by
           less expensive calculations when possible.  This is enabled by
           default at --OO and higher.

       --ffttrreeee--vveeccttoorriizzee
           Perform vectorization on trees. This flag enables
           --ffttrreeee--lloooopp--vveeccttoorriizzee and --ffttrreeee--ssllpp--vveeccttoorriizzee if not explicitly
           specified.

       --ffttrreeee--lloooopp--vveeccttoorriizzee
           Perform loop vectorization on trees. This flag is enabled by
           default at --OO33 and when --ffttrreeee--vveeccttoorriizzee is enabled.

       --ffttrreeee--ssllpp--vveeccttoorriizzee
           Perform basic block vectorization on trees. This flag is enabled by
           default at --OO33 and when --ffttrreeee--vveeccttoorriizzee is enabled.

       --ffvveecctt--ccoosstt--mmooddeell==_m_o_d_e_l
           Alter the cost model used for vectorization.  The _m_o_d_e_l argument
           should be one of uunnlliimmiitteedd, ddyynnaammiicc or cchheeaapp.  With the uunnlliimmiitteedd
           model the vectorized code-path is assumed to be profitable while
           with the ddyynnaammiicc model a runtime check guards the vectorized code-
           path to enable it only for iteration counts that will likely
           execute faster than when executing the original scalar loop.  The
           cchheeaapp model disables vectorization of loops where doing so would be
           cost prohibitive for example due to required runtime checks for
           data dependence or alignment but otherwise is equal to the ddyynnaammiicc
           model.  The default cost model depends on other optimization flags
           and is either ddyynnaammiicc or cchheeaapp.

       --ffssiimmdd--ccoosstt--mmooddeell==_m_o_d_e_l
           Alter the cost model used for vectorization of loops marked with
           the OpenMP simd directive.  The _m_o_d_e_l argument should be one of
           uunnlliimmiitteedd, ddyynnaammiicc, cchheeaapp.  All values of _m_o_d_e_l have the same
           meaning as described in --ffvveecctt--ccoosstt--mmooddeell and by default a cost
           model defined with --ffvveecctt--ccoosstt--mmooddeell is used.

       --ffttrreeee--vvrrpp
           Perform Value Range Propagation on trees.  This is similar to the
           constant propagation pass, but instead of values, ranges of values
           are propagated.  This allows the optimizers to remove unnecessary
           range checks like array bound checks and null pointer checks.  This
           is enabled by default at --OO22 and higher.  Null pointer check
           elimination is only done if --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss is
           enabled.

       --ffsspplliitt--ppaatthhss
           Split paths leading to loop backedges.  This can improve dead code
           elimination and common subexpression elimination.  This is enabled
           by default at --OO22 and above.

       --ffsspplliitt--iivvss--iinn--uunnrroolllleerr
           Enables expression of values of induction variables in later
           iterations of the unrolled loop using the value in the first
           iteration.  This breaks long dependency chains, thus improving
           efficiency of the scheduling passes.

           A combination of --ffwweebb and CSE is often sufficient to obtain the
           same effect.  However, that is not reliable in cases where the loop
           body is more complicated than a single basic block.  It also does
           not work at all on some architectures due to restrictions in the
           CSE pass.

           This optimization is enabled by default.

       --ffvvaarriiaabbllee--eexxppaannssiioonn--iinn--uunnrroolllleerr
           With this option, the compiler creates multiple copies of some
           local variables when unrolling a loop, which can result in superior
           code.

       --ffppaarrttiiaall--iinnlliinniinngg
           Inline parts of functions.  This option has any effect only when
           inlining itself is turned on by the --ffiinnlliinnee--ffuunnccttiioonnss or
           --ffiinnlliinnee--ssmmaallll--ffuunnccttiioonnss options.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffpprreeddiiccttiivvee--ccoommmmoonniinngg
           Perform predictive commoning optimization, i.e., reusing
           computations (especially memory loads and stores) performed in
           previous iterations of loops.

           This option is enabled at level --OO33.

       --ffpprreeffeettcchh--lloooopp--aarrrraayyss
           If supported by the target machine, generate instructions to
           prefetch memory to improve the performance of loops that access
           large arrays.

           This option may generate better or worse code; results are highly
           dependent on the structure of loops within the source code.

           Disabled at level --OOss.

       --ffnnoo--pprriinnttff--rreettuurrnn--vvaalluuee
           Do not substitute constants for known return value of formatted
           output functions such as "sprintf", "snprintf", "vsprintf", and
           "vsnprintf" (but not "printf" of "fprintf").  This transformation
           allows GCC to optimize or even eliminate branches based on the
           known return value of these functions called with arguments that
           are either constant, or whose values are known to be in a range
           that makes determining the exact return value possible.  For
           example, when --ffpprriinnttff--rreettuurrnn--vvaalluuee is in effect, both the branch
           and the body of the "if" statement (but not the call to "snprint")
           can be optimized away when "i" is a 32-bit or smaller integer
           because the return value is guaranteed to be at most 8.

                   char buf[9];
                   if (snprintf (buf, "%08x", i) >= sizeof buf)
                     ...

           The --ffpprriinnttff--rreettuurrnn--vvaalluuee option relies on other optimizations and
           yields best results with --OO22 and above.  It works in tandem with
           the --WWffoorrmmaatt--oovveerrffllooww and --WWffoorrmmaatt--ttrruunnccaattiioonn options.  The
           --ffpprriinnttff--rreettuurrnn--vvaalluuee option is enabled by default.

       --ffnnoo--ppeeeepphhoollee
       --ffnnoo--ppeeeepphhoollee22
           Disable any machine-specific peephole optimizations.  The
           difference between --ffnnoo--ppeeeepphhoollee and --ffnnoo--ppeeeepphhoollee22 is in how they
           are implemented in the compiler; some targets use one, some use the
           other, a few use both.

           --ffppeeeepphhoollee is enabled by default.  --ffppeeeepphhoollee22 enabled at levels
           --OO22, --OO33, --OOss.

       --ffnnoo--gguueessss--bbrraanncchh--pprroobbaabbiilliittyy
           Do not guess branch probabilities using heuristics.

           GCC uses heuristics to guess branch probabilities if they are not
           provided by profiling feedback (--ffpprrooffiillee--aarrccss).  These heuristics
           are based on the control flow graph.  If some branch probabilities
           are specified by "__builtin_expect", then the heuristics are used
           to guess branch probabilities for the rest of the control flow
           graph, taking the "__builtin_expect" info into account.  The
           interactions between the heuristics and "__builtin_expect" can be
           complex, and in some cases, it may be useful to disable the
           heuristics so that the effects of "__builtin_expect" are easier to
           understand.

           The default is --ffgguueessss--bbrraanncchh--pprroobbaabbiilliittyy at levels --OO, --OO22, --OO33,
           --OOss.

       --ffrreeoorrddeerr--bblloocckkss
           Reorder basic blocks in the compiled function in order to reduce
           number of taken branches and improve code locality.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffrreeoorrddeerr--bblloocckkss--aallggoorriitthhmm==_a_l_g_o_r_i_t_h_m
           Use the specified algorithm for basic block reordering.  The
           _a_l_g_o_r_i_t_h_m argument can be ssiimmppllee, which does not increase code size
           (except sometimes due to secondary effects like alignment), or ssttcc,
           the "software trace cache" algorithm, which tries to put all often
           executed code together, minimizing the number of branches executed
           by making extra copies of code.

           The default is ssiimmppllee at levels --OO, --OOss, and ssttcc at levels --OO22,
           --OO33.

       --ffrreeoorrddeerr--bblloocckkss--aanndd--ppaarrttiittiioonn
           In addition to reordering basic blocks in the compiled function, in
           order to reduce number of taken branches, partitions hot and cold
           basic blocks into separate sections of the assembly and _._o files,
           to improve paging and cache locality performance.

           This optimization is automatically turned off in the presence of
           exception handling or unwind tables (on targets using
           setjump/longjump or target specific scheme), for linkonce sections,
           for functions with a user-defined section attribute and on any
           architecture that does not support named sections.  When
           --ffsspplliitt--ssttaacckk is used this option is not enabled by default (to
           avoid linker errors), but may be enabled explicitly (if using a
           working linker).

           Enabled for x86 at levels --OO22, --OO33, --OOss.

       --ffrreeoorrddeerr--ffuunnccttiioonnss
           Reorder functions in the object file in order to improve code
           locality.  This is implemented by using special subsections
           ".text.hot" for most frequently executed functions and
           ".text.unlikely" for unlikely executed functions.  Reordering is
           done by the linker so object file format must support named
           sections and linker must place them in a reasonable way.

           Also profile feedback must be available to make this option
           effective.  See --ffpprrooffiillee--aarrccss for details.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffssttrriicctt--aalliiaassiinngg
           Allow the compiler to assume the strictest aliasing rules
           applicable to the language being compiled.  For C (and C++), this
           activates optimizations based on the type of expressions.  In
           particular, an object of one type is assumed never to reside at the
           same address as an object of a different type, unless the types are
           almost the same.  For example, an "unsigned int" can alias an
           "int", but not a "void*" or a "double".  A character type may alias
           any other type.

           Pay special attention to code like this:

                   union a_union {
                     int i;
                     double d;
                   };

                   int f() {
                     union a_union t;
                     t.d = 3.0;
                     return t.i;
                   }

           The practice of reading from a different union member than the one
           most recently written to (called "type-punning") is common.  Even
           with --ffssttrriicctt--aalliiaassiinngg, type-punning is allowed, provided the
           memory is accessed through the union type.  So, the code above
           works as expected.    However, this code might not:

                   int f() {
                     union a_union t;
                     int* ip;
                     t.d = 3.0;
                     ip = &t.i;
                     return *ip;
                   }

           Similarly, access by taking the address, casting the resulting
           pointer and dereferencing the result has undefined behavior, even
           if the cast uses a union type, e.g.:

                   int f() {
                     double d = 3.0;
                     return ((union a_union *) &d)->i;
                   }

           The --ffssttrriicctt--aalliiaassiinngg option is enabled at levels --OO22, --OO33, --OOss.

       --ffaalliiggnn--ffuunnccttiioonnss
       --ffaalliiggnn--ffuunnccttiioonnss==_n
           Align the start of functions to the next power-of-two greater than
           _n, skipping up to _n bytes.  For instance, --ffaalliiggnn--ffuunnccttiioonnss==3322
           aligns functions to the next 32-byte boundary, but
           --ffaalliiggnn--ffuunnccttiioonnss==2244 aligns to the next 32-byte boundary only if
           this can be done by skipping 23 bytes or less.

           --ffnnoo--aalliiggnn--ffuunnccttiioonnss and --ffaalliiggnn--ffuunnccttiioonnss==11 are equivalent and
           mean that functions are not aligned.

           Some assemblers only support this flag when _n is a power of two; in
           that case, it is rounded up.

           If _n is not specified or is zero, use a machine-dependent default.
           The maximum allowed _n option value is 65536.

           Enabled at levels --OO22, --OO33.

       --fflliimmiitt--ffuunnccttiioonn--aalliiggnnmmeenntt
           If this option is enabled, the compiler tries to avoid
           unnecessarily overaligning functions. It attempts to instruct the
           assembler to align by the amount specified by --ffaalliiggnn--ffuunnccttiioonnss,
           but not to skip more bytes than the size of the function.

       --ffaalliiggnn--llaabbeellss
       --ffaalliiggnn--llaabbeellss==_n
           Align all branch targets to a power-of-two boundary, skipping up to
           _n bytes like --ffaalliiggnn--ffuunnccttiioonnss.  This option can easily make code
           slower, because it must insert dummy operations for when the branch
           target is reached in the usual flow of the code.

           --ffnnoo--aalliiggnn--llaabbeellss and --ffaalliiggnn--llaabbeellss==11 are equivalent and mean that
           labels are not aligned.

           If --ffaalliiggnn--llooooppss or --ffaalliiggnn--jjuummppss are applicable and are greater
           than this value, then their values are used instead.

           If _n is not specified or is zero, use a machine-dependent default
           which is very likely to be 11, meaning no alignment.  The maximum
           allowed _n option value is 65536.

           Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--llooooppss
       --ffaalliiggnn--llooooppss==_n
           Align loops to a power-of-two boundary, skipping up to _n bytes like
           --ffaalliiggnn--ffuunnccttiioonnss.  If the loops are executed many times, this
           makes up for any execution of the dummy operations.

           --ffnnoo--aalliiggnn--llooooppss and --ffaalliiggnn--llooooppss==11 are equivalent and mean that
           loops are not aligned.  The maximum allowed _n option value is
           65536.

           If _n is not specified or is zero, use a machine-dependent default.

           Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--jjuummppss
       --ffaalliiggnn--jjuummppss==_n
           Align branch targets to a power-of-two boundary, for branch targets
           where the targets can only be reached by jumping, skipping up to _n
           bytes like --ffaalliiggnn--ffuunnccttiioonnss.  In this case, no dummy operations
           need be executed.

           --ffnnoo--aalliiggnn--jjuummppss and --ffaalliiggnn--jjuummppss==11 are equivalent and mean that
           loops are not aligned.

           If _n is not specified or is zero, use a machine-dependent default.
           The maximum allowed _n option value is 65536.

           Enabled at levels --OO22, --OO33.

       --ffuunniitt--aatt--aa--ttiimmee
           This option is left for compatibility reasons. --ffuunniitt--aatt--aa--ttiimmee has
           no effect, while --ffnnoo--uunniitt--aatt--aa--ttiimmee implies --ffnnoo--ttoopplleevveell--rreeoorrddeerr
           and --ffnnoo--sseeccttiioonn--aanncchhoorrss.

           Enabled by default.

       --ffnnoo--ttoopplleevveell--rreeoorrddeerr
           Do not reorder top-level functions, variables, and "asm"
           statements.  Output them in the same order that they appear in the
           input file.  When this option is used, unreferenced static
           variables are not removed.  This option is intended to support
           existing code that relies on a particular ordering.  For new code,
           it is better to use attributes when possible.

           Enabled at level --OO00.  When disabled explicitly, it also implies
           --ffnnoo--sseeccttiioonn--aanncchhoorrss, which is otherwise enabled at --OO00 on some
           targets.

       --ffwweebb
           Constructs webs as commonly used for register allocation purposes
           and assign each web individual pseudo register.  This allows the
           register allocation pass to operate on pseudos directly, but also
           strengthens several other optimization passes, such as CSE, loop
           optimizer and trivial dead code remover.  It can, however, make
           debugging impossible, since variables no longer stay in a "home
           register".

           Enabled by default with --ffuunnrroollll--llooooppss.

       --ffwwhhoollee--pprrooggrraamm
           Assume that the current compilation unit represents the whole
           program being compiled.  All public functions and variables with
           the exception of "main" and those merged by attribute
           "externally_visible" become static functions and in effect are
           optimized more aggressively by interprocedural optimizers.

           This option should not be used in combination with --ffllttoo.  Instead
           relying on a linker plugin should provide safer and more precise
           information.

       --ffllttoo[[==_n]]
           This option runs the standard link-time optimizer.  When invoked
           with source code, it generates GIMPLE (one of GCC's internal
           representations) and writes it to special ELF sections in the
           object file.  When the object files are linked together, all the
           function bodies are read from these ELF sections and instantiated
           as if they had been part of the same translation unit.

           To use the link-time optimizer, --ffllttoo and optimization options
           should be specified at compile time and during the final link.  It
           is recommended that you compile all the files participating in the
           same link with the same options and also specify those options at
           link time.  For example:

                   gcc -c -O2 -flto foo.c
                   gcc -c -O2 -flto bar.c
                   gcc -o myprog -flto -O2 foo.o bar.o

           The first two invocations to GCC save a bytecode representation of
           GIMPLE into special ELF sections inside _f_o_o_._o and _b_a_r_._o.  The final
           invocation reads the GIMPLE bytecode from _f_o_o_._o and _b_a_r_._o, merges
           the two files into a single internal image, and compiles the result
           as usual.  Since both _f_o_o_._o and _b_a_r_._o are merged into a single
           image, this causes all the interprocedural analyses and
           optimizations in GCC to work across the two files as if they were a
           single one.  This means, for example, that the inliner is able to
           inline functions in _b_a_r_._o into functions in _f_o_o_._o and vice-versa.

           Another (simpler) way to enable link-time optimization is:

                   gcc -o myprog -flto -O2 foo.c bar.c

           The above generates bytecode for _f_o_o_._c and _b_a_r_._c, merges them
           together into a single GIMPLE representation and optimizes them as
           usual to produce _m_y_p_r_o_g.

           The only important thing to keep in mind is that to enable link-
           time optimizations you need to use the GCC driver to perform the
           link step.  GCC then automatically performs link-time optimization
           if any of the objects involved were compiled with the --ffllttoo
           command-line option.  You generally should specify the optimization
           options to be used for link-time optimization though GCC tries to
           be clever at guessing an optimization level to use from the options
           used at compile time if you fail to specify one at link time.  You
           can always override the automatic decision to do link-time
           optimization by passing --ffnnoo--llttoo to the link command.

           To make whole program optimization effective, it is necessary to
           make certain whole program assumptions.  The compiler needs to know
           what functions and variables can be accessed by libraries and
           runtime outside of the link-time optimized unit.  When supported by
           the linker, the linker plugin (see --ffuussee--lliinnkkeerr--pplluuggiinn) passes
           information to the compiler about used and externally visible
           symbols.  When the linker plugin is not available, --ffwwhhoollee--pprrooggrraamm
           should be used to allow the compiler to make these assumptions,
           which leads to more aggressive optimization decisions.

           When --ffuussee--lliinnkkeerr--pplluuggiinn is not enabled, when a file is compiled
           with --ffllttoo, the generated object file is larger than a regular
           object file because it contains GIMPLE bytecodes and the usual
           final code (see --ffffaatt--llttoo--oobbjjeeccttss.  This means that object files
           with LTO information can be linked as normal object files; if
           --ffnnoo--llttoo is passed to the linker, no interprocedural optimizations
           are applied.  Note that when --ffnnoo--ffaatt--llttoo--oobbjjeeccttss is enabled the
           compile stage is faster but you cannot perform a regular, non-LTO
           link on them.

           Additionally, the optimization flags used to compile individual
           files are not necessarily related to those used at link time.  For
           instance,

                   gcc -c -O0 -ffat-lto-objects -flto foo.c
                   gcc -c -O0 -ffat-lto-objects -flto bar.c
                   gcc -o myprog -O3 foo.o bar.o

           This produces individual object files with unoptimized assembler
           code, but the resulting binary _m_y_p_r_o_g is optimized at --OO33.  If,
           instead, the final binary is generated with --ffnnoo--llttoo, then _m_y_p_r_o_g
           is not optimized.

           When producing the final binary, GCC only applies link-time
           optimizations to those files that contain bytecode.  Therefore, you
           can mix and match object files and libraries with GIMPLE bytecodes
           and final object code.  GCC automatically selects which files to
           optimize in LTO mode and which files to link without further
           processing.

           There are some code generation flags preserved by GCC when
           generating bytecodes, as they need to be used during the final link
           stage.  Generally options specified at link time override those
           specified at compile time.

           If you do not specify an optimization level option --OO at link time,
           then GCC uses the highest optimization level used when compiling
           the object files.

           Currently, the following options and their settings are taken from
           the first object file that explicitly specifies them: --ffPPIICC, --ffppiicc,
           --ffppiiee, --ffccoommmmoonn, --ffeexxcceeppttiioonnss, --ffnnoonn--ccaallll--eexxcceeppttiioonnss, --ffggnnuu--ttmm and
           all the --mm target flags.

           Certain ABI-changing flags are required to match in all compilation
           units, and trying to override this at link time with a conflicting
           value is ignored.  This includes options such as
           --ffrreegg--ssttrruucctt--rreettuurrnn and --ffppcccc--ssttrruucctt--rreettuurrnn.

           Other options such as --ffffpp--ccoonnttrraacctt, --ffnnoo--ssttrriicctt--oovveerrffllooww, --ffwwrraappvv,
           --ffnnoo--ttrraappvv or --ffnnoo--ssttrriicctt--aalliiaassiinngg are passed through to the link
           stage and merged conservatively for conflicting translation units.
           Specifically --ffnnoo--ssttrriicctt--oovveerrffllooww, --ffwwrraappvv and --ffnnoo--ttrraappvv take
           precedence; and for example --ffffpp--ccoonnttrraacctt==ooffff takes precedence over
           --ffffpp--ccoonnttrraacctt==ffaasstt.  You can override them at link time.

           If LTO encounters objects with C linkage declared with incompatible
           types in separate translation units to be linked together
           (undefined behavior according to ISO C99 6.2.7), a non-fatal
           diagnostic may be issued.  The behavior is still undefined at run
           time.  Similar diagnostics may be raised for other languages.

           Another feature of LTO is that it is possible to apply
           interprocedural optimizations on files written in different
           languages:

                   gcc -c -flto foo.c
                   g++ -c -flto bar.cc
                   gfortran -c -flto baz.f90
                   g++ -o myprog -flto -O3 foo.o bar.o baz.o -lgfortran

           Notice that the final link is done with gg++++ to get the C++ runtime
           libraries and --llggffoorrttrraann is added to get the Fortran runtime
           libraries.  In general, when mixing languages in LTO mode, you
           should use the same link command options as when mixing languages
           in a regular (non-LTO) compilation.

           If object files containing GIMPLE bytecode are stored in a library
           archive, say _l_i_b_f_o_o_._a, it is possible to extract and use them in an
           LTO link if you are using a linker with plugin support.  To create
           static libraries suitable for LTO, use ggcccc--aarr and ggcccc--rraannlliibb
           instead of aarr and rraannlliibb; to show the symbols of object files with
           GIMPLE bytecode, use ggcccc--nnmm.  Those commands require that aarr,
           rraannlliibb and nnmm have been compiled with plugin support.  At link
           time, use the flag --ffuussee--lliinnkkeerr--pplluuggiinn to ensure that the library
           participates in the LTO optimization process:

                   gcc -o myprog -O2 -flto -fuse-linker-plugin a.o b.o -lfoo

           With the linker plugin enabled, the linker extracts the needed
           GIMPLE files from _l_i_b_f_o_o_._a and passes them on to the running GCC to
           make them part of the aggregated GIMPLE image to be optimized.

           If you are not using a linker with plugin support and/or do not
           enable the linker plugin, then the objects inside _l_i_b_f_o_o_._a are
           extracted and linked as usual, but they do not participate in the
           LTO optimization process.  In order to make a static library
           suitable for both LTO optimization and usual linkage, compile its
           object files with --ffllttoo --ffffaatt--llttoo--oobbjjeeccttss.

           Link-time optimizations do not require the presence of the whole
           program to operate.  If the program does not require any symbols to
           be exported, it is possible to combine --ffllttoo and --ffwwhhoollee--pprrooggrraamm to
           allow the interprocedural optimizers to use more aggressive
           assumptions which may lead to improved optimization opportunities.
           Use of --ffwwhhoollee--pprrooggrraamm is not needed when linker plugin is active
           (see --ffuussee--lliinnkkeerr--pplluuggiinn).

           The current implementation of LTO makes no attempt to generate
           bytecode that is portable between different types of hosts.  The
           bytecode files are versioned and there is a strict version check,
           so bytecode files generated in one version of GCC do not work with
           an older or newer version of GCC.

           Link-time optimization does not work well with generation of
           debugging information on systems other than those using a
           combination of ELF and DWARF.

           If you specify the optional _n, the optimization and code generation
           done at link time is executed in parallel using _n parallel jobs by
           utilizing an installed mmaakkee program.  The environment variable MMAAKKEE
           may be used to override the program used.  The default value for _n
           is 1.

           You can also specify --ffllttoo==jjoobbsseerrvveerr to use GNU make's job server
           mode to determine the number of parallel jobs. This is useful when
           the Makefile calling GCC is already executing in parallel.  You
           must prepend a ++ to the command recipe in the parent Makefile for
           this to work.  This option likely only works if MMAAKKEE is GNU make.

       --ffllttoo--ppaarrttiittiioonn==_a_l_g
           Specify the partitioning algorithm used by the link-time optimizer.
           The value is either 11ttoo11 to specify a partitioning mirroring the
           original source files or bbaallaanncceedd to specify partitioning into
           equally sized chunks (whenever possible) or mmaaxx to create new
           partition for every symbol where possible.  Specifying nnoonnee as an
           algorithm disables partitioning and streaming completely.  The
           default value is bbaallaanncceedd. While 11ttoo11 can be used as an workaround
           for various code ordering issues, the mmaaxx partitioning is intended
           for internal testing only.  The value oonnee specifies that exactly
           one partition should be used while the value nnoonnee bypasses
           partitioning and executes the link-time optimization step directly
           from the WPA phase.

       --ffllttoo--ooddrr--ttyyppee--mmeerrggiinngg
           Enable streaming of mangled types names of C++ types and their
           unification at link time.  This increases size of LTO object files,
           but enables diagnostics about One Definition Rule violations.

       --ffllttoo--ccoommpprreessssiioonn--lleevveell==_n
           This option specifies the level of compression used for
           intermediate language written to LTO object files, and is only
           meaningful in conjunction with LTO mode (--ffllttoo).  Valid values are
           0 (no compression) to 9 (maximum compression).  Values outside this
           range are clamped to either 0 or 9.  If the option is not given, a
           default balanced compression setting is used.

       --ffuussee--lliinnkkeerr--pplluuggiinn
           Enables the use of a linker plugin during link-time optimization.
           This option relies on plugin support in the linker, which is
           available in gold or in GNU ld 2.21 or newer.

           This option enables the extraction of object files with GIMPLE
           bytecode out of library archives. This improves the quality of
           optimization by exposing more code to the link-time optimizer.
           This information specifies what symbols can be accessed externally
           (by non-LTO object or during dynamic linking).  Resulting code
           quality improvements on binaries (and shared libraries that use
           hidden visibility) are similar to --ffwwhhoollee--pprrooggrraamm.  See --ffllttoo for a
           description of the effect of this flag and how to use it.

           This option is enabled by default when LTO support in GCC is
           enabled and GCC was configured for use with a linker supporting
           plugins (GNU ld 2.21 or newer or gold).

       --ffffaatt--llttoo--oobbjjeeccttss
           Fat LTO objects are object files that contain both the intermediate
           language and the object code. This makes them usable for both LTO
           linking and normal linking. This option is effective only when
           compiling with --ffllttoo and is ignored at link time.

           --ffnnoo--ffaatt--llttoo--oobbjjeeccttss improves compilation time over plain LTO, but
           requires the complete toolchain to be aware of LTO. It requires a
           linker with linker plugin support for basic functionality.
           Additionally, nnmm, aarr and rraannlliibb need to support linker plugins to
           allow a full-featured build environment (capable of building static
           libraries etc).  GCC provides the ggcccc--aarr, ggcccc--nnmm, ggcccc--rraannlliibb
           wrappers to pass the right options to these tools. With non fat LTO
           makefiles need to be modified to use them.

           Note that modern binutils provide plugin auto-load mechanism.
           Installing the linker plugin into _$_l_i_b_d_i_r_/_b_f_d_-_p_l_u_g_i_n_s has the same
           effect as usage of the command wrappers (ggcccc--aarr, ggcccc--nnmm and ggcccc--
           rraannlliibb).

           The default is --ffnnoo--ffaatt--llttoo--oobbjjeeccttss on targets with linker plugin
           support.

       --ffccoommppaarree--eelliimm
           After register allocation and post-register allocation instruction
           splitting, identify arithmetic instructions that compute processor
           flags similar to a comparison operation based on that arithmetic.
           If possible, eliminate the explicit comparison operation.

           This pass only applies to certain targets that cannot explicitly
           represent the comparison operation before register allocation is
           complete.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffccpprroopp--rreeggiisstteerrss
           After register allocation and post-register allocation instruction
           splitting, perform a copy-propagation pass to try to reduce
           scheduling dependencies and occasionally eliminate the copy.

           Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffpprrooffiillee--ccoorrrreeccttiioonn
           Profiles collected using an instrumented binary for multi-threaded
           programs may be inconsistent due to missed counter updates. When
           this option is specified, GCC uses heuristics to correct or smooth
           out such inconsistencies. By default, GCC emits an error message
           when an inconsistent profile is detected.

       --ffpprrooffiillee--uussee
       --ffpprrooffiillee--uussee==_p_a_t_h
           Enable profile feedback-directed optimizations, and the following
           optimizations which are generally profitable only with profile
           feedback available: --ffbbrraanncchh--pprroobbaabbiilliittiieess, --ffvvpptt, --ffuunnrroollll--llooooppss,
           --ffppeeeell--llooooppss, --ffttrraacceerr, --ffttrreeee--vveeccttoorriizzee, and ffttrreeee--lloooopp--
           ddiissttrriibbuuttee--ppaatttteerrnnss.

           Before you can use this option, you must first generate profiling
           information.

           By default, GCC emits an error message if the feedback profiles do
           not match the source code.  This error can be turned into a warning
           by using --WWccoovveerraaggee--mmiissmmaattcchh.  Note this may result in poorly
           optimized code.

           If _p_a_t_h is specified, GCC looks at the _p_a_t_h to find the profile
           feedback data files. See --ffpprrooffiillee--ddiirr.

       --ffaauuttoo--pprrooffiillee
       --ffaauuttoo--pprrooffiillee==_p_a_t_h
           Enable sampling-based feedback-directed optimizations, and the
           following optimizations which are generally profitable only with
           profile feedback available: --ffbbrraanncchh--pprroobbaabbiilliittiieess, --ffvvpptt,
           --ffuunnrroollll--llooooppss, --ffppeeeell--llooooppss, --ffttrraacceerr, --ffttrreeee--vveeccttoorriizzee,
           --ffiinnlliinnee--ffuunnccttiioonnss, --ffiippaa--ccpp, --ffiippaa--ccpp--cclloonnee,
           --ffpprreeddiiccttiivvee--ccoommmmoonniinngg, --ffuunnsswwiittcchh--llooooppss, --ffggccssee--aafftteerr--rreellooaadd, and
           --ffttrreeee--lloooopp--ddiissttrriibbuuttee--ppaatttteerrnnss.

           _p_a_t_h is the name of a file containing AutoFDO profile information.
           If omitted, it defaults to _f_b_d_a_t_a_._a_f_d_o in the current directory.

           Producing an AutoFDO profile data file requires running your
           program with the ppeerrff utility on a supported GNU/Linux target
           system.  For more information, see <hhttttppss::////ppeerrff..wwiikkii..kkeerrnneell..oorrgg//>.

           E.g.

                   perf record -e br_inst_retired:near_taken -b -o perf.data \
                       -- your_program

           Then use the ccrreeaattee__ggccoovv tool to convert the raw profile data to a
           format that can be used by GCC.  You must also supply the
           unstripped binary for your program to this tool.  See
           <hhttttppss::////ggiitthhuubb..ccoomm//ggooooggllee//aauuttooffddoo>.

           E.g.

                   create_gcov --binary=your_program.unstripped --profile=perf.data \
                       --gcov=profile.afdo

       The following options control compiler behavior regarding floating-
       point arithmetic.  These options trade off between speed and
       correctness.  All must be specifically enabled.

       --ffffllooaatt--ssttoorree
           Do not store floating-point variables in registers, and inhibit
           other options that might change whether a floating-point value is
           taken from a register or memory.

           This option prevents undesirable excess precision on machines such
           as the 68000 where the floating registers (of the 68881) keep more
           precision than a "double" is supposed to have.  Similarly for the
           x86 architecture.  For most programs, the excess precision does
           only good, but a few programs rely on the precise definition of
           IEEE floating point.  Use --ffffllooaatt--ssttoorree for such programs, after
           modifying them to store all pertinent intermediate computations
           into variables.

       --ffeexxcceessss--pprreecciissiioonn==_s_t_y_l_e
           This option allows further control over excess precision on
           machines where floating-point operations occur in a format with
           more precision or range than the IEEE standard and interchange
           floating-point types.  By default, --ffeexxcceessss--pprreecciissiioonn==ffaasstt is in
           effect; this means that operations may be carried out in a wider
           precision than the types specified in the source if that would
           result in faster code, and it is unpredictable when rounding to the
           types specified in the source code takes place.  When compiling C,
           if --ffeexxcceessss--pprreecciissiioonn==ssttaannddaarrdd is specified then excess precision
           follows the rules specified in ISO C99; in particular, both casts
           and assignments cause values to be rounded to their semantic types
           (whereas --ffffllooaatt--ssttoorree only affects assignments).  This option is
           enabled by default for C if a strict conformance option such as
           --ssttdd==cc9999 is used.  --ffffaasstt--mmaatthh enables --ffeexxcceessss--pprreecciissiioonn==ffaasstt by
           default regardless of whether a strict conformance option is used.

           --ffeexxcceessss--pprreecciissiioonn==ssttaannddaarrdd is not implemented for languages other
           than C.  On the x86, it has no effect if --mmffppmmaatthh==ssssee or
           --mmffppmmaatthh==ssssee++338877 is specified; in the former case, IEEE semantics
           apply without excess precision, and in the latter, rounding is
           unpredictable.

       --ffffaasstt--mmaatthh
           Sets the options --ffnnoo--mmaatthh--eerrrrnnoo, --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss,
           --ffffiinniittee--mmaatthh--oonnllyy, --ffnnoo--rroouunnddiinngg--mmaatthh, --ffnnoo--ssiiggnnaalliinngg--nnaannss,
           --ffccxx--lliimmiitteedd--rraannggee and --ffeexxcceessss--pprreecciissiioonn==ffaasstt.

           This option causes the preprocessor macro "__FAST_MATH__" to be
           defined.

           This option is not turned on by any --OO option besides --OOffaasstt since
           it can result in incorrect output for programs that depend on an
           exact implementation of IEEE or ISO rules/specifications for math
           functions. It may, however, yield faster code for programs that do
           not require the guarantees of these specifications.

       --ffnnoo--mmaatthh--eerrrrnnoo
           Do not set "errno" after calling math functions that are executed
           with a single instruction, e.g., "sqrt".  A program that relies on
           IEEE exceptions for math error handling may want to use this flag
           for speed while maintaining IEEE arithmetic compatibility.

           This option is not turned on by any --OO option since it can result
           in incorrect output for programs that depend on an exact
           implementation of IEEE or ISO rules/specifications for math
           functions. It may, however, yield faster code for programs that do
           not require the guarantees of these specifications.

           The default is --ffmmaatthh--eerrrrnnoo.

           On Darwin systems, the math library never sets "errno".  There is
           therefore no reason for the compiler to consider the possibility
           that it might, and --ffnnoo--mmaatthh--eerrrrnnoo is the default.

       --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss
           Allow optimizations for floating-point arithmetic that (a) assume
           that arguments and results are valid and (b) may violate IEEE or
           ANSI standards.  When used at link time, it may include libraries
           or startup files that change the default FPU control word or other
           similar optimizations.

           This option is not turned on by any --OO option since it can result
           in incorrect output for programs that depend on an exact
           implementation of IEEE or ISO rules/specifications for math
           functions. It may, however, yield faster code for programs that do
           not require the guarantees of these specifications.  Enables
           --ffnnoo--ssiiggnneedd--zzeerrooss, --ffnnoo--ttrraappppiinngg--mmaatthh, --ffaassssoocciiaattiivvee--mmaatthh and
           --ffrreecciipprrooccaall--mmaatthh.

           The default is --ffnnoo--uunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss.

       --ffaassssoocciiaattiivvee--mmaatthh
           Allow re-association of operands in series of floating-point
           operations.  This violates the ISO C and C++ language standard by
           possibly changing computation result.  NOTE: re-ordering may change
           the sign of zero as well as ignore NaNs and inhibit or create
           underflow or overflow (and thus cannot be used on code that relies
           on rounding behavior like "(x + 2**52) - 2**52".  May also reorder
           floating-point comparisons and thus may not be used when ordered
           comparisons are required.  This option requires that both
           --ffnnoo--ssiiggnneedd--zzeerrooss and --ffnnoo--ttrraappppiinngg--mmaatthh be in effect.  Moreover,
           it doesn't make much sense with --ffrroouunnddiinngg--mmaatthh. For Fortran the
           option is automatically enabled when both --ffnnoo--ssiiggnneedd--zzeerrooss and
           --ffnnoo--ttrraappppiinngg--mmaatthh are in effect.

           The default is --ffnnoo--aassssoocciiaattiivvee--mmaatthh.

       --ffrreecciipprrooccaall--mmaatthh
           Allow the reciprocal of a value to be used instead of dividing by
           the value if this enables optimizations.  For example "x / y" can
           be replaced with "x * (1/y)", which is useful if "(1/y)" is subject
           to common subexpression elimination.  Note that this loses
           precision and increases the number of flops operating on the value.

           The default is --ffnnoo--rreecciipprrooccaall--mmaatthh.

       --ffffiinniittee--mmaatthh--oonnllyy
           Allow optimizations for floating-point arithmetic that assume that
           arguments and results are not NaNs or +-Infs.

           This option is not turned on by any --OO option since it can result
           in incorrect output for programs that depend on an exact
           implementation of IEEE or ISO rules/specifications for math
           functions. It may, however, yield faster code for programs that do
           not require the guarantees of these specifications.

           The default is --ffnnoo--ffiinniittee--mmaatthh--oonnllyy.

       --ffnnoo--ssiiggnneedd--zzeerrooss
           Allow optimizations for floating-point arithmetic that ignore the
           signedness of zero.  IEEE arithmetic specifies the behavior of
           distinct +0.0 and -0.0 values, which then prohibits simplification
           of expressions such as x+0.0 or 0.0*x (even with
           --ffffiinniittee--mmaatthh--oonnllyy).  This option implies that the sign of a zero
           result isn't significant.

           The default is --ffssiiggnneedd--zzeerrooss.

       --ffnnoo--ttrraappppiinngg--mmaatthh
           Compile code assuming that floating-point operations cannot
           generate user-visible traps.  These traps include division by zero,
           overflow, underflow, inexact result and invalid operation.  This
           option requires that --ffnnoo--ssiiggnnaalliinngg--nnaannss be in effect.  Setting
           this option may allow faster code if one relies on "non-stop" IEEE
           arithmetic, for example.

           This option should never be turned on by any --OO option since it can
           result in incorrect output for programs that depend on an exact
           implementation of IEEE or ISO rules/specifications for math
           functions.

           The default is --ffttrraappppiinngg--mmaatthh.

       --ffrroouunnddiinngg--mmaatthh
           Disable transformations and optimizations that assume default
           floating-point rounding behavior.  This is round-to-zero for all
           floating point to integer conversions, and round-to-nearest for all
           other arithmetic truncations.  This option should be specified for
           programs that change the FP rounding mode dynamically, or that may
           be executed with a non-default rounding mode.  This option disables
           constant folding of floating-point expressions at compile time
           (which may be affected by rounding mode) and arithmetic
           transformations that are unsafe in the presence of sign-dependent
           rounding modes.

           The default is --ffnnoo--rroouunnddiinngg--mmaatthh.

           This option is experimental and does not currently guarantee to
           disable all GCC optimizations that are affected by rounding mode.
           Future versions of GCC may provide finer control of this setting
           using C99's "FENV_ACCESS" pragma.  This command-line option will be
           used to specify the default state for "FENV_ACCESS".

       --ffssiiggnnaalliinngg--nnaannss
           Compile code assuming that IEEE signaling NaNs may generate user-
           visible traps during floating-point operations.  Setting this
           option disables optimizations that may change the number of
           exceptions visible with signaling NaNs.  This option implies
           --ffttrraappppiinngg--mmaatthh.

           This option causes the preprocessor macro "__SUPPORT_SNAN__" to be
           defined.

           The default is --ffnnoo--ssiiggnnaalliinngg--nnaannss.

           This option is experimental and does not currently guarantee to
           disable all GCC optimizations that affect signaling NaN behavior.

       --ffnnoo--ffpp--iinntt--bbuuiillttiinn--iinneexxaacctt
           Do not allow the built-in functions "ceil", "floor", "round" and
           "trunc", and their "float" and "long double" variants, to generate
           code that raises the "inexact" floating-point exception for
           noninteger arguments.  ISO C99 and C11 allow these functions to
           raise the "inexact" exception, but ISO/IEC TS 18661-1:2014, the C
           bindings to IEEE 754-2008, does not allow these functions to do so.

           The default is --ffffpp--iinntt--bbuuiillttiinn--iinneexxaacctt, allowing the exception to
           be raised.  This option does nothing unless --ffttrraappppiinngg--mmaatthh is in
           effect.

           Even if --ffnnoo--ffpp--iinntt--bbuuiillttiinn--iinneexxaacctt is used, if the functions
           generate a call to a library function then the "inexact" exception
           may be raised if the library implementation does not follow TS
           18661.

       --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt
           Treat floating-point constants as single precision instead of
           implicitly converting them to double-precision constants.

       --ffccxx--lliimmiitteedd--rraannggee
           When enabled, this option states that a range reduction step is not
           needed when performing complex division.  Also, there is no
           checking whether the result of a complex multiplication or division
           is "NaN + I*NaN", with an attempt to rescue the situation in that
           case.  The default is --ffnnoo--ccxx--lliimmiitteedd--rraannggee, but is enabled by
           --ffffaasstt--mmaatthh.

           This option controls the default setting of the ISO C99
           "CX_LIMITED_RANGE" pragma.  Nevertheless, the option applies to all
           languages.

       --ffccxx--ffoorrttrraann--rruulleess
           Complex multiplication and division follow Fortran rules.  Range
           reduction is done as part of complex division, but there is no
           checking whether the result of a complex multiplication or division
           is "NaN + I*NaN", with an attempt to rescue the situation in that
           case.

           The default is --ffnnoo--ccxx--ffoorrttrraann--rruulleess.

       The following options control optimizations that may improve
       performance, but are not enabled by any --OO options.  This section
       includes experimental options that may produce broken code.

       --ffbbrraanncchh--pprroobbaabbiilliittiieess
           After running a program compiled with --ffpprrooffiillee--aarrccss, you can
           compile it a second time using --ffbbrraanncchh--pprroobbaabbiilliittiieess, to improve
           optimizations based on the number of times each branch was taken.
           When a program compiled with --ffpprrooffiillee--aarrccss exits, it saves arc
           execution counts to a file called _s_o_u_r_c_e_n_a_m_e_._g_c_d_a for each source
           file.  The information in this data file is very dependent on the
           structure of the generated code, so you must use the same source
           code and the same optimization options for both compilations.

           With --ffbbrraanncchh--pprroobbaabbiilliittiieess, GCC puts a RREEGG__BBRR__PPRROOBB note on each
           JJUUMMPP__IINNSSNN and CCAALLLL__IINNSSNN.  These can be used to improve
           optimization.  Currently, they are only used in one place: in
           _r_e_o_r_g_._c, instead of guessing which path a branch is most likely to
           take, the RREEGG__BBRR__PPRROOBB values are used to exactly determine which
           path is taken more often.

       --ffpprrooffiillee--vvaalluueess
           If combined with --ffpprrooffiillee--aarrccss, it adds code so that some data
           about values of expressions in the program is gathered.

           With --ffbbrraanncchh--pprroobbaabbiilliittiieess, it reads back the data gathered from
           profiling values of expressions for usage in optimizations.

           Enabled with --ffpprrooffiillee--ggeenneerraattee and --ffpprrooffiillee--uussee.

       --ffpprrooffiillee--rreeoorrddeerr--ffuunnccttiioonnss
           Function reordering based on profile instrumentation collects first
           time of execution of a function and orders these functions in
           ascending order.

           Enabled with --ffpprrooffiillee--uussee.

       --ffvvpptt
           If combined with --ffpprrooffiillee--aarrccss, this option instructs the compiler
           to add code to gather information about values of expressions.

           With --ffbbrraanncchh--pprroobbaabbiilliittiieess, it reads back the data gathered and
           actually performs the optimizations based on them.  Currently the
           optimizations include specialization of division operations using
           the knowledge about the value of the denominator.

       --ffrreennaammee--rreeggiisstteerrss
           Attempt to avoid false dependencies in scheduled code by making use
           of registers left over after register allocation.  This
           optimization most benefits processors with lots of registers.
           Depending on the debug information format adopted by the target,
           however, it can make debugging impossible, since variables no
           longer stay in a "home register".

           Enabled by default with --ffuunnrroollll--llooooppss.

       --ffsscchheedduullee--ffuussiioonn
           Performs a target dependent pass over the instruction stream to
           schedule instructions of same type together because target machine
           can execute them more efficiently if they are adjacent to each
           other in the instruction flow.

           Enabled at levels --OO22, --OO33, --OOss.

       --ffttrraacceerr
           Perform tail duplication to enlarge superblock size.  This
           transformation simplifies the control flow of the function allowing
           other optimizations to do a better job.

           Enabled with --ffpprrooffiillee--uussee.

       --ffuunnrroollll--llooooppss
           Unroll loops whose number of iterations can be determined at
           compile time or upon entry to the loop.  --ffuunnrroollll--llooooppss implies
           --ffrreerruunn--ccssee--aafftteerr--lloooopp, --ffwweebb and --ffrreennaammee--rreeggiisstteerrss.  It also
           turns on complete loop peeling (i.e. complete removal of loops with
           a small constant number of iterations).  This option makes code
           larger, and may or may not make it run faster.

           Enabled with --ffpprrooffiillee--uussee.

       --ffuunnrroollll--aallll--llooooppss
           Unroll all loops, even if their number of iterations is uncertain
           when the loop is entered.  This usually makes programs run more
           slowly.  --ffuunnrroollll--aallll--llooooppss implies the same options as
           --ffuunnrroollll--llooooppss.

       --ffppeeeell--llooooppss
           Peels loops for which there is enough information that they do not
           roll much (from profile feedback or static analysis).  It also
           turns on complete loop peeling (i.e. complete removal of loops with
           small constant number of iterations).

           Enabled with --OO33 and/or --ffpprrooffiillee--uussee.

       --ffmmoovvee--lloooopp--iinnvvaarriiaannttss
           Enables the loop invariant motion pass in the RTL loop optimizer.
           Enabled at level --OO11

       --ffsspplliitt--llooooppss
           Split a loop into two if it contains a condition that's always true
           for one side of the iteration space and false for the other.

       --ffuunnsswwiittcchh--llooooppss
           Move branches with loop invariant conditions out of the loop, with
           duplicates of the loop on both branches (modified according to
           result of the condition).

       --ffffuunnccttiioonn--sseeccttiioonnss
       --ffddaattaa--sseeccttiioonnss
           Place each function or data item into its own section in the output
           file if the target supports arbitrary sections.  The name of the
           function or the name of the data item determines the section's name
           in the output file.

           Use these options on systems where the linker can perform
           optimizations to improve locality of reference in the instruction
           space.  Most systems using the ELF object format have linkers with
           such optimizations.  On AIX, the linker rearranges sections
           (CSECTs) based on the call graph.  The performance impact varies.

           Together with a linker garbage collection (linker ----ggcc--sseeccttiioonnss
           option) these options may lead to smaller statically-linked
           executables (after stripping).

           On ELF/DWARF systems these options do not degenerate the quality of
           the debug information.  There could be issues with other object
           files/debug info formats.

           Only use these options when there are significant benefits from
           doing so.  When you specify these options, the assembler and linker
           create larger object and executable files and are also slower.
           These options affect code generation.  They prevent optimizations
           by the compiler and assembler using relative locations inside a
           translation unit since the locations are unknown until link time.
           An example of such an optimization is relaxing calls to short call
           instructions.

       --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee
           Perform branch target register load optimization before prologue /
           epilogue threading.  The use of target registers can typically be
           exposed only during reload, thus hoisting loads out of loops and
           doing inter-block scheduling needs a separate optimization pass.

       --ffbbrraanncchh--ttaarrggeett--llooaadd--ooppttiimmiizzee22
           Perform branch target register load optimization after prologue /
           epilogue threading.

       --ffbbttrr--bbbb--eexxcclluussiivvee
           When performing branch target register load optimization, don't
           reuse branch target registers within any basic block.

       --ffssttddaarrgg--oopptt
           Optimize the prologue of variadic argument functions with respect
           to usage of those arguments.

           NOTE: In Ubuntu 14.10 and later versions, --ffssttaacckk--pprrootteeccttoorr--ssttrroonngg
           is enabled by default for C, C++, ObjC, ObjC++, if none of
           --ffnnoo--ssttaacckk--pprrootteeccttoorr, --nnoossttddlliibb, nor --ffffrreeeessttaannddiinngg are found.

       --ffsseeccttiioonn--aanncchhoorrss
           Try to reduce the number of symbolic address calculations by using
           shared "anchor" symbols to address nearby objects.  This
           transformation can help to reduce the number of GOT entries and GOT
           accesses on some targets.

           For example, the implementation of the following function "foo":

                   static int a, b, c;
                   int foo (void) { return a + b + c; }

           usually calculates the addresses of all three variables, but if you
           compile it with --ffsseeccttiioonn--aanncchhoorrss, it accesses the variables from a
           common anchor point instead.  The effect is similar to the
           following pseudocode (which isn't valid C):

                   int foo (void)
                   {
                     register int *xr = &x;
                     return xr[&a - &x] + xr[&b - &x] + xr[&c - &x];
                   }

           Not all targets support this option.

       ----ppaarraamm _n_a_m_e==_v_a_l_u_e
           In some places, GCC uses various constants to control the amount of
           optimization that is done.  For example, GCC does not inline
           functions that contain more than a certain number of instructions.
           You can control some of these constants on the command line using
           the ----ppaarraamm option.

           The names of specific parameters, and the meaning of the values,
           are tied to the internals of the compiler, and are subject to
           change without notice in future releases.

           In each case, the _v_a_l_u_e is an integer.  The allowable choices for
           _n_a_m_e are:

           pprreeddiiccttaabbllee--bbrraanncchh--oouuttccoommee
               When branch is predicted to be taken with probability lower
               than this threshold (in percent), then it is considered well
               predictable. The default is 10.

           mmaaxx--rrttll--iiff--ccoonnvveerrssiioonn--iinnssnnss
               RTL if-conversion tries to remove conditional branches around a
               block and replace them with conditionally executed
               instructions.  This parameter gives the maximum number of
               instructions in a block which should be considered for if-
               conversion.  The default is 10, though the compiler will also
               use other heuristics to decide whether if-conversion is likely
               to be profitable.

           mmaaxx--rrttll--iiff--ccoonnvveerrssiioonn--pprreeddiiccttaabbllee--ccoosstt
           mmaaxx--rrttll--iiff--ccoonnvveerrssiioonn--uunnpprreeddiiccttaabbllee--ccoosstt
               RTL if-conversion will try to remove conditional branches
               around a block and replace them with conditionally executed
               instructions.  These parameters give the maximum permissible
               cost for the sequence that would be generated by if-conversion
               depending on whether the branch is statically determined to be
               predictable or not.  The units for this parameter are the same
               as those for the GCC internal seq_cost metric.  The compiler
               will try to provide a reasonable default for this parameter
               using the BRANCH_COST target macro.

           mmaaxx--ccrroossssjjuummpp--eeddggeess
               The maximum number of incoming edges to consider for cross-
               jumping.  The algorithm used by --ffccrroossssjjuummppiinngg is O(N^2) in the
               number of edges incoming to each block.  Increasing values mean
               more aggressive optimization, making the compilation time
               increase with probably small improvement in executable size.

           mmiinn--ccrroossssjjuummpp--iinnssnnss
               The minimum number of instructions that must be matched at the
               end of two blocks before cross-jumping is performed on them.
               This value is ignored in the case where all instructions in the
               block being cross-jumped from are matched.  The default value
               is 5.

           mmaaxx--ggrrooww--ccooppyy--bbbb--iinnssnnss
               The maximum code size expansion factor when copying basic
               blocks instead of jumping.  The expansion is relative to a jump
               instruction.  The default value is 8.

           mmaaxx--ggoottoo--dduupplliiccaattiioonn--iinnssnnss
               The maximum number of instructions to duplicate to a block that
               jumps to a computed goto.  To avoid O(N^2) behavior in a number
               of passes, GCC factors computed gotos early in the compilation
               process, and unfactors them as late as possible.  Only computed
               jumps at the end of a basic blocks with no more than max-goto-
               duplication-insns are unfactored.  The default value is 8.

           mmaaxx--ddeellaayy--sslloott--iinnssnn--sseeaarrcchh
               The maximum number of instructions to consider when looking for
               an instruction to fill a delay slot.  If more than this
               arbitrary number of instructions are searched, the time savings
               from filling the delay slot are minimal, so stop searching.
               Increasing values mean more aggressive optimization, making the
               compilation time increase with probably small improvement in
               execution time.

           mmaaxx--ddeellaayy--sslloott--lliivvee--sseeaarrcchh
               When trying to fill delay slots, the maximum number of
               instructions to consider when searching for a block with valid
               live register information.  Increasing this arbitrarily chosen
               value means more aggressive optimization, increasing the
               compilation time.  This parameter should be removed when the
               delay slot code is rewritten to maintain the control-flow
               graph.

           mmaaxx--ggccssee--mmeemmoorryy
               The approximate maximum amount of memory that can be allocated
               in order to perform the global common subexpression elimination
               optimization.  If more memory than specified is required, the
               optimization is not done.

           mmaaxx--ggccssee--iinnsseerrttiioonn--rraattiioo
               If the ratio of expression insertions to deletions is larger
               than this value for any expression, then RTL PRE inserts or
               removes the expression and thus leaves partially redundant
               computations in the instruction stream.  The default value is
               20.

           mmaaxx--ppeennddiinngg--lliisstt--lleennggtthh
               The maximum number of pending dependencies scheduling allows
               before flushing the current state and starting over.  Large
               functions with few branches or calls can create excessively
               large lists which needlessly consume memory and resources.

           mmaaxx--mmoodduulloo--bbaacckkttrraacckk--aatttteemmppttss
               The maximum number of backtrack attempts the scheduler should
               make when modulo scheduling a loop.  Larger values can
               exponentially increase compilation time.

           mmaaxx--iinnlliinnee--iinnssnnss--ssiinnggllee
               Several parameters control the tree inliner used in GCC.  This
               number sets the maximum number of instructions (counted in
               GCC's internal representation) in a single function that the
               tree inliner considers for inlining.  This only affects
               functions declared inline and methods implemented in a class
               declaration (C++).  The default value is 400.

           mmaaxx--iinnlliinnee--iinnssnnss--aauuttoo
               When you use --ffiinnlliinnee--ffuunnccttiioonnss (included in --OO33), a lot of
               functions that would otherwise not be considered for inlining
               by the compiler are investigated.  To those functions, a
               different (more restrictive) limit compared to functions
               declared inline can be applied.  The default value is 30.

           iinnlliinnee--mmiinn--ssppeeeedduupp
               When estimated performance improvement of caller + callee
               runtime exceeds this threshold (in percent), the function can
               be inlined regardless of the limit on ----ppaarraamm mmaaxx--iinnlliinnee--iinnssnnss--
               ssiinnggllee and ----ppaarraamm mmaaxx--iinnlliinnee--iinnssnnss--aauuttoo.  The default value is
               15.

           llaarrggee--ffuunnccttiioonn--iinnssnnss
               The limit specifying really large functions.  For functions
               larger than this limit after inlining, inlining is constrained
               by ----ppaarraamm llaarrggee--ffuunnccttiioonn--ggrroowwtthh.  This parameter is useful
               primarily to avoid extreme compilation time caused by non-
               linear algorithms used by the back end.  The default value is
               2700.

           llaarrggee--ffuunnccttiioonn--ggrroowwtthh
               Specifies maximal growth of large function caused by inlining
               in percents.  The default value is 100 which limits large
               function growth to 2.0 times the original size.

           llaarrggee--uunniitt--iinnssnnss
               The limit specifying large translation unit.  Growth caused by
               inlining of units larger than this limit is limited by ----ppaarraamm
               iinnlliinnee--uunniitt--ggrroowwtthh.  For small units this might be too tight.
               For example, consider a unit consisting of function A that is
               inline and B that just calls A three times.  If B is small
               relative to A, the growth of unit is 300\% and yet such
               inlining is very sane.  For very large units consisting of
               small inlineable functions, however, the overall unit growth
               limit is needed to avoid exponential explosion of code size.
               Thus for smaller units, the size is increased to ----ppaarraamm llaarrggee--
               uunniitt--iinnssnnss before applying ----ppaarraamm iinnlliinnee--uunniitt--ggrroowwtthh.  The
               default is 10000.

           iinnlliinnee--uunniitt--ggrroowwtthh
               Specifies maximal overall growth of the compilation unit caused
               by inlining.  The default value is 20 which limits unit growth
               to 1.2 times the original size. Cold functions (either marked
               cold via an attribute or by profile feedback) are not accounted
               into the unit size.

           iippccpp--uunniitt--ggrroowwtthh
               Specifies maximal overall growth of the compilation unit caused
               by interprocedural constant propagation.  The default value is
               10 which limits unit growth to 1.1 times the original size.

           llaarrggee--ssttaacckk--ffrraammee
               The limit specifying large stack frames.  While inlining the
               algorithm is trying to not grow past this limit too much.  The
               default value is 256 bytes.

           llaarrggee--ssttaacckk--ffrraammee--ggrroowwtthh
               Specifies maximal growth of large stack frames caused by
               inlining in percents.  The default value is 1000 which limits
               large stack frame growth to 11 times the original size.

           mmaaxx--iinnlliinnee--iinnssnnss--rreeccuurrssiivvee
           mmaaxx--iinnlliinnee--iinnssnnss--rreeccuurrssiivvee--aauuttoo
               Specifies the maximum number of instructions an out-of-line
               copy of a self-recursive inline function can grow into by
               performing recursive inlining.

               ----ppaarraamm mmaaxx--iinnlliinnee--iinnssnnss--rreeccuurrssiivvee applies to functions
               declared inline.  For functions not declared inline, recursive
               inlining happens only when --ffiinnlliinnee--ffuunnccttiioonnss (included in --OO33)
               is enabled; ----ppaarraamm mmaaxx--iinnlliinnee--iinnssnnss--rreeccuurrssiivvee--aauuttoo applies
               instead.  The default value is 450.

           mmaaxx--iinnlliinnee--rreeccuurrssiivvee--ddeepptthh
           mmaaxx--iinnlliinnee--rreeccuurrssiivvee--ddeepptthh--aauuttoo
               Specifies the maximum recursion depth used for recursive
               inlining.

               ----ppaarraamm mmaaxx--iinnlliinnee--rreeccuurrssiivvee--ddeepptthh applies to functions
               declared inline.  For functions not declared inline, recursive
               inlining happens only when --ffiinnlliinnee--ffuunnccttiioonnss (included in --OO33)
               is enabled; ----ppaarraamm mmaaxx--iinnlliinnee--rreeccuurrssiivvee--ddeepptthh--aauuttoo applies
               instead.  The default value is 8.

           mmiinn--iinnlliinnee--rreeccuurrssiivvee--pprroobbaabbiilliittyy
               Recursive inlining is profitable only for function having deep
               recursion in average and can hurt for function having little
               recursion depth by increasing the prologue size or complexity
               of function body to other optimizers.

               When profile feedback is available (see --ffpprrooffiillee--ggeenneerraattee) the
               actual recursion depth can be guessed from the probability that
               function recurses via a given call expression.  This parameter
               limits inlining only to call expressions whose probability
               exceeds the given threshold (in percents).  The default value
               is 10.

           eeaarrllyy--iinnlliinniinngg--iinnssnnss
               Specify growth that the early inliner can make.  In effect it
               increases the amount of inlining for code having a large
               abstraction penalty.  The default value is 14.

           mmaaxx--eeaarrllyy--iinnlliinneerr--iitteerraattiioonnss
               Limit of iterations of the early inliner.  This basically
               bounds the number of nested indirect calls the early inliner
               can resolve.  Deeper chains are still handled by late inlining.

           ccoommddaatt--sshhaarriinngg--pprroobbaabbiilliittyy
               Probability (in percent) that C++ inline function with comdat
               visibility are shared across multiple compilation units.  The
               default value is 20.

           pprrooffiillee--ffuunncc--iinntteerrnnaall--iidd
               A parameter to control whether to use function internal id in
               profile database lookup. If the value is 0, the compiler uses
               an id that is based on function assembler name and filename,
               which makes old profile data more tolerant to source changes
               such as function reordering etc.  The default value is 0.

           mmiinn--vveecctt--lloooopp--bboouunndd
               The minimum number of iterations under which loops are not
               vectorized when --ffttrreeee--vveeccttoorriizzee is used.  The number of
               iterations after vectorization needs to be greater than the
               value specified by this option to allow vectorization.  The
               default value is 0.

           ggccssee--ccoosstt--ddiissttaannccee--rraattiioo
               Scaling factor in calculation of maximum distance an expression
               can be moved by GCSE optimizations.  This is currently
               supported only in the code hoisting pass.  The bigger the
               ratio, the more aggressive code hoisting is with simple
               expressions, i.e., the expressions that have cost less than
               ggccssee--uunnrreessttrriicctteedd--ccoosstt.  Specifying 0 disables hoisting of
               simple expressions.  The default value is 10.

           ggccssee--uunnrreessttrriicctteedd--ccoosstt
               Cost, roughly measured as the cost of a single typical machine
               instruction, at which GCSE optimizations do not constrain the
               distance an expression can travel.  This is currently supported
               only in the code hoisting pass.  The lesser the cost, the more
               aggressive code hoisting is.  Specifying 0 allows all
               expressions to travel unrestricted distances.  The default
               value is 3.

           mmaaxx--hhooiisstt--ddeepptthh
               The depth of search in the dominator tree for expressions to
               hoist.  This is used to avoid quadratic behavior in hoisting
               algorithm.  The value of 0 does not limit on the search, but
               may slow down compilation of huge functions.  The default value
               is 30.

           mmaaxx--ttaaiill--mmeerrggee--ccoommppaarriissoonnss
               The maximum amount of similar bbs to compare a bb with.  This
               is used to avoid quadratic behavior in tree tail merging.  The
               default value is 10.

           mmaaxx--ttaaiill--mmeerrggee--iitteerraattiioonnss
               The maximum amount of iterations of the pass over the function.
               This is used to limit compilation time in tree tail merging.
               The default value is 2.

           ssttoorree--mmeerrggiinngg--aallllooww--uunnaalliiggnneedd
               Allow the store merging pass to introduce unaligned stores if
               it is legal to do so.  The default value is 1.

           mmaaxx--ssttoorreess--ttoo--mmeerrggee
               The maximum number of stores to attempt to merge into wider
               stores in the store merging pass.  The minimum value is 2 and
               the default is 64.

           mmaaxx--uunnrroolllleedd--iinnssnnss
               The maximum number of instructions that a loop may have to be
               unrolled.  If a loop is unrolled, this parameter also
               determines how many times the loop code is unrolled.

           mmaaxx--aavveerraaggee--uunnrroolllleedd--iinnssnnss
               The maximum number of instructions biased by probabilities of
               their execution that a loop may have to be unrolled.  If a loop
               is unrolled, this parameter also determines how many times the
               loop code is unrolled.

           mmaaxx--uunnrroollll--ttiimmeess
               The maximum number of unrollings of a single loop.

           mmaaxx--ppeeeelleedd--iinnssnnss
               The maximum number of instructions that a loop may have to be
               peeled.  If a loop is peeled, this parameter also determines
               how many times the loop code is peeled.

           mmaaxx--ppeeeell--ttiimmeess
               The maximum number of peelings of a single loop.

           mmaaxx--ppeeeell--bbrraanncchheess
               The maximum number of branches on the hot path through the
               peeled sequence.

           mmaaxx--ccoommpplleetteellyy--ppeeeelleedd--iinnssnnss
               The maximum number of insns of a completely peeled loop.

           mmaaxx--ccoommpplleetteellyy--ppeeeell--ttiimmeess
               The maximum number of iterations of a loop to be suitable for
               complete peeling.

           mmaaxx--ccoommpplleetteellyy--ppeeeell--lloooopp--nneesstt--ddeepptthh
               The maximum depth of a loop nest suitable for complete peeling.

           mmaaxx--uunnsswwiittcchh--iinnssnnss
               The maximum number of insns of an unswitched loop.

           mmaaxx--uunnsswwiittcchh--lleevveell
               The maximum number of branches unswitched in a single loop.

           mmaaxx--lloooopp--hheeaaddeerrss--iinnssnnss
               The maximum number of insns in loop header duplicated by the
               copy loop headers pass.

           lliimm--eexxppeennssiivvee
               The minimum cost of an expensive expression in the loop
               invariant motion.

           iivv--ccoonnssiiddeerr--aallll--ccaannddiiddaatteess--bboouunndd
               Bound on number of candidates for induction variables, below
               which all candidates are considered for each use in induction
               variable optimizations.  If there are more candidates than
               this, only the most relevant ones are considered to avoid
               quadratic time complexity.

           iivv--mmaaxx--ccoonnssiiddeerreedd--uusseess
               The induction variable optimizations give up on loops that
               contain more induction variable uses.

           iivv--aallwwaayyss--pprruunnee--ccaanndd--sseett--bboouunndd
               If the number of candidates in the set is smaller than this
               value, always try to remove unnecessary ivs from the set when
               adding a new one.

           aavvgg--lloooopp--nniitteerr
               Average number of iterations of a loop.

           ddssee--mmaaxx--oobbjjeecctt--ssiizzee
               Maximum size (in bytes) of objects tracked bytewise by dead
               store elimination.  Larger values may result in larger
               compilation times.

           sscceevv--mmaaxx--eexxpprr--ssiizzee
               Bound on size of expressions used in the scalar evolutions
               analyzer.  Large expressions slow the analyzer.

           sscceevv--mmaaxx--eexxpprr--ccoommpplleexxiittyy
               Bound on the complexity of the expressions in the scalar
               evolutions analyzer.  Complex expressions slow the analyzer.

           mmaaxx--ttrreeee--iiff--ccoonnvveerrssiioonn--pphhii--aarrggss
               Maximum number of arguments in a PHI supported by TREE if
               conversion unless the loop is marked with simd pragma.

           vveecctt--mmaaxx--vveerrssiioonn--ffoorr--aalliiggnnmmeenntt--cchheecckkss
               The maximum number of run-time checks that can be performed
               when doing loop versioning for alignment in the vectorizer.

           vveecctt--mmaaxx--vveerrssiioonn--ffoorr--aalliiaass--cchheecckkss
               The maximum number of run-time checks that can be performed
               when doing loop versioning for alias in the vectorizer.

           vveecctt--mmaaxx--ppeeeelliinngg--ffoorr--aalliiggnnmmeenntt
               The maximum number of loop peels to enhance access alignment
               for vectorizer. Value -1 means no limit.

           mmaaxx--iitteerraattiioonnss--ttoo--ttrraacckk
               The maximum number of iterations of a loop the brute-force
               algorithm for analysis of the number of iterations of the loop
               tries to evaluate.

           hhoott--bbbb--ccoouunntt--wwss--ppeerrmmiillllee
               A basic block profile count is considered hot if it contributes
               to the given permillage (i.e. 0...1000) of the entire profiled
               execution.

           hhoott--bbbb--ffrreeqquueennccyy--ffrraaccttiioonn
               Select fraction of the entry block frequency of executions of
               basic block in function given basic block needs to have to be
               considered hot.

           mmaaxx--pprreeddiicctteedd--iitteerraattiioonnss
               The maximum number of loop iterations we predict statically.
               This is useful in cases where a function contains a single loop
               with known bound and another loop with unknown bound.  The
               known number of iterations is predicted correctly, while the
               unknown number of iterations average to roughly 10.  This means
               that the loop without bounds appears artificially cold relative
               to the other one.

           bbuuiillttiinn--eexxppeecctt--pprroobbaabbiilliittyy
               Control the probability of the expression having the specified
               value. This parameter takes a percentage (i.e. 0 ... 100) as
               input.  The default probability of 90 is obtained empirically.

           aalliiggnn--tthhrreesshhoolldd
               Select fraction of the maximal frequency of executions of a
               basic block in a function to align the basic block.

           aalliiggnn--lloooopp--iitteerraattiioonnss
               A loop expected to iterate at least the selected number of
               iterations is aligned.

           ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee
           ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee--ffeeeeddbbaacckk
               This value is used to limit superblock formation once the given
               percentage of executed instructions is covered.  This limits
               unnecessary code size expansion.

               The ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee--ffeeeeddbbaacckk parameter is used only
               when profile feedback is available.  The real profiles (as
               opposed to statically estimated ones) are much less balanced
               allowing the threshold to be larger value.

           ttrraacceerr--mmaaxx--ccooddee--ggrroowwtthh
               Stop tail duplication once code growth has reached given
               percentage.  This is a rather artificial limit, as most of the
               duplicates are eliminated later in cross jumping, so it may be
               set to much higher values than is the desired code growth.

           ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo
               Stop reverse growth when the reverse probability of best edge
               is less than this threshold (in percent).

           ttrraacceerr--mmiinn--bbrraanncchh--pprroobbaabbiilliittyy
           ttrraacceerr--mmiinn--bbrraanncchh--pprroobbaabbiilliittyy--ffeeeeddbbaacckk
               Stop forward growth if the best edge has probability lower than
               this threshold.

               Similarly to ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee two parameters are
               provided.  ttrraacceerr--mmiinn--bbrraanncchh--pprroobbaabbiilliittyy--ffeeeeddbbaacckk is used for
               compilation with profile feedback and ttrraacceerr--mmiinn--bbrraanncchh--
               pprroobbaabbiilliittyy compilation without.  The value for compilation
               with profile feedback needs to be more conservative (higher) in
               order to make tracer effective.

           ssttaacckk--ccllaasshh--pprrootteeccttiioonn--gguuaarrdd--ssiizzee
               Specify the size of the operating system provided stack guard
               as 2 raised to _n_u_m bytes.  The default value is 12 (4096
               bytes).  Acceptable values are between 12 and 30.  Higher
               values may reduce the number of explicit probes, but a value
               larger than the operating system provided guard will leave code
               vulnerable to stack clash style attacks.

           ssttaacckk--ccllaasshh--pprrootteeccttiioonn--pprroobbee--iinntteerrvvaall
               Stack clash protection involves probing stack space as it is
               allocated.  This param controls the maximum distance between
               probes into the stack as 2 raised to _n_u_m bytes.  Acceptable
               values are between 10 and 16 and defaults to 12.  Higher values
               may reduce the number of explicit probes, but a value larger
               than the operating system provided guard will leave code
               vulnerable to stack clash style attacks.

           mmaaxx--ccssee--ppaatthh--lleennggtthh
               The maximum number of basic blocks on path that CSE considers.
               The default is 10.

           mmaaxx--ccssee--iinnssnnss
               The maximum number of instructions CSE processes before
               flushing.  The default is 1000.

           ggggcc--mmiinn--eexxppaanndd
               GCC uses a garbage collector to manage its own memory
               allocation.  This parameter specifies the minimum percentage by
               which the garbage collector's heap should be allowed to expand
               between collections.  Tuning this may improve compilation
               speed; it has no effect on code generation.

               The default is 30% + 70% * (RAM/1GB) with an upper bound of
               100% when RAM >= 1GB.  If "getrlimit" is available, the notion
               of "RAM" is the smallest of actual RAM and "RLIMIT_DATA" or
               "RLIMIT_AS".  If GCC is not able to calculate RAM on a
               particular platform, the lower bound of 30% is used.  Setting
               this parameter and ggggcc--mmiinn--hheeaappssiizzee to zero causes a full
               collection to occur at every opportunity.  This is extremely
               slow, but can be useful for debugging.

           ggggcc--mmiinn--hheeaappssiizzee
               Minimum size of the garbage collector's heap before it begins
               bothering to collect garbage.  The first collection occurs
               after the heap expands by ggggcc--mmiinn--eexxppaanndd% beyond ggggcc--mmiinn--
               hheeaappssiizzee.  Again, tuning this may improve compilation speed,
               and has no effect on code generation.

               The default is the smaller of RAM/8, RLIMIT_RSS, or a limit
               that tries to ensure that RLIMIT_DATA or RLIMIT_AS are not
               exceeded, but with a lower bound of 4096 (four megabytes) and
               an upper bound of 131072 (128 megabytes).  If GCC is not able
               to calculate RAM on a particular platform, the lower bound is
               used.  Setting this parameter very large effectively disables
               garbage collection.  Setting this parameter and ggggcc--mmiinn--eexxppaanndd
               to zero causes a full collection to occur at every opportunity.

           mmaaxx--rreellooaadd--sseeaarrcchh--iinnssnnss
               The maximum number of instruction reload should look backward
               for equivalent register.  Increasing values mean more
               aggressive optimization, making the compilation time increase
               with probably slightly better performance.  The default value
               is 100.

           mmaaxx--ccsseelliibb--mmeemmoorryy--llooccaattiioonnss
               The maximum number of memory locations cselib should take into
               account.  Increasing values mean more aggressive optimization,
               making the compilation time increase with probably slightly
               better performance.  The default value is 500.

           mmaaxx--sscchheedd--rreeaaddyy--iinnssnnss
               The maximum number of instructions ready to be issued the
               scheduler should consider at any given time during the first
               scheduling pass.  Increasing values mean more thorough
               searches, making the compilation time increase with probably
               little benefit.  The default value is 100.

           mmaaxx--sscchheedd--rreeggiioonn--bblloocckkss
               The maximum number of blocks in a region to be considered for
               interblock scheduling.  The default value is 10.

           mmaaxx--ppiippeelliinnee--rreeggiioonn--bblloocckkss
               The maximum number of blocks in a region to be considered for
               pipelining in the selective scheduler.  The default value is
               15.

           mmaaxx--sscchheedd--rreeggiioonn--iinnssnnss
               The maximum number of insns in a region to be considered for
               interblock scheduling.  The default value is 100.

           mmaaxx--ppiippeelliinnee--rreeggiioonn--iinnssnnss
               The maximum number of insns in a region to be considered for
               pipelining in the selective scheduler.  The default value is
               200.

           mmiinn--ssppeecc--pprroobb
               The minimum probability (in percents) of reaching a source
               block for interblock speculative scheduling.  The default value
               is 40.

           mmaaxx--sscchheedd--eexxtteenndd--rreeggiioonnss--iitteerrss
               The maximum number of iterations through CFG to extend regions.
               A value of 0 (the default) disables region extensions.

           mmaaxx--sscchheedd--iinnssnn--ccoonnfflliicctt--ddeellaayy
               The maximum conflict delay for an insn to be considered for
               speculative motion.  The default value is 3.

           sscchheedd--ssppeecc--pprroobb--ccuuttooffff
               The minimal probability of speculation success (in percents),
               so that speculative insns are scheduled.  The default value is
               40.

           sscchheedd--ssttaattee--eeddggee--pprroobb--ccuuttooffff
               The minimum probability an edge must have for the scheduler to
               save its state across it.  The default value is 10.

           sscchheedd--mmeemm--ttrruuee--ddeepp--ccoosstt
               Minimal distance (in CPU cycles) between store and load
               targeting same memory locations.  The default value is 1.

           sseellsscchheedd--mmaaxx--llooookkaahheeaadd
               The maximum size of the lookahead window of selective
               scheduling.  It is a depth of search for available
               instructions.  The default value is 50.

           sseellsscchheedd--mmaaxx--sscchheedd--ttiimmeess
               The maximum number of times that an instruction is scheduled
               during selective scheduling.  This is the limit on the number
               of iterations through which the instruction may be pipelined.
               The default value is 2.

           sseellsscchheedd--iinnssnnss--ttoo--rreennaammee
               The maximum number of best instructions in the ready list that
               are considered for renaming in the selective scheduler.  The
               default value is 2.

           ssmmss--mmiinn--sscc
               The minimum value of stage count that swing modulo scheduler
               generates.  The default value is 2.

           mmaaxx--llaasstt--vvaalluuee--rrttll
               The maximum size measured as number of RTLs that can be
               recorded in an expression in combiner for a pseudo register as
               last known value of that register.  The default is 10000.

           mmaaxx--ccoommbbiinnee--iinnssnnss
               The maximum number of instructions the RTL combiner tries to
               combine.  The default value is 2 at --OOgg and 4 otherwise.

           iinntteeggeerr--sshhaarree--lliimmiitt
               Small integer constants can use a shared data structure,
               reducing the compiler's memory usage and increasing its speed.
               This sets the maximum value of a shared integer constant.  The
               default value is 256.

           sssspp--bbuuffffeerr--ssiizzee
               The minimum size of buffers (i.e. arrays) that receive stack
               smashing protection when --ffssttaacckk--pprrootteeccttiioonn is used.

               This default before Ubuntu 10.10 was "8". Currently it is "4",
               to increase the number of functions protected by the stack
               protector.

           mmiinn--ssiizzee--ffoorr--ssttaacckk--sshhaarriinngg
               The minimum size of variables taking part in stack slot sharing
               when not optimizing. The default value is 32.

           mmaaxx--jjuummpp--tthhrreeaadd--dduupplliiccaattiioonn--ssttmmttss
               Maximum number of statements allowed in a block that needs to
               be duplicated when threading jumps.

           mmaaxx--ffiieellddss--ffoorr--ffiieelldd--sseennssiittiivvee
               Maximum number of fields in a structure treated in a field
               sensitive manner during pointer analysis.  The default is zero
               for --OO00 and --OO11, and 100 for --OOss, --OO22, and --OO33.

           pprreeffeettcchh--llaatteennccyy
               Estimate on average number of instructions that are executed
               before prefetch finishes.  The distance prefetched ahead is
               proportional to this constant.  Increasing this number may also
               lead to less streams being prefetched (see ssiimmuullttaanneeoouuss--
               pprreeffeettcchheess).

           ssiimmuullttaanneeoouuss--pprreeffeettcchheess
               Maximum number of prefetches that can run at the same time.

           ll11--ccaacchhee--lliinnee--ssiizzee
               The size of cache line in L1 cache, in bytes.

           ll11--ccaacchhee--ssiizzee
               The size of L1 cache, in kilobytes.

           ll22--ccaacchhee--ssiizzee
               The size of L2 cache, in kilobytes.

           lloooopp--iinntteerrcchhaannggee--mmaaxx--nnuumm--ssttmmttss
               The maximum number of stmts in a loop to be interchanged.

           lloooopp--iinntteerrcchhaannggee--ssttrriiddee--rraattiioo
               The minimum ratio between stride of two loops for interchange
               to be profitable.

           mmiinn--iinnssnn--ttoo--pprreeffeettcchh--rraattiioo
               The minimum ratio between the number of instructions and the
               number of prefetches to enable prefetching in a loop.

           pprreeffeettcchh--mmiinn--iinnssnn--ttoo--mmeemm--rraattiioo
               The minimum ratio between the number of instructions and the
               number of memory references to enable prefetching in a loop.

           uussee--ccaannoonniiccaall--ttyyppeess
               Whether the compiler should use the "canonical" type system.
               By default, this should always be 1, which uses a more
               efficient internal mechanism for comparing types in C++ and
               Objective-C++.  However, if bugs in the canonical type system
               are causing compilation failures, set this value to 0 to
               disable canonical types.

           sswwiittcchh--ccoonnvveerrssiioonn--mmaaxx--bbrraanncchh--rraattiioo
               Switch initialization conversion refuses to create arrays that
               are bigger than sswwiittcchh--ccoonnvveerrssiioonn--mmaaxx--bbrraanncchh--rraattiioo times the
               number of branches in the switch.

           mmaaxx--ppaarrttiiaall--aannttiicc--lleennggtthh
               Maximum length of the partial antic set computed during the
               tree partial redundancy elimination optimization (--ffttrreeee--pprree)
               when optimizing at --OO33 and above.  For some sorts of source
               code the enhanced partial redundancy elimination optimization
               can run away, consuming all of the memory available on the host
               machine.  This parameter sets a limit on the length of the sets
               that are computed, which prevents the runaway behavior.
               Setting a value of 0 for this parameter allows an unlimited set
               length.

           ssccccvvnn--mmaaxx--sscccc--ssiizzee
               Maximum size of a strongly connected component (SCC) during
               SCCVN processing.  If this limit is hit, SCCVN processing for
               the whole function is not done and optimizations depending on
               it are disabled.  The default maximum SCC size is 10000.

           ssccccvvnn--mmaaxx--aalliiaass--qquueerriieess--ppeerr--aacccceessss
               Maximum number of alias-oracle queries we perform when looking
               for redundancies for loads and stores.  If this limit is hit
               the search is aborted and the load or store is not considered
               redundant.  The number of queries is algorithmically limited to
               the number of stores on all paths from the load to the function
               entry.  The default maximum number of queries is 1000.

           iirraa--mmaaxx--llooooppss--nnuumm
               IRA uses regional register allocation by default.  If a
               function contains more loops than the number given by this
               parameter, only at most the given number of the most
               frequently-executed loops form regions for regional register
               allocation.  The default value of the parameter is 100.

           iirraa--mmaaxx--ccoonnfflliicctt--ttaabbllee--ssiizzee
               Although IRA uses a sophisticated algorithm to compress the
               conflict table, the table can still require excessive amounts
               of memory for huge functions.  If the conflict table for a
               function could be more than the size in MB given by this
               parameter, the register allocator instead uses a faster,
               simpler, and lower-quality algorithm that does not require
               building a pseudo-register conflict table.  The default value
               of the parameter is 2000.

           iirraa--lloooopp--rreesseerrvveedd--rreeggss
               IRA can be used to evaluate more accurate register pressure in
               loops for decisions to move loop invariants (see --OO33).  The
               number of available registers reserved for some other purposes
               is given by this parameter.  The default value of the parameter
               is 2, which is the minimal number of registers needed by
               typical instructions.  This value is the best found from
               numerous experiments.

           llrraa--iinnhheerriittaannccee--eebbbb--pprroobbaabbiilliittyy--ccuuttooffff
               LRA tries to reuse values reloaded in registers in subsequent
               insns.  This optimization is called inheritance.  EBB is used
               as a region to do this optimization.  The parameter defines a
               minimal fall-through edge probability in percentage used to add
               BB to inheritance EBB in LRA.  The default value of the
               parameter is 40.  The value was chosen from numerous runs of
               SPEC2000 on x86-64.

           lloooopp--iinnvvaarriiaanntt--mmaaxx--bbbbss--iinn--lloooopp
               Loop invariant motion can be very expensive, both in
               compilation time and in amount of needed compile-time memory,
               with very large loops.  Loops with more basic blocks than this
               parameter won't have loop invariant motion optimization
               performed on them.  The default value of the parameter is 1000
               for --OO11 and 10000 for --OO22 and above.

           lloooopp--mmaaxx--ddaattaarreeffss--ffoorr--ddaattaaddeeppss
               Building data dependencies is expensive for very large loops.
               This parameter limits the number of data references in loops
               that are considered for data dependence analysis.  These large
               loops are no handled by the optimizations using loop data
               dependencies.  The default value is 1000.

           mmaaxx--vvaarrttrraacckk--ssiizzee
               Sets a maximum number of hash table slots to use during
               variable tracking dataflow analysis of any function.  If this
               limit is exceeded with variable tracking at assignments
               enabled, analysis for that function is retried without it,
               after removing all debug insns from the function.  If the limit
               is exceeded even without debug insns, var tracking analysis is
               completely disabled for the function.  Setting the parameter to
               zero makes it unlimited.

           mmaaxx--vvaarrttrraacckk--eexxpprr--ddeepptthh
               Sets a maximum number of recursion levels when attempting to
               map variable names or debug temporaries to value expressions.
               This trades compilation time for more complete debug
               information.  If this is set too low, value expressions that
               are available and could be represented in debug information may
               end up not being used; setting this higher may enable the
               compiler to find more complex debug expressions, but compile
               time and memory use may grow.  The default is 12.

           mmaaxx--ddeebbuugg--mmaarrkkeerr--ccoouunntt
               Sets a threshold on the number of debug markers (e.g. begin
               stmt markers) to avoid complexity explosion at inlining or
               expanding to RTL.  If a function has more such gimple stmts
               than the set limit, such stmts will be dropped from the inlined
               copy of a function, and from its RTL expansion.  The default is
               100000.

           mmiinn--nnoonnddeebbuugg--iinnssnn--uuiidd
               Use uids starting at this parameter for nondebug insns.  The
               range below the parameter is reserved exclusively for debug
               insns created by --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss, but debug insns
               may get (non-overlapping) uids above it if the reserved range
               is exhausted.

           iippaa--ssrraa--ppttrr--ggrroowwtthh--ffaaccttoorr
               IPA-SRA replaces a pointer to an aggregate with one or more new
               parameters only when their cumulative size is less or equal to
               iippaa--ssrraa--ppttrr--ggrroowwtthh--ffaaccttoorr times the size of the original
               pointer parameter.

           ssrraa--mmaaxx--ssccaallaarriizzaattiioonn--ssiizzee--OOssppeeeedd
           ssrraa--mmaaxx--ssccaallaarriizzaattiioonn--ssiizzee--OOssiizzee
               The two Scalar Reduction of Aggregates passes (SRA and IPA-SRA)
               aim to replace scalar parts of aggregates with uses of
               independent scalar variables.  These parameters control the
               maximum size, in storage units, of aggregate which is
               considered for replacement when compiling for speed (ssrraa--mmaaxx--
               ssccaallaarriizzaattiioonn--ssiizzee--OOssppeeeedd) or size (ssrraa--mmaaxx--ssccaallaarriizzaattiioonn--ssiizzee--
               OOssiizzee) respectively.

           ttmm--mmaaxx--aaggggrreeggaattee--ssiizzee
               When making copies of thread-local variables in a transaction,
               this parameter specifies the size in bytes after which
               variables are saved with the logging functions as opposed to
               save/restore code sequence pairs.  This option only applies
               when using --ffggnnuu--ttmm.

           ggrraapphhiittee--mmaaxx--nnbb--ssccoopp--ppaarraammss
               To avoid exponential effects in the Graphite loop transforms,
               the number of parameters in a Static Control Part (SCoP) is
               bounded.  The default value is 10 parameters, a value of zero
               can be used to lift the bound.  A variable whose value is
               unknown at compilation time and defined outside a SCoP is a
               parameter of the SCoP.

           lloooopp--bblloocckk--ttiillee--ssiizzee
               Loop blocking or strip mining transforms, enabled with
               --fflloooopp--bblloocckk or --fflloooopp--ssttrriipp--mmiinnee, strip mine each loop in the
               loop nest by a given number of iterations.  The strip length
               can be changed using the lloooopp--bblloocckk--ttiillee--ssiizzee parameter.  The
               default value is 51 iterations.

           lloooopp--uunnrroollll--jjaamm--ssiizzee
               Specify the unroll factor for the --fflloooopp--uunnrroollll--aanndd--jjaamm option.
               The default value is 4.

           lloooopp--uunnrroollll--jjaamm--ddeepptthh
               Specify the dimension to be unrolled (counting from the most
               inner loop) for the  --fflloooopp--uunnrroollll--aanndd--jjaamm.  The default value
               is 2.

           iippaa--ccpp--vvaalluuee--lliisstt--ssiizzee
               IPA-CP attempts to track all possible values and types passed
               to a function's parameter in order to propagate them and
               perform devirtualization.  iippaa--ccpp--vvaalluuee--lliisstt--ssiizzee is the
               maximum number of values and types it stores per one formal
               parameter of a function.

           iippaa--ccpp--eevvaall--tthhrreesshhoolldd
               IPA-CP calculates its own score of cloning profitability
               heuristics and performs those cloning opportunities with scores
               that exceed iippaa--ccpp--eevvaall--tthhrreesshhoolldd.

           iippaa--ccpp--rreeccuurrssiioonn--ppeennaallttyy
               Percentage penalty the recursive functions will receive when
               they are evaluated for cloning.

           iippaa--ccpp--ssiinnggllee--ccaallll--ppeennaallttyy
               Percentage penalty functions containing a single call to
               another function will receive when they are evaluated for
               cloning.

           iippaa--mmaaxx--aagggg--iitteemmss
               IPA-CP is also capable to propagate a number of scalar values
               passed in an aggregate. iippaa--mmaaxx--aagggg--iitteemmss controls the maximum
               number of such values per one parameter.

           iippaa--ccpp--lloooopp--hhiinntt--bboonnuuss
               When IPA-CP determines that a cloning candidate would make the
               number of iterations of a loop known, it adds a bonus of iippaa--
               ccpp--lloooopp--hhiinntt--bboonnuuss to the profitability score of the candidate.

           iippaa--ccpp--aarrrraayy--iinnddeexx--hhiinntt--bboonnuuss
               When IPA-CP determines that a cloning candidate would make the
               index of an array access known, it adds a bonus of iippaa--ccpp--
               aarrrraayy--iinnddeexx--hhiinntt--bboonnuuss to the profitability score of the
               candidate.

           iippaa--mmaaxx--aaaa--sstteeppss
               During its analysis of function bodies, IPA-CP employs alias
               analysis in order to track values pointed to by function
               parameters.  In order not spend too much time analyzing huge
               functions, it gives up and consider all memory clobbered after
               examining iippaa--mmaaxx--aaaa--sstteeppss statements modifying memory.

           llttoo--ppaarrttiittiioonnss
               Specify desired number of partitions produced during WHOPR
               compilation.  The number of partitions should exceed the number
               of CPUs used for compilation.  The default value is 32.

           llttoo--mmiinn--ppaarrttiittiioonn
               Size of minimal partition for WHOPR (in estimated
               instructions).  This prevents expenses of splitting very small
               programs into too many partitions.

           llttoo--mmaaxx--ppaarrttiittiioonn
               Size of max partition for WHOPR (in estimated instructions).
               to provide an upper bound for individual size of partition.
               Meant to be used only with balanced partitioning.

           ccxxxx--mmaaxx--nnaammeessppaacceess--ffoorr--ddiiaaggnnoossttiicc--hheellpp
               The maximum number of namespaces to consult for suggestions
               when C++ name lookup fails for an identifier.  The default is
               1000.

           ssiinnkk--ffrreeqquueennccyy--tthhrreesshhoolldd
               The maximum relative execution frequency (in percents) of the
               target block relative to a statement's original block to allow
               statement sinking of a statement.  Larger numbers result in
               more aggressive statement sinking.  The default value is 75.  A
               small positive adjustment is applied for statements with memory
               operands as those are even more profitable so sink.

           mmaaxx--ssttoorreess--ttoo--ssiinnkk
               The maximum number of conditional store pairs that can be sunk.
               Set to 0 if either vectorization (--ffttrreeee--vveeccttoorriizzee) or if-
               conversion (--ffttrreeee--lloooopp--iiff--ccoonnvveerrtt) is disabled.  The default
               is 2.

           aallllooww--ssttoorree--ddaattaa--rraacceess
               Allow optimizers to introduce new data races on stores.  Set to
               1 to allow, otherwise to 0.  This option is enabled by default
               at optimization level --OOffaasstt.

           ccaassee--vvaalluueess--tthhrreesshhoolldd
               The smallest number of different values for which it is best to
               use a jump-table instead of a tree of conditional branches.  If
               the value is 0, use the default for the machine.  The default
               is 0.

           ttrreeee--rreeaassssoocc--wwiiddtthh
               Set the maximum number of instructions executed in parallel in
               reassociated tree. This parameter overrides target dependent
               heuristics used by default if has non zero value.

           sscchheedd--pprreessssuurree--aallggoorriitthhmm
               Choose between the two available implementations of
               --ffsscchheedd--pprreessssuurree.  Algorithm 1 is the original implementation
               and is the more likely to prevent instructions from being
               reordered.  Algorithm 2 was designed to be a compromise between
               the relatively conservative approach taken by algorithm 1 and
               the rather aggressive approach taken by the default scheduler.
               It relies more heavily on having a regular register file and
               accurate register pressure classes.  See _h_a_i_f_a_-_s_c_h_e_d_._c in the
               GCC sources for more details.

               The default choice depends on the target.

           mmaaxx--ssllssrr--ccaanndd--ssccaann
               Set the maximum number of existing candidates that are
               considered when seeking a basis for a new straight-line
               strength reduction candidate.

           aassaann--gglloobbaallss
               Enable buffer overflow detection for global objects.  This kind
               of protection is enabled by default if you are using
               --ffssaanniittiizzee==aaddddrreessss option.  To disable global objects
               protection use ----ppaarraamm aassaann--gglloobbaallss==00.

           aassaann--ssttaacckk
               Enable buffer overflow detection for stack objects.  This kind
               of protection is enabled by default when using
               --ffssaanniittiizzee==aaddddrreessss.  To disable stack protection use ----ppaarraamm
               aassaann--ssttaacckk==00 option.

           aassaann--iinnssttrruummeenntt--rreeaaddss
               Enable buffer overflow detection for memory reads.  This kind
               of protection is enabled by default when using
               --ffssaanniittiizzee==aaddddrreessss.  To disable memory reads protection use
               ----ppaarraamm aassaann--iinnssttrruummeenntt--rreeaaddss==00.

           aassaann--iinnssttrruummeenntt--wwrriitteess
               Enable buffer overflow detection for memory writes.  This kind
               of protection is enabled by default when using
               --ffssaanniittiizzee==aaddddrreessss.  To disable memory writes protection use
               ----ppaarraamm aassaann--iinnssttrruummeenntt--wwrriitteess==00 option.

           aassaann--mmeemmiinnttrriinn
               Enable detection for built-in functions.  This kind of
               protection is enabled by default when using --ffssaanniittiizzee==aaddddrreessss.
               To disable built-in functions protection use ----ppaarraamm
               aassaann--mmeemmiinnttrriinn==00.

           aassaann--uussee--aafftteerr--rreettuurrnn
               Enable detection of use-after-return.  This kind of protection
               is enabled by default when using the --ffssaanniittiizzee==aaddddrreessss option.
               To disable it use ----ppaarraamm aassaann--uussee--aafftteerr--rreettuurrnn==00.

               Note: By default the check is disabled at run time.  To enable
               it, add "detect_stack_use_after_return=1" to the environment
               variable AASSAANN__OOPPTTIIOONNSS.

           aassaann--iinnssttrruummeennttaattiioonn--wwiitthh--ccaallll--tthhrreesshhoolldd
               If number of memory accesses in function being instrumented is
               greater or equal to this number, use callbacks instead of
               inline checks.  E.g. to disable inline code use ----ppaarraamm
               aassaann--iinnssttrruummeennttaattiioonn--wwiitthh--ccaallll--tthhrreesshhoolldd==00.

           uussee--aafftteerr--ssccooppee--ddiirreecctt--eemmiissssiioonn--tthhrreesshhoolldd
               If the size of a local variable in bytes is smaller or equal to
               this number, directly poison (or unpoison) shadow memory
               instead of using run-time callbacks.  The default value is 256.

           cchhkkpp--mmaaxx--ccttoorr--ssiizzee
               Static constructors generated by Pointer Bounds Checker may
               become very large and significantly increase compile time at
               optimization level --OO11 and higher.  This parameter is a maximum
               number of statements in a single generated constructor.
               Default value is 5000.

           mmaaxx--ffssmm--tthhrreeaadd--ppaatthh--iinnssnnss
               Maximum number of instructions to copy when duplicating blocks
               on a finite state automaton jump thread path.  The default is
               100.

           mmaaxx--ffssmm--tthhrreeaadd--lleennggtthh
               Maximum number of basic blocks on a finite state automaton jump
               thread path.  The default is 10.

           mmaaxx--ffssmm--tthhrreeaadd--ppaatthhss
               Maximum number of new jump thread paths to create for a finite
               state automaton.  The default is 50.

           ppaarrllooooppss--cchhuunnkk--ssiizzee
               Chunk size of omp schedule for loops parallelized by parloops.
               The default is 0.

           ppaarrllooooppss--sscchheedduullee
               Schedule type of omp schedule for loops parallelized by
               parloops (static, dynamic, guided, auto, runtime).  The default
               is static.

           ppaarrllooooppss--mmiinn--ppeerr--tthhrreeaadd
               The minimum number of iterations per thread of an innermost
               parallelized loop for which the parallelized variant is
               prefered over the single threaded one.  The default is 100.
               Note that for a parallelized loop nest the minimum number of
               iterations of the outermost loop per thread is two.

           mmaaxx--ssssaa--nnaammee--qquueerryy--ddeepptthh
               Maximum depth of recursion when querying properties of SSA
               names in things like fold routines.  One level of recursion
               corresponds to following a use-def chain.

           hhssaa--ggeenn--ddeebbuugg--ssttoorreess
               Enable emission of special debug stores within HSA kernels
               which are then read and reported by libgomp plugin.  Generation
               of these stores is disabled by default, use ----ppaarraamm
               hhssaa--ggeenn--ddeebbuugg--ssttoorreess==11 to enable it.

           mmaaxx--ssppeeccuullaattiivvee--ddeevviirrtt--mmaayyddeeffss
               The maximum number of may-defs we analyze when looking for a
               must-def specifying the dynamic type of an object that invokes
               a virtual call we may be able to devirtualize speculatively.

           mmaaxx--vvrrpp--sswwiittcchh--aasssseerrttiioonnss
               The maximum number of assertions to add along the default edge
               of a switch statement during VRP.  The default is 10.

           uunnrroollll--jjaamm--mmiinn--ppeerrcceenntt
               The minimum percentage of memory references that must be
               optimized away for the unroll-and-jam transformation to be
               considered profitable.

           uunnrroollll--jjaamm--mmaaxx--uunnrroollll
               The maximum number of times the outer loop should be unrolled
               by the unroll-and-jam transformation.

   PPrrooggrraamm IInnssttrruummeennttaattiioonn OOppttiioonnss
       GCC supports a number of command-line options that control adding run-
       time instrumentation to the code it normally generates.  For example,
       one purpose of instrumentation is collect profiling statistics for use
       in finding program hot spots, code coverage analysis, or profile-guided
       optimizations.  Another class of program instrumentation is adding run-
       time checking to detect programming errors like invalid pointer
       dereferences or out-of-bounds array accesses, as well as deliberately
       hostile attacks such as stack smashing or C++ vtable hijacking.  There
       is also a general hook which can be used to implement other forms of
       tracing or function-level instrumentation for debug or program analysis
       purposes.

       --pp  Generate extra code to write profile information suitable for the
           analysis program pprrooff.  You must use this option when compiling the
           source files you want data about, and you must also use it when
           linking.

       --ppgg Generate extra code to write profile information suitable for the
           analysis program ggpprrooff.  You must use this option when compiling
           the source files you want data about, and you must also use it when
           linking.

       --ffpprrooffiillee--aarrccss
           Add code so that program flow _a_r_c_s are instrumented.  During
           execution the program records how many times each branch and call
           is executed and how many times it is taken or returns.  On targets
           that support constructors with priority support, profiling properly
           handles constructors, destructors and C++ constructors (and
           destructors) of classes which are used as a type of a global
           variable.

           When the compiled program exits it saves this data to a file called
           _a_u_x_n_a_m_e_._g_c_d_a for each source file.  The data may be used for
           profile-directed optimizations (--ffbbrraanncchh--pprroobbaabbiilliittiieess), or for
           test coverage analysis (--fftteesstt--ccoovveerraaggee).  Each object file's
           _a_u_x_n_a_m_e is generated from the name of the output file, if
           explicitly specified and it is not the final executable, otherwise
           it is the basename of the source file.  In both cases any suffix is
           removed (e.g. _f_o_o_._g_c_d_a for input file _d_i_r_/_f_o_o_._c, or _d_i_r_/_f_o_o_._g_c_d_a
           for output file specified as --oo ddiirr//ffoooo..oo).

       ----ccoovveerraaggee
           This option is used to compile and link code instrumented for
           coverage analysis.  The option is a synonym for --ffpprrooffiillee--aarrccss
           --fftteesstt--ccoovveerraaggee (when compiling) and --llggccoovv (when linking).  See
           the documentation for those options for more details.

           *   Compile the source files with --ffpprrooffiillee--aarrccss plus optimization
               and code generation options.  For test coverage analysis, use
               the additional --fftteesstt--ccoovveerraaggee option.  You do not need to
               profile every source file in a program.

           *   Compile the source files additionally with --ffpprrooffiillee--aabbss--ppaatthh
               to create absolute path names in the _._g_c_n_o files.  This allows
               ggccoovv to find the correct sources in projects where compilations
               occur with different working directories.

           *   Link your object files with --llggccoovv or --ffpprrooffiillee--aarrccss (the
               latter implies the former).

           *   Run the program on a representative workload to generate the
               arc profile information.  This may be repeated any number of
               times.  You can run concurrent instances of your program, and
               provided that the file system supports locking, the data files
               will be correctly updated.  Unless a strict ISO C dialect
               option is in effect, "fork" calls are detected and correctly
               handled without double counting.

           *   For profile-directed optimizations, compile the source files
               again with the same optimization and code generation options
               plus --ffbbrraanncchh--pprroobbaabbiilliittiieess.

           *   For test coverage analysis, use ggccoovv to produce human readable
               information from the _._g_c_n_o and _._g_c_d_a files.  Refer to the ggccoovv
               documentation for further information.

           With --ffpprrooffiillee--aarrccss, for each function of your program GCC creates
           a program flow graph, then finds a spanning tree for the graph.
           Only arcs that are not on the spanning tree have to be
           instrumented: the compiler adds code to count the number of times
           that these arcs are executed.  When an arc is the only exit or only
           entrance to a block, the instrumentation code can be added to the
           block; otherwise, a new basic block must be created to hold the
           instrumentation code.

       --fftteesstt--ccoovveerraaggee
           Produce a notes file that the ggccoovv code-coverage utility can use to
           show program coverage.  Each source file's note file is called
           _a_u_x_n_a_m_e_._g_c_n_o.  Refer to the --ffpprrooffiillee--aarrccss option above for a
           description of _a_u_x_n_a_m_e and instructions on how to generate test
           coverage data.  Coverage data matches the source files more closely
           if you do not optimize.

       --ffpprrooffiillee--aabbss--ppaatthh
           Automatically convert relative source file names to absolute path
           names in the _._g_c_n_o files.  This allows ggccoovv to find the correct
           sources in projects where compilations occur with different working
           directories.

       --ffpprrooffiillee--ddiirr==_p_a_t_h
           Set the directory to search for the profile data files in to _p_a_t_h.
           This option affects only the profile data generated by
           --ffpprrooffiillee--ggeenneerraattee, --fftteesstt--ccoovveerraaggee, --ffpprrooffiillee--aarrccss and used by
           --ffpprrooffiillee--uussee and --ffbbrraanncchh--pprroobbaabbiilliittiieess and its related options.
           Both absolute and relative paths can be used.  By default, GCC uses
           the current directory as _p_a_t_h, thus the profile data file appears
           in the same directory as the object file.

       --ffpprrooffiillee--ggeenneerraattee
       --ffpprrooffiillee--ggeenneerraattee==_p_a_t_h
           Enable options usually used for instrumenting application to
           produce profile useful for later recompilation with profile
           feedback based optimization.  You must use --ffpprrooffiillee--ggeenneerraattee both
           when compiling and when linking your program.

           The following options are enabled: --ffpprrooffiillee--aarrccss,
           --ffpprrooffiillee--vvaalluueess, --ffvvpptt.

           If _p_a_t_h is specified, GCC looks at the _p_a_t_h to find the profile
           feedback data files. See --ffpprrooffiillee--ddiirr.

           To optimize the program based on the collected profile information,
           use --ffpprrooffiillee--uussee.

       --ffpprrooffiillee--uuppddaattee==_m_e_t_h_o_d
           Alter the update method for an application instrumented for profile
           feedback based optimization.  The _m_e_t_h_o_d argument should be one of
           ssiinnggllee, aattoommiicc or pprreeffeerr--aattoommiicc.  The first one is useful for
           single-threaded applications, while the second one prevents profile
           corruption by emitting thread-safe code.

           WWaarrnniinngg:: When an application does not properly join all threads (or
           creates an detached thread), a profile file can be still corrupted.

           Using pprreeffeerr--aattoommiicc would be transformed either to aattoommiicc, when
           supported by a target, or to ssiinnggllee otherwise.  The GCC driver
           automatically selects pprreeffeerr--aattoommiicc when --pptthhrreeaadd is present in the
           command line.

       --ffssaanniittiizzee==aaddddrreessss
           Enable AddressSanitizer, a fast memory error detector.  Memory
           access instructions are instrumented to detect out-of-bounds and
           use-after-free bugs.  The option enables
           --ffssaanniittiizzee--aaddddrreessss--uussee--aafftteerr--ssccooppee.  See
           <hhttttppss::////ggiitthhuubb..ccoomm//ggooooggllee//ssaanniittiizzeerrss//wwiikkii//AAddddrreessssSSaanniittiizzeerr> for
           more details.  The run-time behavior can be influenced using the
           AASSAANN__OOPPTTIIOONNSS environment variable.  When set to "help=1", the
           available options are shown at startup of the instrumented program.
           See
           <hhttttppss::////ggiitthhuubb..ccoomm//ggooooggllee//ssaanniittiizzeerrss//wwiikkii//AAddddrreessssSSaanniittiizzeerrFFllaaggss##rruunn--ttiimmee--ffllaaggss>
           for a list of supported options.  The option cannot be combined
           with --ffssaanniittiizzee==tthhrreeaadd and/or --ffcchheecckk--ppooiinntteerr--bboouunnddss.

       --ffssaanniittiizzee==kkeerrnneell--aaddddrreessss
           Enable AddressSanitizer for Linux kernel.  See
           <hhttttppss::////ggiitthhuubb..ccoomm//ggooooggllee//kkaassaann//wwiikkii> for more details.  The
           option cannot be combined with --ffcchheecckk--ppooiinntteerr--bboouunnddss.

       --ffssaanniittiizzee==ppooiinntteerr--ccoommppaarree
           Instrument comparison operation (<, <=, >, >=) with pointer
           operands.  The option must be combined with either
           --ffssaanniittiizzee==kkeerrnneell--aaddddrreessss or --ffssaanniittiizzee==aaddddrreessss The option cannot
           be combined with --ffssaanniittiizzee==tthhrreeaadd and/or --ffcchheecckk--ppooiinntteerr--bboouunnddss.
           Note: By default the check is disabled at run time.  To enable it,
           add "detect_invalid_pointer_pairs=2" to the environment variable
           AASSAANN__OOPPTTIIOONNSS. Using "detect_invalid_pointer_pairs=1" detects
           invalid operation only when both pointers are non-null.

       --ffssaanniittiizzee==ppooiinntteerr--ssuubbttrraacctt
           Instrument subtraction with pointer operands.  The option must be
           combined with either --ffssaanniittiizzee==kkeerrnneell--aaddddrreessss or
           --ffssaanniittiizzee==aaddddrreessss The option cannot be combined with
           --ffssaanniittiizzee==tthhrreeaadd and/or --ffcchheecckk--ppooiinntteerr--bboouunnddss.  Note: By default
           the check is disabled at run time.  To enable it, add
           "detect_invalid_pointer_pairs=2" to the environment variable
           AASSAANN__OOPPTTIIOONNSS. Using "detect_invalid_pointer_pairs=1" detects
           invalid operation only when both pointers are non-null.

       --ffssaanniittiizzee==tthhrreeaadd
           Enable ThreadSanitizer, a fast data race detector.  Memory access
           instructions are instrumented to detect data race bugs.  See
           <hhttttppss::////ggiitthhuubb..ccoomm//ggooooggllee//ssaanniittiizzeerrss//wwiikkii##tthhrreeaaddssaanniittiizzeerr> for
           more details. The run-time behavior can be influenced using the
           TTSSAANN__OOPPTTIIOONNSS environment variable; see
           <hhttttppss::////ggiitthhuubb..ccoomm//ggooooggllee//ssaanniittiizzeerrss//wwiikkii//TThhrreeaaddSSaanniittiizzeerrFFllaaggss>
           for a list of supported options.  The option cannot be combined
           with --ffssaanniittiizzee==aaddddrreessss, --ffssaanniittiizzee==lleeaakk and/or
           --ffcchheecckk--ppooiinntteerr--bboouunnddss.

           Note that sanitized atomic builtins cannot throw exceptions when
           operating on invalid memory addresses with non-call exceptions
           (--ffnnoonn--ccaallll--eexxcceeppttiioonnss).

       --ffssaanniittiizzee==lleeaakk
           Enable LeakSanitizer, a memory leak detector.  This option only
           matters for linking of executables and the executable is linked
           against a library that overrides "malloc" and other allocator
           functions.  See
           <hhttttppss::////ggiitthhuubb..ccoomm//ggooooggllee//ssaanniittiizzeerrss//wwiikkii//AAddddrreessssSSaanniittiizzeerrLLeeaakkSSaanniittiizzeerr>
           for more details.  The run-time behavior can be influenced using
           the LLSSAANN__OOPPTTIIOONNSS environment variable.  The option cannot be
           combined with --ffssaanniittiizzee==tthhrreeaadd.

       --ffssaanniittiizzee==uunnddeeffiinneedd
           Enable UndefinedBehaviorSanitizer, a fast undefined behavior
           detector.  Various computations are instrumented to detect
           undefined behavior at runtime.  Current suboptions are:

           --ffssaanniittiizzee==sshhiifftt
               This option enables checking that the result of a shift
               operation is not undefined.  Note that what exactly is
               considered undefined differs slightly between C and C++, as
               well as between ISO C90 and C99, etc.  This option has two
               suboptions, --ffssaanniittiizzee==sshhiifftt--bbaassee and
               --ffssaanniittiizzee==sshhiifftt--eexxppoonneenntt.

           --ffssaanniittiizzee==sshhiifftt--eexxppoonneenntt
               This option enables checking that the second argument of a
               shift operation is not negative and is smaller than the
               precision of the promoted first argument.

           --ffssaanniittiizzee==sshhiifftt--bbaassee
               If the second argument of a shift operation is within range,
               check that the result of a shift operation is not undefined.
               Note that what exactly is considered undefined differs slightly
               between C and C++, as well as between ISO C90 and C99, etc.

           --ffssaanniittiizzee==iinntteeggeerr--ddiivviiddee--bbyy--zzeerroo
               Detect integer division by zero as well as "INT_MIN / -1"
               division.

           --ffssaanniittiizzee==uunnrreeaacchhaabbllee
               With this option, the compiler turns the
               "__builtin_unreachable" call into a diagnostics message call
               instead.  When reaching the "__builtin_unreachable" call, the
               behavior is undefined.

           --ffssaanniittiizzee==vvllaa--bboouunndd
               This option instructs the compiler to check that the size of a
               variable length array is positive.

           --ffssaanniittiizzee==nnuullll
               This option enables pointer checking.  Particularly, the
               application built with this option turned on will issue an
               error message when it tries to dereference a NULL pointer, or
               if a reference (possibly an rvalue reference) is bound to a
               NULL pointer, or if a method is invoked on an object pointed by
               a NULL pointer.

           --ffssaanniittiizzee==rreettuurrnn
               This option enables return statement checking.  Programs built
               with this option turned on will issue an error message when the
               end of a non-void function is reached without actually
               returning a value.  This option works in C++ only.

           --ffssaanniittiizzee==ssiiggnneedd--iinntteeggeerr--oovveerrffllooww
               This option enables signed integer overflow checking.  We check
               that the result of "+", "*", and both unary and binary "-" does
               not overflow in the signed arithmetics.  Note, integer
               promotion rules must be taken into account.  That is, the
               following is not an overflow:

                       signed char a = SCHAR_MAX;
                       a++;

           --ffssaanniittiizzee==bboouunnddss
               This option enables instrumentation of array bounds.  Various
               out of bounds accesses are detected.  Flexible array members,
               flexible array member-like arrays, and initializers of
               variables with static storage are not instrumented.  The option
               cannot be combined with --ffcchheecckk--ppooiinntteerr--bboouunnddss.

           --ffssaanniittiizzee==bboouunnddss--ssttrriicctt
               This option enables strict instrumentation of array bounds.
               Most out of bounds accesses are detected, including flexible
               array members and flexible array member-like arrays.
               Initializers of variables with static storage are not
               instrumented.  The option cannot be combined with
               --ffcchheecckk--ppooiinntteerr--bboouunnddss.

           --ffssaanniittiizzee==aalliiggnnmmeenntt
               This option enables checking of alignment of pointers when they
               are dereferenced, or when a reference is bound to
               insufficiently aligned target, or when a method or constructor
               is invoked on insufficiently aligned object.

           --ffssaanniittiizzee==oobbjjeecctt--ssiizzee
               This option enables instrumentation of memory references using
               the "__builtin_object_size" function.  Various out of bounds
               pointer accesses are detected.

           --ffssaanniittiizzee==ffllooaatt--ddiivviiddee--bbyy--zzeerroo
               Detect floating-point division by zero.  Unlike other similar
               options, --ffssaanniittiizzee==ffllooaatt--ddiivviiddee--bbyy--zzeerroo is not enabled by
               --ffssaanniittiizzee==uunnddeeffiinneedd, since floating-point division by zero can
               be a legitimate way of obtaining infinities and NaNs.

           --ffssaanniittiizzee==ffllooaatt--ccaasstt--oovveerrffllooww
               This option enables floating-point type to integer conversion
               checking.  We check that the result of the conversion does not
               overflow.  Unlike other similar options,
               --ffssaanniittiizzee==ffllooaatt--ccaasstt--oovveerrffllooww is not enabled by
               --ffssaanniittiizzee==uunnddeeffiinneedd.  This option does not work well with
               "FE_INVALID" exceptions enabled.

           --ffssaanniittiizzee==nnoonnnnuullll--aattttrriibbuuttee
               This option enables instrumentation of calls, checking whether
               null values are not passed to arguments marked as requiring a
               non-null value by the "nonnull" function attribute.

           --ffssaanniittiizzee==rreettuurrnnss--nnoonnnnuullll--aattttrriibbuuttee
               This option enables instrumentation of return statements in
               functions marked with "returns_nonnull" function attribute, to
               detect returning of null values from such functions.

           --ffssaanniittiizzee==bbooooll
               This option enables instrumentation of loads from bool.  If a
               value other than 0/1 is loaded, a run-time error is issued.

           --ffssaanniittiizzee==eennuumm
               This option enables instrumentation of loads from an enum type.
               If a value outside the range of values for the enum type is
               loaded, a run-time error is issued.

           --ffssaanniittiizzee==vvppttrr
               This option enables instrumentation of C++ member function
               calls, member accesses and some conversions between pointers to
               base and derived classes, to verify the referenced object has
               the correct dynamic type.

           --ffssaanniittiizzee==ppooiinntteerr--oovveerrffllooww
               This option enables instrumentation of pointer arithmetics.  If
               the pointer arithmetics overflows, a run-time error is issued.

           --ffssaanniittiizzee==bbuuiillttiinn
               This option enables instrumentation of arguments to selected
               builtin functions.  If an invalid value is passed to such
               arguments, a run-time error is issued.  E.g. passing 0 as the
               argument to "__builtin_ctz" or "__builtin_clz" invokes
               undefined behavior and is diagnosed by this option.

           While --ffttrraappvv causes traps for signed overflows to be emitted,
           --ffssaanniittiizzee==uunnddeeffiinneedd gives a diagnostic message.  This currently
           works only for the C family of languages.

       --ffnnoo--ssaanniittiizzee==aallll
           This option disables all previously enabled sanitizers.
           --ffssaanniittiizzee==aallll is not allowed, as some sanitizers cannot be used
           together.

       --ffaassaann--sshhaaddooww--ooffffsseett==_n_u_m_b_e_r
           This option forces GCC to use custom shadow offset in
           AddressSanitizer checks.  It is useful for experimenting with
           different shadow memory layouts in Kernel AddressSanitizer.

       --ffssaanniittiizzee--sseeccttiioonnss==_s_1,,_s_2,,......
           Sanitize global variables in selected user-defined sections.  _s_i
           may contain wildcards.

       --ffssaanniittiizzee--rreeccoovveerr[==_o_p_t_s]
           --ffssaanniittiizzee--rreeccoovveerr== controls error recovery mode for sanitizers
           mentioned in comma-separated list of _o_p_t_s.  Enabling this option
           for a sanitizer component causes it to attempt to continue running
           the program as if no error happened.  This means multiple runtime
           errors can be reported in a single program run, and the exit code
           of the program may indicate success even when errors have been
           reported.  The --ffnnoo--ssaanniittiizzee--rreeccoovveerr== option can be used to alter
           this behavior: only the first detected error is reported and
           program then exits with a non-zero exit code.

           Currently this feature only works for --ffssaanniittiizzee==uunnddeeffiinneedd (and its
           suboptions except for --ffssaanniittiizzee==uunnrreeaacchhaabbllee and
           --ffssaanniittiizzee==rreettuurrnn), --ffssaanniittiizzee==ffllooaatt--ccaasstt--oovveerrffllooww,
           --ffssaanniittiizzee==ffllooaatt--ddiivviiddee--bbyy--zzeerroo, --ffssaanniittiizzee==bboouunnddss--ssttrriicctt,
           --ffssaanniittiizzee==kkeerrnneell--aaddddrreessss and --ffssaanniittiizzee==aaddddrreessss.  For these
           sanitizers error recovery is turned on by default, except
           --ffssaanniittiizzee==aaddddrreessss, for which this feature is experimental.
           --ffssaanniittiizzee--rreeccoovveerr==aallll and --ffnnoo--ssaanniittiizzee--rreeccoovveerr==aallll is also
           accepted, the former enables recovery for all sanitizers that
           support it, the latter disables recovery for all sanitizers that
           support it.

           Even if a recovery mode is turned on the compiler side, it needs to
           be also enabled on the runtime library side, otherwise the failures
           are still fatal.  The runtime library defaults to "halt_on_error=0"
           for ThreadSanitizer and UndefinedBehaviorSanitizer, while default
           value for AddressSanitizer is "halt_on_error=1". This can be
           overridden through setting the "halt_on_error" flag in the
           corresponding environment variable.

           Syntax without an explicit _o_p_t_s parameter is deprecated.  It is
           equivalent to specifying an _o_p_t_s list of:

                   undefined,float-cast-overflow,float-divide-by-zero,bounds-strict

       --ffssaanniittiizzee--aaddddrreessss--uussee--aafftteerr--ssccooppee
           Enable sanitization of local variables to detect use-after-scope
           bugs.  The option sets --ffssttaacckk--rreeuussee to nnoonnee.

       --ffssaanniittiizzee--uunnddeeffiinneedd--ttrraapp--oonn--eerrrroorr
           The --ffssaanniittiizzee--uunnddeeffiinneedd--ttrraapp--oonn--eerrrroorr option instructs the
           compiler to report undefined behavior using "__builtin_trap" rather
           than a "libubsan" library routine.  The advantage of this is that
           the "libubsan" library is not needed and is not linked in, so this
           is usable even in freestanding environments.

       --ffssaanniittiizzee--ccoovveerraaggee==ttrraaccee--ppcc
           Enable coverage-guided fuzzing code instrumentation.  Inserts a
           call to "__sanitizer_cov_trace_pc" into every basic block.

       --ffssaanniittiizzee--ccoovveerraaggee==ttrraaccee--ccmmpp
           Enable dataflow guided fuzzing code instrumentation.  Inserts a
           call to "__sanitizer_cov_trace_cmp1", "__sanitizer_cov_trace_cmp2",
           "__sanitizer_cov_trace_cmp4" or "__sanitizer_cov_trace_cmp8" for
           integral comparison with both operands variable or
           "__sanitizer_cov_trace_const_cmp1",
           "__sanitizer_cov_trace_const_cmp2",
           "__sanitizer_cov_trace_const_cmp4" or
           "__sanitizer_cov_trace_const_cmp8" for integral comparison with one
           operand constant, "__sanitizer_cov_trace_cmpf" or
           "__sanitizer_cov_trace_cmpd" for float or double comparisons and
           "__sanitizer_cov_trace_switch" for switch statements.

       --ffbboouunnddss--cchheecckk
           For front ends that support it, generate additional code to check
           that indices used to access arrays are within the declared range.
           This is currently only supported by the Fortran front end, where
           this option defaults to false.

       --ffcchheecckk--ppooiinntteerr--bboouunnddss
           Enable Pointer Bounds Checker instrumentation.  Each memory
           reference is instrumented with checks of the pointer used for
           memory access against bounds associated with that pointer.

           Currently there is only an implementation for Intel MPX available,
           thus x86 GNU/Linux target and --mmmmppxx are required to enable this
           feature.  MPX-based instrumentation requires a runtime library to
           enable MPX in hardware and handle bounds violation signals.  By
           default when --ffcchheecckk--ppooiinntteerr--bboouunnddss and --mmmmppxx options are used to
           link a program, the GCC driver links against the _l_i_b_m_p_x and
           _l_i_b_m_p_x_w_r_a_p_p_e_r_s libraries.  Bounds checking on calls to dynamic
           libraries requires a linker with --zz bbnnddpplltt support; if GCC was
           configured with a linker without support for this option (including
           the Gold linker and older versions of ld), a warning is given if
           you link with --mmmmppxx without also specifying --ssttaattiicc, since the
           overall effectiveness of the bounds checking protection is reduced.
           See also --ssttaattiicc--lliibbmmppxxwwrraappppeerrss.

           MPX-based instrumentation may be used for debugging and also may be
           included in production code to increase program security.
           Depending on usage, you may have different requirements for the
           runtime library.  The current version of the MPX runtime library is
           more oriented for use as a debugging tool.  MPX runtime library
           usage implies --llpptthhrreeaadd.  See also --ssttaattiicc--lliibbmmppxx.  The runtime
           library  behavior can be influenced using various CCHHKKPP__RRTT__**
           environment variables.  See
           <hhttttppss::////ggcccc..ggnnuu..oorrgg//wwiikkii//IInntteell%%2200MMPPXX%%2200ssuuppppoorrtt%%2200iinn%%2200tthhee%%2200GGCCCC%%2200ccoommppiilleerr>
           for more details.

           Generated instrumentation may be controlled by various --ffcchhkkpp--**
           options and by the "bnd_variable_size" structure field attribute
           and "bnd_legacy", and "bnd_instrument" function attributes.  GCC
           also provides a number of built-in functions for controlling the
           Pointer Bounds Checker.

       --ffcchhkkpp--cchheecckk--iinnccoommpplleettee--ttyyppee
           Generate pointer bounds checks for variables with incomplete type.
           Enabled by default.

       --ffcchhkkpp--nnaarrrrooww--bboouunnddss
           Controls bounds used by Pointer Bounds Checker for pointers to
           object fields.  If narrowing is enabled then field bounds are used.
           Otherwise object bounds are used.  See also
           --ffcchhkkpp--nnaarrrrooww--ttoo--iinnnneerrmmoosstt--aarrrraayy and
           --ffcchhkkpp--ffiirrsstt--ffiieelldd--hhaass--oowwnn--bboouunnddss.  Enabled by default.

       --ffcchhkkpp--ffiirrsstt--ffiieelldd--hhaass--oowwnn--bboouunnddss
           Forces Pointer Bounds Checker to use narrowed bounds for the
           address of the first field in the structure.  By default a pointer
           to the first field has the same bounds as a pointer to the whole
           structure.

       --ffcchhkkpp--fflleexxiibbllee--ssttrruucctt--ttrraaiilliinngg--aarrrraayyss
           Forces Pointer Bounds Checker to treat all trailing arrays in
           structures as possibly flexible.  By default only array fields with
           zero length or that are marked with attribute bnd_variable_size are
           treated as flexible.

       --ffcchhkkpp--nnaarrrrooww--ttoo--iinnnneerrmmoosstt--aarrrraayy
           Forces Pointer Bounds Checker to use bounds of the innermost arrays
           in case of nested static array access.  By default this option is
           disabled and bounds of the outermost array are used.

       --ffcchhkkpp--ooppttiimmiizzee
           Enables Pointer Bounds Checker optimizations.  Enabled by default
           at optimization levels --OO, --OO22, --OO33.

       --ffcchhkkpp--uussee--ffaasstt--ssttrriinngg--ffuunnccttiioonnss
           Enables use of *_nobnd versions of string functions (not copying
           bounds) by Pointer Bounds Checker.  Disabled by default.

       --ffcchhkkpp--uussee--nnoocchhkk--ssttrriinngg--ffuunnccttiioonnss
           Enables use of *_nochk versions of string functions (not checking
           bounds) by Pointer Bounds Checker.  Disabled by default.

       --ffcchhkkpp--uussee--ssttaattiicc--bboouunnddss
           Allow Pointer Bounds Checker to generate static bounds holding
           bounds of static variables.  Enabled by default.

       --ffcchhkkpp--uussee--ssttaattiicc--ccoonnsstt--bboouunnddss
           Use statically-initialized bounds for constant bounds instead of
           generating them each time they are required.  By default enabled
           when --ffcchhkkpp--uussee--ssttaattiicc--bboouunnddss is enabled.

       --ffcchhkkpp--ttrreeaatt--zzeerroo--ddyynnaammiicc--ssiizzee--aass--iinnffiinniittee
           With this option, objects with incomplete type whose dynamically-
           obtained size is zero are treated as having infinite size instead
           by Pointer Bounds Checker.  This option may be helpful if a program
           is linked with a library missing size information for some symbols.
           Disabled by default.

       --ffcchhkkpp--cchheecckk--rreeaadd
           Instructs Pointer Bounds Checker to generate checks for all read
           accesses to memory.  Enabled by default.

       --ffcchhkkpp--cchheecckk--wwrriittee
           Instructs Pointer Bounds Checker to generate checks for all write
           accesses to memory.  Enabled by default.

       --ffcchhkkpp--ssttoorree--bboouunnddss
           Instructs Pointer Bounds Checker to generate bounds stores for
           pointer writes.  Enabled by default.

       --ffcchhkkpp--iinnssttrruummeenntt--ccaallllss
           Instructs Pointer Bounds Checker to pass pointer bounds to calls.
           Enabled by default.

       --ffcchhkkpp--iinnssttrruummeenntt--mmaarrkkeedd--oonnllyy
           Instructs Pointer Bounds Checker to instrument only functions
           marked with the "bnd_instrument" attribute.  Disabled by default.

       --ffcchhkkpp--uussee--wwrraappppeerrss
           Allows Pointer Bounds Checker to replace calls to built-in
           functions with calls to wrapper functions.  When
           --ffcchhkkpp--uussee--wwrraappppeerrss is used to link a program, the GCC driver
           automatically links against _l_i_b_m_p_x_w_r_a_p_p_e_r_s.  See also
           --ssttaattiicc--lliibbmmppxxwwrraappppeerrss.  Enabled by default.

       --ffccff--pprrootteeccttiioonn==[ffuullll|bbrraanncchh|rreettuurrnn|nnoonnee]
           Enable code instrumentation of control-flow transfers to increase
           program security by checking that target addresses of control-flow
           transfer instructions (such as indirect function call, function
           return, indirect jump) are valid.  This prevents diverting the flow
           of control to an unexpected target.  This is intended to protect
           against such threats as Return-oriented Programming (ROP), and
           similarly call/jmp-oriented programming (COP/JOP).

           The value "branch" tells the compiler to implement checking of
           validity of control-flow transfer at the point of indirect branch
           instructions, i.e. call/jmp instructions.  The value "return"
           implements checking of validity at the point of returning from a
           function.  The value "full" is an alias for specifying both
           "branch" and "return". The value "none" turns off instrumentation.

           The macro "__CET__" is defined when --ffccff--pprrootteeccttiioonn is used.  The
           first bit of "__CET__" is set to 1 for the value "branch" and the
           second bit of "__CET__" is set to 1 for the "return".

           You can also use the "nocf_check" attribute to identify which
           functions and calls should be skipped from instrumentation.

           Currently the x86 GNU/Linux target provides an implementation based
           on Intel Control-flow Enforcement Technology (CET).

       --ffssttaacckk--pprrootteeccttoorr
           Emit extra code to check for buffer overflows, such as stack
           smashing attacks.  This is done by adding a guard variable to
           functions with vulnerable objects.  This includes functions that
           call "alloca", and functions with buffers larger than 8 bytes.  The
           guards are initialized when a function is entered and then checked
           when the function exits.  If a guard check fails, an error message
           is printed and the program exits.

       --ffssttaacckk--pprrootteeccttoorr--aallll
           Like --ffssttaacckk--pprrootteeccttoorr except that all functions are protected.

       --ffssttaacckk--pprrootteeccttoorr--ssttrroonngg
           Like --ffssttaacckk--pprrootteeccttoorr but includes additional functions to be
           protected --- those that have local array definitions, or have
           references to local frame addresses.

       --ffssttaacckk--pprrootteeccttoorr--eexxpplliicciitt
           Like --ffssttaacckk--pprrootteeccttoorr but only protects those functions which have
           the "stack_protect" attribute.

       --ffssttaacckk--cchheecckk
           Generate code to verify that you do not go beyond the boundary of
           the stack.  You should specify this flag if you are running in an
           environment with multiple threads, but you only rarely need to
           specify it in a single-threaded environment since stack overflow is
           automatically detected on nearly all systems if there is only one
           stack.

           Note that this switch does not actually cause checking to be done;
           the operating system or the language runtime must do that.  The
           switch causes generation of code to ensure that they see the stack
           being extended.

           You can additionally specify a string parameter: nnoo means no
           checking, ggeenneerriicc means force the use of old-style checking,
           ssppeecciiffiicc means use the best checking method and is equivalent to
           bare --ffssttaacckk--cchheecckk.

           Old-style checking is a generic mechanism that requires no specific
           target support in the compiler but comes with the following
           drawbacks:

           1.  Modified allocation strategy for large objects: they are always
               allocated dynamically if their size exceeds a fixed threshold.
               Note this may change the semantics of some code.

           2.  Fixed limit on the size of the static frame of functions: when
               it is topped by a particular function, stack checking is not
               reliable and a warning is issued by the compiler.

           3.  Inefficiency: because of both the modified allocation strategy
               and the generic implementation, code performance is hampered.

           Note that old-style stack checking is also the fallback method for
           ssppeecciiffiicc if no target support has been added in the compiler.

           --ffssttaacckk--cchheecckk== is designed for Ada's needs to detect infinite
           recursion and stack overflows.  ssppeecciiffiicc is an excellent choice
           when compiling Ada code.  It is not generally sufficient to protect
           against stack-clash attacks.  To protect against those you want
           --ffssttaacckk--ccllaasshh--pprrootteeccttiioonn.

       --ffssttaacckk--ccllaasshh--pprrootteeccttiioonn
           Generate code to prevent stack clash style attacks.  When this
           option is enabled, the compiler will only allocate one page of
           stack space at a time and each page is accessed immediately after
           allocation.  Thus, it prevents allocations from jumping over any
           stack guard page provided by the operating system.

           Most targets do not fully support stack clash protection.  However,
           on those targets --ffssttaacckk--ccllaasshh--pprrootteeccttiioonn will protect dynamic
           stack allocations.  --ffssttaacckk--ccllaasshh--pprrootteeccttiioonn may also provide
           limited protection for static stack allocations if the target
           supports --ffssttaacckk--cchheecckk==ssppeecciiffiicc.

       --ffssttaacckk--lliimmiitt--rreeggiisstteerr==_r_e_g
       --ffssttaacckk--lliimmiitt--ssyymmbbooll==_s_y_m
       --ffnnoo--ssttaacckk--lliimmiitt
           Generate code to ensure that the stack does not grow beyond a
           certain value, either the value of a register or the address of a
           symbol.  If a larger stack is required, a signal is raised at run
           time.  For most targets, the signal is raised before the stack
           overruns the boundary, so it is possible to catch the signal
           without taking special precautions.

           For instance, if the stack starts at absolute address 00xx8800000000000000
           and grows downwards, you can use the flags
           --ffssttaacckk--lliimmiitt--ssyymmbbooll==____ssttaacckk__lliimmiitt and
           --WWll,,----ddeeffssyymm,,____ssttaacckk__lliimmiitt==00xx77ffffee00000000 to enforce a stack limit of
           128KB.  Note that this may only work with the GNU linker.

           You can locally override stack limit checking by using the
           "no_stack_limit" function attribute.

       --ffsspplliitt--ssttaacckk
           Generate code to automatically split the stack before it overflows.
           The resulting program has a discontiguous stack which can only
           overflow if the program is unable to allocate any more memory.
           This is most useful when running threaded programs, as it is no
           longer necessary to calculate a good stack size to use for each
           thread.  This is currently only implemented for the x86 targets
           running GNU/Linux.

           When code compiled with --ffsspplliitt--ssttaacckk calls code compiled without
           --ffsspplliitt--ssttaacckk, there may not be much stack space available for the
           latter code to run.  If compiling all code, including library code,
           with --ffsspplliitt--ssttaacckk is not an option, then the linker can fix up
           these calls so that the code compiled without --ffsspplliitt--ssttaacckk always
           has a large stack.  Support for this is implemented in the gold
           linker in GNU binutils release 2.21 and later.

       --ffvvttaabbllee--vveerriiffyy==[ssttdd|pprreeiinniitt|nnoonnee]
           This option is only available when compiling C++ code.  It turns on
           (or off, if using --ffvvttaabbllee--vveerriiffyy==nnoonnee) the security feature that
           verifies at run time, for every virtual call, that the vtable
           pointer through which the call is made is valid for the type of the
           object, and has not been corrupted or overwritten.  If an invalid
           vtable pointer is detected at run time, an error is reported and
           execution of the program is immediately halted.

           This option causes run-time data structures to be built at program
           startup, which are used for verifying the vtable pointers.  The
           options ssttdd and pprreeiinniitt control the timing of when these data
           structures are built.  In both cases the data structures are built
           before execution reaches "main".  Using --ffvvttaabbllee--vveerriiffyy==ssttdd causes
           the data structures to be built after shared libraries have been
           loaded and initialized.  --ffvvttaabbllee--vveerriiffyy==pprreeiinniitt causes them to be
           built before shared libraries have been loaded and initialized.

           If this option appears multiple times in the command line with
           different values specified, nnoonnee takes highest priority over both
           ssttdd and pprreeiinniitt; pprreeiinniitt takes priority over ssttdd.

       --ffvvttvv--ddeebbuugg
           When used in conjunction with --ffvvttaabbllee--vveerriiffyy==ssttdd or
           --ffvvttaabbllee--vveerriiffyy==pprreeiinniitt, causes debug versions of the runtime
           functions for the vtable verification feature to be called.  This
           flag also causes the compiler to log information about which vtable
           pointers it finds for each class.  This information is written to a
           file named _v_t_v___s_e_t___p_t_r___d_a_t_a_._l_o_g in the directory named by the
           environment variable VVTTVV__LLOOGGSS__DDIIRR if that is defined or the current
           working directory otherwise.

           Note:  This feature _a_p_p_e_n_d_s data to the log file. If you want a
           fresh log file, be sure to delete any existing one.

       --ffvvttvv--ccoouunnttss
           This is a debugging flag.  When used in conjunction with
           --ffvvttaabbllee--vveerriiffyy==ssttdd or --ffvvttaabbllee--vveerriiffyy==pprreeiinniitt, this causes the
           compiler to keep track of the total number of virtual calls it
           encounters and the number of verifications it inserts.  It also
           counts the number of calls to certain run-time library functions
           that it inserts and logs this information for each compilation
           unit.  The compiler writes this information to a file named
           _v_t_v___c_o_u_n_t___d_a_t_a_._l_o_g in the directory named by the environment
           variable VVTTVV__LLOOGGSS__DDIIRR if that is defined or the current working
           directory otherwise.  It also counts the size of the vtable pointer
           sets for each class, and writes this information to
           _v_t_v___c_l_a_s_s___s_e_t___s_i_z_e_s_._l_o_g in the same directory.

           Note:  This feature _a_p_p_e_n_d_s data to the log files.  To get fresh
           log files, be sure to delete any existing ones.

       --ffiinnssttrruummeenntt--ffuunnccttiioonnss
           Generate instrumentation calls for entry and exit to functions.
           Just after function entry and just before function exit, the
           following profiling functions are called with the address of the
           current function and its call site.  (On some platforms,
           "__builtin_return_address" does not work beyond the current
           function, so the call site information may not be available to the
           profiling functions otherwise.)

                   void __cyg_profile_func_enter (void *this_fn,
                                                  void *call_site);
                   void __cyg_profile_func_exit  (void *this_fn,
                                                  void *call_site);

           The first argument is the address of the start of the current
           function, which may be looked up exactly in the symbol table.

           This instrumentation is also done for functions expanded inline in
           other functions.  The profiling calls indicate where, conceptually,
           the inline function is entered and exited.  This means that
           addressable versions of such functions must be available.  If all
           your uses of a function are expanded inline, this may mean an
           additional expansion of code size.  If you use "extern inline" in
           your C code, an addressable version of such functions must be
           provided.  (This is normally the case anyway, but if you get lucky
           and the optimizer always expands the functions inline, you might
           have gotten away without providing static copies.)

           A function may be given the attribute "no_instrument_function", in
           which case this instrumentation is not done.  This can be used, for
           example, for the profiling functions listed above, high-priority
           interrupt routines, and any functions from which the profiling
           functions cannot safely be called (perhaps signal handlers, if the
           profiling routines generate output or allocate memory).

       --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffiillee--lliisstt==_f_i_l_e,,_f_i_l_e,,......
           Set the list of functions that are excluded from instrumentation
           (see the description of --ffiinnssttrruummeenntt--ffuunnccttiioonnss).  If the file that
           contains a function definition matches with one of _f_i_l_e, then that
           function is not instrumented.  The match is done on substrings: if
           the _f_i_l_e parameter is a substring of the file name, it is
           considered to be a match.

           For example:

                   -finstrument-functions-exclude-file-list=/bits/stl,include/sys

           excludes any inline function defined in files whose pathnames
           contain _/_b_i_t_s_/_s_t_l or _i_n_c_l_u_d_e_/_s_y_s.

           If, for some reason, you want to include letter ,, in one of _s_y_m,
           write ,,. For example,
           --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffiillee--lliisstt=='',,,,ttmmpp'' (note the single
           quote surrounding the option).

       --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffuunnccttiioonn--lliisstt==_s_y_m,,_s_y_m,,......
           This is similar to --ffiinnssttrruummeenntt--ffuunnccttiioonnss--eexxcclluuddee--ffiillee--lliisstt, but
           this option sets the list of function names to be excluded from
           instrumentation.  The function name to be matched is its user-
           visible name, such as "vector<int> blah(const vector<int> &)", not
           the internal mangled name (e.g., "_Z4blahRSt6vectorIiSaIiEE").  The
           match is done on substrings: if the _s_y_m parameter is a substring of
           the function name, it is considered to be a match.  For C99 and C++
           extended identifiers, the function name must be given in UTF-8, not
           using universal character names.

       --ffppaattcchhaabbllee--ffuunnccttiioonn--eennttrryy==_N[[,,_M]]
           Generate _N NOPs right at the beginning of each function, with the
           function entry point before the _Mth NOP.  If _M is omitted, it
           defaults to 0 so the function entry points to the address just at
           the first NOP.  The NOP instructions reserve extra space which can
           be used to patch in any desired instrumentation at run time,
           provided that the code segment is writable.  The amount of space is
           controllable indirectly via the number of NOPs; the NOP instruction
           used corresponds to the instruction emitted by the internal GCC
           back-end interface "gen_nop".  This behavior is target-specific and
           may also depend on the architecture variant and/or other
           compilation options.

           For run-time identification, the starting addresses of these areas,
           which correspond to their respective function entries minus _M, are
           additionally collected in the "__patchable_function_entries"
           section of the resulting binary.

           Note that the value of "__attribute__ ((patchable_function_entry
           (N,M)))" takes precedence over command-line option
           --ffppaattcchhaabbllee--ffuunnccttiioonn--eennttrryy==NN,,MM.  This can be used to increase the
           area size or to remove it completely on a single function.  If
           "N=0", no pad location is recorded.

           The NOP instructions are inserted at---and maybe before, depending
           on _M---the function entry address, even before the prologue.

   OOppttiioonnss CCoonnttrroolllliinngg tthhee PPrreepprroocceessssoorr
       These options control the C preprocessor, which is run on each C source
       file before actual compilation.

       If you use the --EE option, nothing is done except preprocessing.  Some
       of these options make sense only together with --EE because they cause
       the preprocessor output to be unsuitable for actual compilation.

       In addition to the options listed here, there are a number of options
       to control search paths for include files documented in DDiirreeccttoorryy
       OOppttiioonnss.  Options to control preprocessor diagnostics are listed in
       WWaarrnniinngg OOppttiioonnss.

       --DD _n_a_m_e
           Predefine _n_a_m_e as a macro, with definition 1.

       --DD _n_a_m_e==_d_e_f_i_n_i_t_i_o_n
           The contents of _d_e_f_i_n_i_t_i_o_n are tokenized and processed as if they
           appeared during translation phase three in a ##ddeeffiinnee directive.  In
           particular, the definition is truncated by embedded newline
           characters.

           If you are invoking the preprocessor from a shell or shell-like
           program you may need to use the shell's quoting syntax to protect
           characters such as spaces that have a meaning in the shell syntax.

           If you wish to define a function-like macro on the command line,
           write its argument list with surrounding parentheses before the
           equals sign (if any).  Parentheses are meaningful to most shells,
           so you should quote the option.  With sshh and ccsshh,
           --DD''_n_a_m_e((_a_r_g_s_._._.))==_d_e_f_i_n_i_t_i_o_n'' works.

           --DD and --UU options are processed in the order they are given on the
           command line.  All --iimmaaccrrooss _f_i_l_e and --iinncclluuddee _f_i_l_e options are
           processed after all --DD and --UU options.

       --UU _n_a_m_e
           Cancel any previous definition of _n_a_m_e, either built in or provided
           with a --DD option.

       --iinncclluuddee _f_i_l_e
           Process _f_i_l_e as if "#include "file"" appeared as the first line of
           the primary source file.  However, the first directory searched for
           _f_i_l_e is the preprocessor's working directory _i_n_s_t_e_a_d _o_f the
           directory containing the main source file.  If not found there, it
           is searched for in the remainder of the "#include "..."" search
           chain as normal.

           If multiple --iinncclluuddee options are given, the files are included in
           the order they appear on the command line.

       --iimmaaccrrooss _f_i_l_e
           Exactly like --iinncclluuddee, except that any output produced by scanning
           _f_i_l_e is thrown away.  Macros it defines remain defined.  This
           allows you to acquire all the macros from a header without also
           processing its declarations.

           All files specified by --iimmaaccrrooss are processed before all files
           specified by --iinncclluuddee.

       --uunnddeeff
           Do not predefine any system-specific or GCC-specific macros.  The
           standard predefined macros remain defined.

       --pptthhrreeaadd
           Define additional macros required for using the POSIX threads
           library.  You should use this option consistently for both
           compilation and linking.  This option is supported on GNU/Linux
           targets, most other Unix derivatives, and also on x86 Cygwin and
           MinGW targets.

       --MM  Instead of outputting the result of preprocessing, output a rule
           suitable for mmaakkee describing the dependencies of the main source
           file.  The preprocessor outputs one mmaakkee rule containing the object
           file name for that source file, a colon, and the names of all the
           included files, including those coming from --iinncclluuddee or --iimmaaccrrooss
           command-line options.

           Unless specified explicitly (with --MMTT or --MMQQ), the object file name
           consists of the name of the source file with any suffix replaced
           with object file suffix and with any leading directory parts
           removed.  If there are many included files then the rule is split
           into several lines using \\-newline.  The rule has no commands.

           This option does not suppress the preprocessor's debug output, such
           as --ddMM.  To avoid mixing such debug output with the dependency
           rules you should explicitly specify the dependency output file with
           --MMFF, or use an environment variable like DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT.
           Debug output is still sent to the regular output stream as normal.

           Passing --MM to the driver implies --EE, and suppresses warnings with
           an implicit --ww.

       --MMMM Like --MM but do not mention header files that are found in system
           header directories, nor header files that are included, directly or
           indirectly, from such a header.

           This implies that the choice of angle brackets or double quotes in
           an ##iinncclluuddee directive does not in itself determine whether that
           header appears in --MMMM dependency output.

       --MMFF _f_i_l_e
           When used with --MM or --MMMM, specifies a file to write the
           dependencies to.  If no --MMFF switch is given the preprocessor sends
           the rules to the same place it would send preprocessed output.

           When used with the driver options --MMDD or --MMMMDD, --MMFF overrides the
           default dependency output file.

           If _f_i_l_e is _-, then the dependencies are written to _s_t_d_o_u_t.

       --MMGG In conjunction with an option such as --MM requesting dependency
           generation, --MMGG assumes missing header files are generated files
           and adds them to the dependency list without raising an error.  The
           dependency filename is taken directly from the "#include" directive
           without prepending any path.  --MMGG also suppresses preprocessed
           output, as a missing header file renders this useless.

           This feature is used in automatic updating of makefiles.

       --MMPP This option instructs CPP to add a phony target for each dependency
           other than the main file, causing each to depend on nothing.  These
           dummy rules work around errors mmaakkee gives if you remove header
           files without updating the _M_a_k_e_f_i_l_e to match.

           This is typical output:

                   test.o: test.c test.h

                   test.h:

       --MMTT _t_a_r_g_e_t
           Change the target of the rule emitted by dependency generation.  By
           default CPP takes the name of the main input file, deletes any
           directory components and any file suffix such as ..cc, and appends
           the platform's usual object suffix.  The result is the target.

           An --MMTT option sets the target to be exactly the string you specify.
           If you want multiple targets, you can specify them as a single
           argument to --MMTT, or use multiple --MMTT options.

           For example, --MMTT ''$$((oobbjjppffxx))ffoooo..oo'' might give

                   $(objpfx)foo.o: foo.c

       --MMQQ _t_a_r_g_e_t
           Same as --MMTT, but it quotes any characters which are special to
           Make.  --MMQQ ''$$((oobbjjppffxx))ffoooo..oo'' gives

                   $$(objpfx)foo.o: foo.c

           The default target is automatically quoted, as if it were given
           with --MMQQ.

       --MMDD --MMDD is equivalent to --MM --MMFF _f_i_l_e, except that --EE is not implied.
           The driver determines _f_i_l_e based on whether an --oo option is given.
           If it is, the driver uses its argument but with a suffix of _._d,
           otherwise it takes the name of the input file, removes any
           directory components and suffix, and applies a _._d suffix.

           If --MMDD is used in conjunction with --EE, any --oo switch is understood
           to specify the dependency output file, but if used without --EE, each
           --oo is understood to specify a target object file.

           Since --EE is not implied, --MMDD can be used to generate a dependency
           output file as a side effect of the compilation process.

       --MMMMDD
           Like --MMDD except mention only user header files, not system header
           files.

       --ffpprreepprroocceesssseedd
           Indicate to the preprocessor that the input file has already been
           preprocessed.  This suppresses things like macro expansion,
           trigraph conversion, escaped newline splicing, and processing of
           most directives.  The preprocessor still recognizes and removes
           comments, so that you can pass a file preprocessed with --CC to the
           compiler without problems.  In this mode the integrated
           preprocessor is little more than a tokenizer for the front ends.

           --ffpprreepprroocceesssseedd is implicit if the input file has one of the
           extensions ..ii, ..iiii or ..mmii.  These are the extensions that GCC uses
           for preprocessed files created by --ssaavvee--tteemmppss.

       --ffddiirreeccttiivveess--oonnllyy
           When preprocessing, handle directives, but do not expand macros.

           The option's behavior depends on the --EE and --ffpprreepprroocceesssseedd options.

           With --EE, preprocessing is limited to the handling of directives
           such as "#define", "#ifdef", and "#error".  Other preprocessor
           operations, such as macro expansion and trigraph conversion are not
           performed.  In addition, the --ddDD option is implicitly enabled.

           With --ffpprreepprroocceesssseedd, predefinition of command line and most builtin
           macros is disabled.  Macros such as "__LINE__", which are
           contextually dependent, are handled normally.  This enables
           compilation of files previously preprocessed with "-E
           -fdirectives-only".

           With both --EE and --ffpprreepprroocceesssseedd, the rules for --ffpprreepprroocceesssseedd take
           precedence.  This enables full preprocessing of files previously
           preprocessed with "-E -fdirectives-only".

       --ffddoollllaarrss--iinn--iiddeennttiiffiieerrss
           Accept $$ in identifiers.

       --ffeexxtteennddeedd--iiddeennttiiffiieerrss
           Accept universal character names in identifiers.  This option is
           enabled by default for C99 (and later C standard versions) and C++.

       --ffnnoo--ccaannoonniiccaall--ssyysstteemm--hheeaaddeerrss
           When preprocessing, do not shorten system header paths with
           canonicalization.

       --ffttaabbssttoopp==_w_i_d_t_h
           Set the distance between tab stops.  This helps the preprocessor
           report correct column numbers in warnings or errors, even if tabs
           appear on the line.  If the value is less than 1 or greater than
           100, the option is ignored.  The default is 8.

       --ffttrraacckk--mmaaccrroo--eexxppaannssiioonn[==_l_e_v_e_l]
           Track locations of tokens across macro expansions. This allows the
           compiler to emit diagnostic about the current macro expansion stack
           when a compilation error occurs in a macro expansion. Using this
           option makes the preprocessor and the compiler consume more memory.
           The _l_e_v_e_l parameter can be used to choose the level of precision of
           token location tracking thus decreasing the memory consumption if
           necessary. Value 00 of _l_e_v_e_l de-activates this option. Value 11
           tracks tokens locations in a degraded mode for the sake of minimal
           memory overhead. In this mode all tokens resulting from the
           expansion of an argument of a function-like macro have the same
           location. Value 22 tracks tokens locations completely. This value is
           the most memory hungry.  When this option is given no argument, the
           default parameter value is 22.

           Note that "-ftrack-macro-expansion=2" is activated by default.

       --ffmmaaccrroo--pprreeffiixx--mmaapp==_o_l_d==_n_e_w
           When preprocessing files residing in directory _o_l_d, expand the
           "__FILE__" and "__BASE_FILE__" macros as if the files resided in
           directory _n_e_w instead.  This can be used to change an absolute path
           to a relative path by using _. for _n_e_w which can result in more
           reproducible builds that are location independent.  This option
           also affects "__builtin_FILE()" during compilation.  See also
           --ffffiillee--pprreeffiixx--mmaapp.

       --ffeexxeecc--cchhaarrsseett==_c_h_a_r_s_e_t
           Set the execution character set, used for string and character
           constants.  The default is UTF-8.  _c_h_a_r_s_e_t can be any encoding
           supported by the system's "iconv" library routine.

       --ffwwiiddee--eexxeecc--cchhaarrsseett==_c_h_a_r_s_e_t
           Set the wide execution character set, used for wide string and
           character constants.  The default is UTF-32 or UTF-16, whichever
           corresponds to the width of "wchar_t".  As with --ffeexxeecc--cchhaarrsseett,
           _c_h_a_r_s_e_t can be any encoding supported by the system's "iconv"
           library routine; however, you will have problems with encodings
           that do not fit exactly in "wchar_t".

       --ffiinnppuutt--cchhaarrsseett==_c_h_a_r_s_e_t
           Set the input character set, used for translation from the
           character set of the input file to the source character set used by
           GCC.  If the locale does not specify, or GCC cannot get this
           information from the locale, the default is UTF-8.  This can be
           overridden by either the locale or this command-line option.
           Currently the command-line option takes precedence if there's a
           conflict.  _c_h_a_r_s_e_t can be any encoding supported by the system's
           "iconv" library routine.

       --ffppcchh--ddeeppss
           When using precompiled headers, this flag causes the dependency-
           output flags to also list the files from the precompiled header's
           dependencies.  If not specified, only the precompiled header are
           listed and not the files that were used to create it, because those
           files are not consulted when a precompiled header is used.

       --ffppcchh--pprreepprroocceessss
           This option allows use of a precompiled header together with --EE.
           It inserts a special "#pragma", "#pragma GCC pch_preprocess
           "_f_i_l_e_n_a_m_e_"_" in the output to mark the place where the precompiled
           header was found, and its _f_i_l_e_n_a_m_e.  When --ffpprreepprroocceesssseedd is in use,
           GCC recognizes this "#pragma" and loads the PCH.

           This option is off by default, because the resulting preprocessed
           output is only really suitable as input to GCC.  It is switched on
           by --ssaavvee--tteemmppss.

           You should not write this "#pragma" in your own code, but it is
           safe to edit the filename if the PCH file is available in a
           different location.  The filename may be absolute or it may be
           relative to GCC's current directory.

       --ffwwoorrkkiinngg--ddiirreeccttoorryy
           Enable generation of linemarkers in the preprocessor output that
           let the compiler know the current working directory at the time of
           preprocessing.  When this option is enabled, the preprocessor
           emits, after the initial linemarker, a second linemarker with the
           current working directory followed by two slashes.  GCC uses this
           directory, when it's present in the preprocessed input, as the
           directory emitted as the current working directory in some
           debugging information formats.  This option is implicitly enabled
           if debugging information is enabled, but this can be inhibited with
           the negated form --ffnnoo--wwoorrkkiinngg--ddiirreeccttoorryy.  If the --PP flag is present
           in the command line, this option has no effect, since no "#line"
           directives are emitted whatsoever.

       --AA _p_r_e_d_i_c_a_t_e==_a_n_s_w_e_r
           Make an assertion with the predicate _p_r_e_d_i_c_a_t_e and answer _a_n_s_w_e_r.
           This form is preferred to the older form --AA _p_r_e_d_i_c_a_t_e((_a_n_s_w_e_r)),
           which is still supported, because it does not use shell special
           characters.

       --AA --_p_r_e_d_i_c_a_t_e==_a_n_s_w_e_r
           Cancel an assertion with the predicate _p_r_e_d_i_c_a_t_e and answer _a_n_s_w_e_r.

       --CC  Do not discard comments.  All comments are passed through to the
           output file, except for comments in processed directives, which are
           deleted along with the directive.

           You should be prepared for side effects when using --CC; it causes
           the preprocessor to treat comments as tokens in their own right.
           For example, comments appearing at the start of what would be a
           directive line have the effect of turning that line into an
           ordinary source line, since the first token on the line is no
           longer a ##.

       --CCCC Do not discard comments, including during macro expansion.  This is
           like --CC, except that comments contained within macros are also
           passed through to the output file where the macro is expanded.

           In addition to the side effects of the --CC option, the --CCCC option
           causes all C++-style comments inside a macro to be converted to
           C-style comments.  This is to prevent later use of that macro from
           inadvertently commenting out the remainder of the source line.

           The --CCCC option is generally used to support lint comments.

       --PP  Inhibit generation of linemarkers in the output from the
           preprocessor.  This might be useful when running the preprocessor
           on something that is not C code, and will be sent to a program
           which might be confused by the linemarkers.

       --ttrraaddiittiioonnaall
       --ttrraaddiittiioonnaall--ccpppp
           Try to imitate the behavior of pre-standard C preprocessors, as
           opposed to ISO C preprocessors.  See the GNU CPP manual for
           details.

           Note that GCC does not otherwise attempt to emulate a pre-standard
           C compiler, and these options are only supported with the --EE
           switch, or when invoking CPP explicitly.

       --ttrriiggrraapphhss
           Support ISO C trigraphs.  These are three-character sequences, all
           starting with ????, that are defined by ISO C to stand for single
           characters.  For example, ????// stands for \\, so ''????//nn'' is a
           character constant for a newline.

           The nine trigraphs and their replacements are

                   Trigraph:       ??(  ??)  ??<  ??>  ??=  ??/  ??'  ??!  ??-
                   Replacement:      [    ]    {    }    #    \    ^    |    ~

           By default, GCC ignores trigraphs, but in standard-conforming modes
           it converts them.  See the --ssttdd and --aannssii options.

       --rreemmaapp
           Enable special code to work around file systems which only permit
           very short file names, such as MS-DOS.

       --HH  Print the name of each header file used, in addition to other
           normal activities.  Each name is indented to show how deep in the
           ##iinncclluuddee stack it is.  Precompiled header files are also printed,
           even if they are found to be invalid; an invalid precompiled header
           file is printed with ......xx and a valid one with ......!! .

       --dd_l_e_t_t_e_r_s
           Says to make debugging dumps during compilation as specified by
           _l_e_t_t_e_r_s.  The flags documented here are those relevant to the
           preprocessor.  Other _l_e_t_t_e_r_s are interpreted by the compiler
           proper, or reserved for future versions of GCC, and so are silently
           ignored.  If you specify _l_e_t_t_e_r_s whose behavior conflicts, the
           result is undefined.

           --ddMM Instead of the normal output, generate a list of ##ddeeffiinnee
               directives for all the macros defined during the execution of
               the preprocessor, including predefined macros.  This gives you
               a way of finding out what is predefined in your version of the
               preprocessor.  Assuming you have no file _f_o_o_._h, the command

                       touch foo.h; cpp -dM foo.h

               shows all the predefined macros.

               If you use --ddMM without the --EE option, --ddMM is interpreted as a
               synonym for --ffdduummpp--rrttll--mmaacchh.

           --ddDD Like --ddMM except in two respects: it does _n_o_t include the
               predefined macros, and it outputs _b_o_t_h the ##ddeeffiinnee directives
               and the result of preprocessing.  Both kinds of output go to
               the standard output file.

           --ddNN Like --ddDD, but emit only the macro names, not their expansions.

           --ddII Output ##iinncclluuddee directives in addition to the result of
               preprocessing.

           --ddUU Like --ddDD except that only macros that are expanded, or whose
               definedness is tested in preprocessor directives, are output;
               the output is delayed until the use or test of the macro; and
               ##uunnddeeff directives are also output for macros tested but
               undefined at the time.

       --ffddeebbuugg--ccpppp
           This option is only useful for debugging GCC.  When used from CPP
           or with --EE, it dumps debugging information about location maps.
           Every token in the output is preceded by the dump of the map its
           location belongs to.

           When used from GCC without --EE, this option has no effect.

       --WWpp,,_o_p_t_i_o_n
           You can use --WWpp,,_o_p_t_i_o_n to bypass the compiler driver and pass
           _o_p_t_i_o_n directly through to the preprocessor.  If _o_p_t_i_o_n contains
           commas, it is split into multiple options at the commas.  However,
           many options are modified, translated or interpreted by the
           compiler driver before being passed to the preprocessor, and --WWpp
           forcibly bypasses this phase.  The preprocessor's direct interface
           is undocumented and subject to change, so whenever possible you
           should avoid using --WWpp and let the driver handle the options
           instead.

       --XXpprreepprroocceessssoorr _o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the preprocessor.  You can use this to
           supply system-specific preprocessor options that GCC does not
           recognize.

           If you want to pass an option that takes an argument, you must use
           --XXpprreepprroocceessssoorr twice, once for the option and once for the
           argument.

       --nnoo--iinntteeggrraatteedd--ccpppp
           Perform preprocessing as a separate pass before compilation.  By
           default, GCC performs preprocessing as an integrated part of input
           tokenization and parsing.  If this option is provided, the
           appropriate language front end (cccc11, cccc11pplluuss, or cccc11oobbjj for C, C++,
           and Objective-C, respectively) is instead invoked twice, once for
           preprocessing only and once for actual compilation of the
           preprocessed input.  This option may be useful in conjunction with
           the --BB or --wwrraappppeerr options to specify an alternate preprocessor or
           perform additional processing of the program source between normal
           preprocessing and compilation.

   PPaassssiinngg OOppttiioonnss ttoo tthhee AAsssseemmbblleerr
       You can pass options to the assembler.

       --WWaa,,_o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the assembler.  If _o_p_t_i_o_n contains
           commas, it is split into multiple options at the commas.

       --XXaasssseemmbblleerr _o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the assembler.  You can use this to
           supply system-specific assembler options that GCC does not
           recognize.

           If you want to pass an option that takes an argument, you must use
           --XXaasssseemmbblleerr twice, once for the option and once for the argument.

   OOppttiioonnss ffoorr LLiinnkkiinngg
       These options come into play when the compiler links object files into
       an executable output file.  They are meaningless if the compiler is not
       doing a link step.

       _o_b_j_e_c_t_-_f_i_l_e_-_n_a_m_e
           A file name that does not end in a special recognized suffix is
           considered to name an object file or library.  (Object files are
           distinguished from libraries by the linker according to the file
           contents.)  If linking is done, these object files are used as
           input to the linker.

       --cc
       --SS
       --EE  If any of these options is used, then the linker is not run, and
           object file names should not be used as arguments.

       --ffuussee--lldd==bbffdd
           Use the bbffdd linker instead of the default linker.

       --ffuussee--lldd==ggoolldd
           Use the ggoolldd linker instead of the default linker.

       --ffuussee--lldd==lllldd
           Use the LLVM lllldd linker instead of the default linker.

       --ll_l_i_b_r_a_r_y
       --ll _l_i_b_r_a_r_y
           Search the library named _l_i_b_r_a_r_y when linking.  (The second
           alternative with the library as a separate argument is only for
           POSIX compliance and is not recommended.)

           It makes a difference where in the command you write this option;
           the linker searches and processes libraries and object files in the
           order they are specified.  Thus, ffoooo..oo --llzz bbaarr..oo searches library zz
           after file _f_o_o_._o but before _b_a_r_._o.  If _b_a_r_._o refers to functions in
           zz, those functions may not be loaded.

           The linker searches a standard list of directories for the library,
           which is actually a file named _l_i_b_l_i_b_r_a_r_y_._a.  The linker then uses
           this file as if it had been specified precisely by name.

           The directories searched include several standard system
           directories plus any that you specify with --LL.

           Normally the files found this way are library files---archive files
           whose members are object files.  The linker handles an archive file
           by scanning through it for members which define symbols that have
           so far been referenced but not defined.  But if the file that is
           found is an ordinary object file, it is linked in the usual
           fashion.  The only difference between using an --ll option and
           specifying a file name is that --ll surrounds _l_i_b_r_a_r_y with lliibb and ..aa
           and searches several directories.

       --lloobbjjcc
           You need this special case of the --ll option in order to link an
           Objective-C or Objective-C++ program.

       --nnoossttaarrttffiilleess
           Do not use the standard system startup files when linking.  The
           standard system libraries are used normally, unless --nnoossttddlliibb or
           --nnooddeeffaauullttlliibbss is used.

       --nnooddeeffaauullttlliibbss
           Do not use the standard system libraries when linking.  Only the
           libraries you specify are passed to the linker, and options
           specifying linkage of the system libraries, such as --ssttaattiicc--lliibbggcccc
           or --sshhaarreedd--lliibbggcccc, are ignored.  The standard startup files are
           used normally, unless --nnoossttaarrttffiilleess is used.

           The compiler may generate calls to "memcmp", "memset", "memcpy" and
           "memmove".  These entries are usually resolved by entries in libc.
           These entry points should be supplied through some other mechanism
           when this option is specified.

       --nnoossttddlliibb
           Do not use the standard system startup files or libraries when
           linking.  No startup files and only the libraries you specify are
           passed to the linker, and options specifying linkage of the system
           libraries, such as --ssttaattiicc--lliibbggcccc or --sshhaarreedd--lliibbggcccc, are ignored.

           The compiler may generate calls to "memcmp", "memset", "memcpy" and
           "memmove".  These entries are usually resolved by entries in libc.
           These entry points should be supplied through some other mechanism
           when this option is specified.

           One of the standard libraries bypassed by --nnoossttddlliibb and
           --nnooddeeffaauullttlliibbss is _l_i_b_g_c_c_._a, a library of internal subroutines which
           GCC uses to overcome shortcomings of particular machines, or
           special needs for some languages.

           In most cases, you need _l_i_b_g_c_c_._a even when you want to avoid other
           standard libraries.  In other words, when you specify --nnoossttddlliibb or
           --nnooddeeffaauullttlliibbss you should usually specify --llggcccc as well.  This
           ensures that you have no unresolved references to internal GCC
           library subroutines.  (An example of such an internal subroutine is
           "__main", used to ensure C++ constructors are called.)

       --ppiiee
           Produce a dynamically linked position independent executable on
           targets that support it.  For predictable results, you must also
           specify the same set of options used for compilation (--ffppiiee, --ffPPIIEE,
           or model suboptions) when you specify this linker option.

       --nnoo--ppiiee
           Don't produce a dynamically linked position independent executable.

       --ssttaattiicc--ppiiee
           Produce a static position independent executable on targets that
           support it.  A static position independent executable is similar to
           a static executable, but can be loaded at any address without a
           dynamic linker.  For predictable results, you must also specify the
           same set of options used for compilation (--ffppiiee, --ffPPIIEE, or model
           suboptions) when you specify this linker option.

       --pptthhrreeaadd
           Link with the POSIX threads library.  This option is supported on
           GNU/Linux targets, most other Unix derivatives, and also on x86
           Cygwin and MinGW targets.  On some targets this option also sets
           flags for the preprocessor, so it should be used consistently for
           both compilation and linking.

       --rrddyynnaammiicc
           Pass the flag --eexxppoorrtt--ddyynnaammiicc to the ELF linker, on targets that
           support it. This instructs the linker to add all symbols, not only
           used ones, to the dynamic symbol table. This option is needed for
           some uses of "dlopen" or to allow obtaining backtraces from within
           a program.

       --ss  Remove all symbol table and relocation information from the
           executable.

       --ssttaattiicc
           On systems that support dynamic linking, this overrides --ppiiee and
           prevents linking with the shared libraries.  On other systems, this
           option has no effect.

       --sshhaarreedd
           Produce a shared object which can then be linked with other objects
           to form an executable.  Not all systems support this option.  For
           predictable results, you must also specify the same set of options
           used for compilation (--ffppiicc, --ffPPIICC, or model suboptions) when you
           specify this linker option.[1]

       --sshhaarreedd--lliibbggcccc
       --ssttaattiicc--lliibbggcccc
           On systems that provide _l_i_b_g_c_c as a shared library, these options
           force the use of either the shared or static version, respectively.
           If no shared version of _l_i_b_g_c_c was built when the compiler was
           configured, these options have no effect.

           There are several situations in which an application should use the
           shared _l_i_b_g_c_c instead of the static version.  The most common of
           these is when the application wishes to throw and catch exceptions
           across different shared libraries.  In that case, each of the
           libraries as well as the application itself should use the shared
           _l_i_b_g_c_c.

           Therefore, the G++ driver automatically adds --sshhaarreedd--lliibbggcccc
           whenever you build a shared library or a main executable, because
           C++ programs typically use exceptions, so this is the right thing
           to do.

           If, instead, you use the GCC driver to create shared libraries, you
           may find that they are not always linked with the shared _l_i_b_g_c_c.
           If GCC finds, at its configuration time, that you have a non-GNU
           linker or a GNU linker that does not support option ----eehh--ffrraammee--hhddrr,
           it links the shared version of _l_i_b_g_c_c into shared libraries by
           default.  Otherwise, it takes advantage of the linker and optimizes
           away the linking with the shared version of _l_i_b_g_c_c, linking with
           the static version of libgcc by default.  This allows exceptions to
           propagate through such shared libraries, without incurring
           relocation costs at library load time.

           However, if a library or main executable is supposed to throw or
           catch exceptions, you must link it using the G++ driver, or using
           the option --sshhaarreedd--lliibbggcccc, such that it is linked with the shared
           _l_i_b_g_c_c.

       --ssttaattiicc--lliibbaassaann
           When the --ffssaanniittiizzee==aaddddrreessss option is used to link a program, the
           GCC driver automatically links against lliibbaassaann.  If _l_i_b_a_s_a_n is
           available as a shared library, and the --ssttaattiicc option is not used,
           then this links against the shared version of _l_i_b_a_s_a_n.  The
           --ssttaattiicc--lliibbaassaann option directs the GCC driver to link _l_i_b_a_s_a_n
           statically, without necessarily linking other libraries statically.

       --ssttaattiicc--lliibbttssaann
           When the --ffssaanniittiizzee==tthhrreeaadd option is used to link a program, the
           GCC driver automatically links against lliibbttssaann.  If _l_i_b_t_s_a_n is
           available as a shared library, and the --ssttaattiicc option is not used,
           then this links against the shared version of _l_i_b_t_s_a_n.  The
           --ssttaattiicc--lliibbttssaann option directs the GCC driver to link _l_i_b_t_s_a_n
           statically, without necessarily linking other libraries statically.

       --ssttaattiicc--lliibbllssaann
           When the --ffssaanniittiizzee==lleeaakk option is used to link a program, the GCC
           driver automatically links against lliibbllssaann.  If _l_i_b_l_s_a_n is
           available as a shared library, and the --ssttaattiicc option is not used,
           then this links against the shared version of _l_i_b_l_s_a_n.  The
           --ssttaattiicc--lliibbllssaann option directs the GCC driver to link _l_i_b_l_s_a_n
           statically, without necessarily linking other libraries statically.

       --ssttaattiicc--lliibbuubbssaann
           When the --ffssaanniittiizzee==uunnddeeffiinneedd option is used to link a program, the
           GCC driver automatically links against lliibbuubbssaann.  If _l_i_b_u_b_s_a_n is
           available as a shared library, and the --ssttaattiicc option is not used,
           then this links against the shared version of _l_i_b_u_b_s_a_n.  The
           --ssttaattiicc--lliibbuubbssaann option directs the GCC driver to link _l_i_b_u_b_s_a_n
           statically, without necessarily linking other libraries statically.

       --ssttaattiicc--lliibbmmppxx
           When the --ffcchheecckk--ppooiinntteerr bboouunnddss and --mmmmppxx options are used to link
           a program, the GCC driver automatically links against _l_i_b_m_p_x.  If
           _l_i_b_m_p_x is available as a shared library, and the --ssttaattiicc option is
           not used, then this links against the shared version of _l_i_b_m_p_x.
           The --ssttaattiicc--lliibbmmppxx option directs the GCC driver to link _l_i_b_m_p_x
           statically, without necessarily linking other libraries statically.

       --ssttaattiicc--lliibbmmppxxwwrraappppeerrss
           When the --ffcchheecckk--ppooiinntteerr bboouunnddss and --mmmmppxx options are used to link
           a program without also using --ffnnoo--cchhkkpp--uussee--wwrraappppeerrss, the GCC driver
           automatically links against _l_i_b_m_p_x_w_r_a_p_p_e_r_s.  If _l_i_b_m_p_x_w_r_a_p_p_e_r_s is
           available as a shared library, and the --ssttaattiicc option is not used,
           then this links against the shared version of _l_i_b_m_p_x_w_r_a_p_p_e_r_s.  The
           --ssttaattiicc--lliibbmmppxxwwrraappppeerrss option directs the GCC driver to link
           _l_i_b_m_p_x_w_r_a_p_p_e_r_s statically, without necessarily linking other
           libraries statically.

       --ssttaattiicc--lliibbssttddcc++++
           When the gg++++ program is used to link a C++ program, it normally
           automatically links against lliibbssttddcc++++.  If _l_i_b_s_t_d_c_+_+ is available
           as a shared library, and the --ssttaattiicc option is not used, then this
           links against the shared version of _l_i_b_s_t_d_c_+_+.  That is normally
           fine.  However, it is sometimes useful to freeze the version of
           _l_i_b_s_t_d_c_+_+ used by the program without going all the way to a fully
           static link.  The --ssttaattiicc--lliibbssttddcc++++ option directs the gg++++ driver
           to link _l_i_b_s_t_d_c_+_+ statically, without necessarily linking other
           libraries statically.

       --ssyymmbboolliicc
           Bind references to global symbols when building a shared object.
           Warn about any unresolved references (unless overridden by the link
           editor option --XXlliinnkkeerr --zz --XXlliinnkkeerr ddeeffss).  Only a few systems
           support this option.

       --TT _s_c_r_i_p_t
           Use _s_c_r_i_p_t as the linker script.  This option is supported by most
           systems using the GNU linker.  On some targets, such as bare-board
           targets without an operating system, the --TT option may be required
           when linking to avoid references to undefined symbols.

       --XXlliinnkkeerr _o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the linker.  You can use this to supply
           system-specific linker options that GCC does not recognize.

           If you want to pass an option that takes a separate argument, you
           must use --XXlliinnkkeerr twice, once for the option and once for the
           argument.  For example, to pass --aasssseerrtt ddeeffiinniittiioonnss, you must write
           --XXlliinnkkeerr --aasssseerrtt --XXlliinnkkeerr ddeeffiinniittiioonnss.  It does not work to write
           --XXlliinnkkeerr ""--aasssseerrtt ddeeffiinniittiioonnss"", because this passes the entire
           string as a single argument, which is not what the linker expects.

           When using the GNU linker, it is usually more convenient to pass
           arguments to linker options using the _o_p_t_i_o_n==_v_a_l_u_e syntax than as
           separate arguments.  For example, you can specify --XXlliinnkkeerr
           --MMaapp==oouuttppuutt..mmaapp rather than --XXlliinnkkeerr --MMaapp --XXlliinnkkeerr oouuttppuutt..mmaapp.
           Other linkers may not support this syntax for command-line options.

       --WWll,,_o_p_t_i_o_n
           Pass _o_p_t_i_o_n as an option to the linker.  If _o_p_t_i_o_n contains commas,
           it is split into multiple options at the commas.  You can use this
           syntax to pass an argument to the option.  For example,
           --WWll,,--MMaapp,,oouuttppuutt..mmaapp passes --MMaapp oouuttppuutt..mmaapp to the linker.  When
           using the GNU linker, you can also get the same effect with
           --WWll,,--MMaapp==oouuttppuutt..mmaapp.

           NOTE: In Ubuntu 8.10 and later versions, for LDFLAGS, the option
           --WWll,,--zz,,rreellrroo is used.  To disable, use --WWll,,--zz,,nnoorreellrroo.

       --uu _s_y_m_b_o_l
           Pretend the symbol _s_y_m_b_o_l is undefined, to force linking of library
           modules to define it.  You can use --uu multiple times with different
           symbols to force loading of additional library modules.

       --zz _k_e_y_w_o_r_d
           --zz is passed directly on to the linker along with the keyword
           _k_e_y_w_o_r_d. See the section in the documentation of your linker for
           permitted values and their meanings.

   OOppttiioonnss ffoorr DDiirreeccttoorryy SSeeaarrcchh
       These options specify directories to search for header files, for
       libraries and for parts of the compiler:

       --II _d_i_r
       --iiqquuoottee _d_i_r
       --iissyysstteemm _d_i_r
       --iiddiirraafftteerr _d_i_r
           Add the directory _d_i_r to the list of directories to be searched for
           header files during preprocessing.  If _d_i_r begins with == or
           $SYSROOT, then the == or $SYSROOT is replaced by the sysroot prefix;
           see ----ssyyssrroooott and --iissyyssrroooott.

           Directories specified with --iiqquuoottee apply only to the quote form of
           the directive, "#include "_f_i_l_e_"_".  Directories specified with --II,
           --iissyysstteemm, or --iiddiirraafftteerr apply to lookup for both the
           "#include "_f_i_l_e_"_" and "#include <_f_i_l_e_>_" directives.

           You can specify any number or combination of these options on the
           command line to search for header files in several directories.
           The lookup order is as follows:

           1.  For the quote form of the include directive, the directory of
               the current file is searched first.

           2.  For the quote form of the include directive, the directories
               specified by --iiqquuoottee options are searched in left-to-right
               order, as they appear on the command line.

           3.  Directories specified with --II options are scanned in left-to-
               right order.

           4.  Directories specified with --iissyysstteemm options are scanned in
               left-to-right order.

           5.  Standard system directories are scanned.

           6.  Directories specified with --iiddiirraafftteerr options are scanned in
               left-to-right order.

           You can use --II to override a system header file, substituting your
           own version, since these directories are searched before the
           standard system header file directories.  However, you should not
           use this option to add directories that contain vendor-supplied
           system header files; use --iissyysstteemm for that.

           The --iissyysstteemm and --iiddiirraafftteerr options also mark the directory as a
           system directory, so that it gets the same special treatment that
           is applied to the standard system directories.

           If a standard system include directory, or a directory specified
           with --iissyysstteemm, is also specified with --II, the --II option is ignored.
           The directory is still searched but as a system directory at its
           normal position in the system include chain.  This is to ensure
           that GCC's procedure to fix buggy system headers and the ordering
           for the "#include_next" directive are not inadvertently changed.
           If you really need to change the search order for system
           directories, use the --nnoossttddiinncc and/or --iissyysstteemm options.

       --II-- Split the include path.  This option has been deprecated.  Please
           use --iiqquuoottee instead for --II directories before the --II-- and remove
           the --II-- option.

           Any directories specified with --II options before --II-- are searched
           only for headers requested with "#include "_f_i_l_e_"_"; they are not
           searched for "#include <_f_i_l_e_>_".  If additional directories are
           specified with --II options after the --II--, those directories are
           searched for all ##iinncclluuddee directives.

           In addition, --II-- inhibits the use of the directory of the current
           file directory as the first search directory for "#include "_f_i_l_e_"_".
           There is no way to override this effect of --II--.

       --iipprreeffiixx _p_r_e_f_i_x
           Specify _p_r_e_f_i_x as the prefix for subsequent --iiwwiitthhpprreeffiixx options.
           If the prefix represents a directory, you should include the final
           //.

       --iiwwiitthhpprreeffiixx _d_i_r
       --iiwwiitthhpprreeffiixxbbeeffoorree _d_i_r
           Append _d_i_r to the prefix specified previously with --iipprreeffiixx, and
           add the resulting directory to the include search path.
           --iiwwiitthhpprreeffiixxbbeeffoorree puts it in the same place --II would; --iiwwiitthhpprreeffiixx
           puts it where --iiddiirraafftteerr would.

       --iissyyssrroooott _d_i_r
           This option is like the ----ssyyssrroooott option, but applies only to
           header files (except for Darwin targets, where it applies to both
           header files and libraries).  See the ----ssyyssrroooott option for more
           information.

       --iimmuullttiilliibb _d_i_r
           Use _d_i_r as a subdirectory of the directory containing target-
           specific C++ headers.

       --nnoossttddiinncc
           Do not search the standard system directories for header files.
           Only the directories explicitly specified with --II, --iiqquuoottee,
           --iissyysstteemm, and/or --iiddiirraafftteerr options (and the directory of the
           current file, if appropriate) are searched.

       --nnoossttddiinncc++++
           Do not search for header files in the C++-specific standard
           directories, but do still search the other standard directories.
           (This option is used when building the C++ library.)

       --iipplluuggiinnddiirr==_d_i_r
           Set the directory to search for plugins that are passed by
           --ffpplluuggiinn==_n_a_m_e instead of --ffpplluuggiinn==_p_a_t_h//_n_a_m_e..ssoo.  This option is not
           meant to be used by the user, but only passed by the driver.

       --LL_d_i_r
           Add directory _d_i_r to the list of directories to be searched for --ll.

       --BB_p_r_e_f_i_x
           This option specifies where to find the executables, libraries,
           include files, and data files of the compiler itself.

           The compiler driver program runs one or more of the subprograms
           ccpppp, cccc11, aass and lldd.  It tries _p_r_e_f_i_x as a prefix for each program
           it tries to run, both with and without _m_a_c_h_i_n_e//_v_e_r_s_i_o_n// for the
           corresponding target machine and compiler version.

           For each subprogram to be run, the compiler driver first tries the
           --BB prefix, if any.  If that name is not found, or if --BB is not
           specified, the driver tries two standard prefixes, _/_u_s_r_/_l_i_b_/_g_c_c_/
           and _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_g_c_c_/.  If neither of those results in a file
           name that is found, the unmodified program name is searched for
           using the directories specified in your PPAATTHH environment variable.

           The compiler checks to see if the path provided by --BB refers to a
           directory, and if necessary it adds a directory separator character
           at the end of the path.

           --BB prefixes that effectively specify directory names also apply to
           libraries in the linker, because the compiler translates these
           options into --LL options for the linker.  They also apply to include
           files in the preprocessor, because the compiler translates these
           options into --iissyysstteemm options for the preprocessor.  In this case,
           the compiler appends iinncclluuddee to the prefix.

           The runtime support file _l_i_b_g_c_c_._a can also be searched for using
           the --BB prefix, if needed.  If it is not found there, the two
           standard prefixes above are tried, and that is all.  The file is
           left out of the link if it is not found by those means.

           Another way to specify a prefix much like the --BB prefix is to use
           the environment variable GGCCCC__EEXXEECC__PPRREEFFIIXX.

           As a special kludge, if the path provided by --BB is _[_d_i_r_/_]_s_t_a_g_e_N_/,
           where _N is a number in the range 0 to 9, then it is replaced by
           _[_d_i_r_/_]_i_n_c_l_u_d_e.  This is to help with boot-strapping the compiler.

       --nnoo--ccaannoonniiccaall--pprreeffiixxeess
           Do not expand any symbolic links, resolve references to //....// or
           //..//, or make the path absolute when generating a relative prefix.

       ----ssyyssrroooott==_d_i_r
           Use _d_i_r as the logical root directory for headers and libraries.
           For example, if the compiler normally searches for headers in
           _/_u_s_r_/_i_n_c_l_u_d_e and libraries in _/_u_s_r_/_l_i_b, it instead searches
           _d_i_r_/_u_s_r_/_i_n_c_l_u_d_e and _d_i_r_/_u_s_r_/_l_i_b.

           If you use both this option and the --iissyyssrroooott option, then the
           ----ssyyssrroooott option applies to libraries, but the --iissyyssrroooott option
           applies to header files.

           The GNU linker (beginning with version 2.16) has the necessary
           support for this option.  If your linker does not support this
           option, the header file aspect of ----ssyyssrroooott still works, but the
           library aspect does not.

       ----nnoo--ssyyssrroooott--ssuuffffiixx
           For some targets, a suffix is added to the root directory specified
           with ----ssyyssrroooott, depending on the other options used, so that
           headers may for example be found in _d_i_r_/_s_u_f_f_i_x_/_u_s_r_/_i_n_c_l_u_d_e instead
           of _d_i_r_/_u_s_r_/_i_n_c_l_u_d_e.  This option disables the addition of such a
           suffix.

   OOppttiioonnss ffoorr CCooddee GGeenneerraattiioonn CCoonnvveennttiioonnss
       These machine-independent options control the interface conventions
       used in code generation.

       Most of them have both positive and negative forms; the negative form
       of --ffffoooo is --ffnnoo--ffoooo.  In the table below, only one of the forms is
       listed---the one that is not the default.  You can figure out the other
       form by either removing nnoo-- or adding it.

       --ffssttaacckk--rreeuussee==_r_e_u_s_e_-_l_e_v_e_l
           This option controls stack space reuse for user declared local/auto
           variables and compiler generated temporaries.  _r_e_u_s_e___l_e_v_e_l can be
           aallll, nnaammeedd__vvaarrss, or nnoonnee. aallll enables stack reuse for all local
           variables and temporaries, nnaammeedd__vvaarrss enables the reuse only for
           user defined local variables with names, and nnoonnee disables stack
           reuse completely. The default value is aallll. The option is needed
           when the program extends the lifetime of a scoped local variable or
           a compiler generated temporary beyond the end point defined by the
           language.  When a lifetime of a variable ends, and if the variable
           lives in memory, the optimizing compiler has the freedom to reuse
           its stack space with other temporaries or scoped local variables
           whose live range does not overlap with it. Legacy code extending
           local lifetime is likely to break with the stack reuse
           optimization.

           For example,

                      int *p;
                      {
                        int local1;

                        p = &local1;
                        local1 = 10;
                        ....
                      }
                      {
                         int local2;
                         local2 = 20;
                         ...
                      }

                      if (*p == 10)  // out of scope use of local1
                        {

                        }

           Another example:

                      struct A
                      {
                          A(int k) : i(k), j(k) { }
                          int i;
                          int j;
                      };

                      A *ap;

                      void foo(const A& ar)
                      {
                         ap = &ar;
                      }

                      void bar()
                      {
                         foo(A(10)); // temp object's lifetime ends when foo returns

                         {
                           A a(20);
                           ....
                         }
                         ap->i+= 10;  // ap references out of scope temp whose space
                                      // is reused with a. What is the value of ap->i?
                      }

           The lifetime of a compiler generated temporary is well defined by
           the C++ standard. When a lifetime of a temporary ends, and if the
           temporary lives in memory, the optimizing compiler has the freedom
           to reuse its stack space with other temporaries or scoped local
           variables whose live range does not overlap with it. However some
           of the legacy code relies on the behavior of older compilers in
           which temporaries' stack space is not reused, the aggressive stack
           reuse can lead to runtime errors. This option is used to control
           the temporary stack reuse optimization.

       --ffttrraappvv
           This option generates traps for signed overflow on addition,
           subtraction, multiplication operations.  The options --ffttrraappvv and
           --ffwwrraappvv override each other, so using --ffttrraappvv --ffwwrraappvv on the
           command-line results in --ffwwrraappvv being effective.  Note that only
           active options override, so using --ffttrraappvv --ffwwrraappvv --ffnnoo--wwrraappvv on the
           command-line results in --ffttrraappvv being effective.

       --ffwwrraappvv
           This option instructs the compiler to assume that signed arithmetic
           overflow of addition, subtraction and multiplication wraps around
           using twos-complement representation.  This flag enables some
           optimizations and disables others.  The options --ffttrraappvv and --ffwwrraappvv
           override each other, so using --ffttrraappvv --ffwwrraappvv on the command-line
           results in --ffwwrraappvv being effective.  Note that only active options
           override, so using --ffttrraappvv --ffwwrraappvv --ffnnoo--wwrraappvv on the command-line
           results in --ffttrraappvv being effective.

       --ffwwrraappvv--ppooiinntteerr
           This option instructs the compiler to assume that pointer
           arithmetic overflow on addition and subtraction wraps around using
           twos-complement representation.  This flag disables some
           optimizations which assume pointer overflow is invalid.

       --ffssttrriicctt--oovveerrffllooww
           This option implies --ffnnoo--wwrraappvv --ffnnoo--wwrraappvv--ppooiinntteerr and when negated
           implies --ffwwrraappvv --ffwwrraappvv--ppooiinntteerr.

       --ffeexxcceeppttiioonnss
           Enable exception handling.  Generates extra code needed to
           propagate exceptions.  For some targets, this implies GCC generates
           frame unwind information for all functions, which can produce
           significant data size overhead, although it does not affect
           execution.  If you do not specify this option, GCC enables it by
           default for languages like C++ that normally require exception
           handling, and disables it for languages like C that do not normally
           require it.  However, you may need to enable this option when
           compiling C code that needs to interoperate properly with exception
           handlers written in C++.  You may also wish to disable this option
           if you are compiling older C++ programs that don't use exception
           handling.

       --ffnnoonn--ccaallll--eexxcceeppttiioonnss
           Generate code that allows trapping instructions to throw
           exceptions.  Note that this requires platform-specific runtime
           support that does not exist everywhere.  Moreover, it only allows
           _t_r_a_p_p_i_n_g instructions to throw exceptions, i.e. memory references
           or floating-point instructions.  It does not allow exceptions to be
           thrown from arbitrary signal handlers such as "SIGALRM".

       --ffddeelleettee--ddeeaadd--eexxcceeppttiioonnss
           Consider that instructions that may throw exceptions but don't
           otherwise contribute to the execution of the program can be
           optimized away.  This option is enabled by default for the Ada
           front end, as permitted by the Ada language specification.
           Optimization passes that cause dead exceptions to be removed are
           enabled independently at different optimization levels.

       --ffuunnwwiinndd--ttaabblleess
           Similar to --ffeexxcceeppttiioonnss, except that it just generates any needed
           static data, but does not affect the generated code in any other
           way.  You normally do not need to enable this option; instead, a
           language processor that needs this handling enables it on your
           behalf.

       --ffaassyynncchhrroonnoouuss--uunnwwiinndd--ttaabblleess
           Generate unwind table in DWARF format, if supported by target
           machine.  The table is exact at each instruction boundary, so it
           can be used for stack unwinding from asynchronous events (such as
           debugger or garbage collector).

       --ffnnoo--ggnnuu--uunniiqquuee
           On systems with recent GNU assembler and C library, the C++
           compiler uses the "STB_GNU_UNIQUE" binding to make sure that
           definitions of template static data members and static local
           variables in inline functions are unique even in the presence of
           "RTLD_LOCAL"; this is necessary to avoid problems with a library
           used by two different "RTLD_LOCAL" plugins depending on a
           definition in one of them and therefore disagreeing with the other
           one about the binding of the symbol.  But this causes "dlclose" to
           be ignored for affected DSOs; if your program relies on
           reinitialization of a DSO via "dlclose" and "dlopen", you can use
           --ffnnoo--ggnnuu--uunniiqquuee.

       --ffppcccc--ssttrruucctt--rreettuurrnn
           Return "short" "struct" and "union" values in memory like longer
           ones, rather than in registers.  This convention is less efficient,
           but it has the advantage of allowing intercallability between GCC-
           compiled files and files compiled with other compilers,
           particularly the Portable C Compiler (pcc).

           The precise convention for returning structures in memory depends
           on the target configuration macros.

           Short structures and unions are those whose size and alignment
           match that of some integer type.

           WWaarrnniinngg:: code compiled with the --ffppcccc--ssttrruucctt--rreettuurrnn switch is not
           binary compatible with code compiled with the --ffrreegg--ssttrruucctt--rreettuurrnn
           switch.  Use it to conform to a non-default application binary
           interface.

       --ffrreegg--ssttrruucctt--rreettuurrnn
           Return "struct" and "union" values in registers when possible.
           This is more efficient for small structures than
           --ffppcccc--ssttrruucctt--rreettuurrnn.

           If you specify neither --ffppcccc--ssttrruucctt--rreettuurrnn nor --ffrreegg--ssttrruucctt--rreettuurrnn,
           GCC defaults to whichever convention is standard for the target.
           If there is no standard convention, GCC defaults to
           --ffppcccc--ssttrruucctt--rreettuurrnn, except on targets where GCC is the principal
           compiler.  In those cases, we can choose the standard, and we chose
           the more efficient register return alternative.

           WWaarrnniinngg:: code compiled with the --ffrreegg--ssttrruucctt--rreettuurrnn switch is not
           binary compatible with code compiled with the --ffppcccc--ssttrruucctt--rreettuurrnn
           switch.  Use it to conform to a non-default application binary
           interface.

       --ffsshhoorrtt--eennuummss
           Allocate to an "enum" type only as many bytes as it needs for the
           declared range of possible values.  Specifically, the "enum" type
           is equivalent to the smallest integer type that has enough room.

           WWaarrnniinngg:: the --ffsshhoorrtt--eennuummss switch causes GCC to generate code that
           is not binary compatible with code generated without that switch.
           Use it to conform to a non-default application binary interface.

       --ffsshhoorrtt--wwcchhaarr
           Override the underlying type for "wchar_t" to be "short unsigned
           int" instead of the default for the target.  This option is useful
           for building programs to run under WINE.

           WWaarrnniinngg:: the --ffsshhoorrtt--wwcchhaarr switch causes GCC to generate code that
           is not binary compatible with code generated without that switch.
           Use it to conform to a non-default application binary interface.

       --ffnnoo--ccoommmmoonn
           In C code, this option controls the placement of global variables
           defined without an initializer, known as _t_e_n_t_a_t_i_v_e _d_e_f_i_n_i_t_i_o_n_s in
           the C standard.  Tentative definitions are distinct from
           declarations of a variable with the "extern" keyword, which do not
           allocate storage.

           Unix C compilers have traditionally allocated storage for
           uninitialized global variables in a common block.  This allows the
           linker to resolve all tentative definitions of the same variable in
           different compilation units to the same object, or to a non-
           tentative definition.  This is the behavior specified by --ffccoommmmoonn,
           and is the default for GCC on most targets.  On the other hand,
           this behavior is not required by ISO C, and on some targets may
           carry a speed or code size penalty on variable references.

           The --ffnnoo--ccoommmmoonn option specifies that the compiler should instead
           place uninitialized global variables in the data section of the
           object file.  This inhibits the merging of tentative definitions by
           the linker so you get a multiple-definition error if the same
           variable is defined in more than one compilation unit.  Compiling
           with --ffnnoo--ccoommmmoonn is useful on targets for which it provides better
           performance, or if you wish to verify that the program will work on
           other systems that always treat uninitialized variable definitions
           this way.

       --ffnnoo--iiddeenntt
           Ignore the "#ident" directive.

       --ffiinnhhiibbiitt--ssiizzee--ddiirreeccttiivvee
           Don't output a ".size" assembler directive, or anything else that
           would cause trouble if the function is split in the middle, and the
           two halves are placed at locations far apart in memory.  This
           option is used when compiling _c_r_t_s_t_u_f_f_._c; you should not need to
           use it for anything else.

       --ffvveerrbboossee--aassmm
           Put extra commentary information in the generated assembly code to
           make it more readable.  This option is generally only of use to
           those who actually need to read the generated assembly code
           (perhaps while debugging the compiler itself).

           --ffnnoo--vveerrbboossee--aassmm, the default, causes the extra information to be
           omitted and is useful when comparing two assembler files.

           The added comments include:

           *   information on the compiler version and command-line options,

           *   the source code lines associated with the assembly
               instructions, in the form FILENAME:LINENUMBER:CONTENT OF LINE,

           *   hints on which high-level expressions correspond to the various
               assembly instruction operands.

           For example, given this C source file:

                   int test (int n)
                   {
                     int i;
                     int total = 0;

                     for (i = 0; i < n; i++)
                       total += i * i;

                     return total;
                   }

           compiling to (x86_64) assembly via --SS and emitting the result
           direct to stdout via --oo --

                   gcc -S test.c -fverbose-asm -Os -o -

           gives output similar to this:

                           .file   "test.c"
                   # GNU C11 (GCC) version 7.0.0 20160809 (experimental) (x86_64-pc-linux-gnu)
                     [...snip...]
                   # options passed:
                     [...snip...]

                           .text
                           .globl  test
                           .type   test, @function
                   test:
                   .LFB0:
                           .cfi_startproc
                   # test.c:4:   int total = 0;
                           xorl    %eax, %eax      # <retval>
                   # test.c:6:   for (i = 0; i < n; i++)
                           xorl    %edx, %edx      # i
                   .L2:
                   # test.c:6:   for (i = 0; i < n; i++)
                           cmpl    %edi, %edx      # n, i
                           jge     .L5     #,
                   # test.c:7:     total += i * i;
                           movl    %edx, %ecx      # i, tmp92
                           imull   %edx, %ecx      # i, tmp92
                   # test.c:6:   for (i = 0; i < n; i++)
                           incl    %edx    # i
                   # test.c:7:     total += i * i;
                           addl    %ecx, %eax      # tmp92, <retval>
                           jmp     .L2     #
                   .L5:
                   # test.c:10: }
                           ret
                           .cfi_endproc
                   .LFE0:
                           .size   test, .-test
                           .ident  "GCC: (GNU) 7.0.0 20160809 (experimental)"
                           .section        .note.GNU-stack,"",@progbits

           The comments are intended for humans rather than machines and hence
           the precise format of the comments is subject to change.

       --ffrreeccoorrdd--ggcccc--sswwiittcchheess
           This switch causes the command line used to invoke the compiler to
           be recorded into the object file that is being created.  This
           switch is only implemented on some targets and the exact format of
           the recording is target and binary file format dependent, but it
           usually takes the form of a section containing ASCII text.  This
           switch is related to the --ffvveerrbboossee--aassmm switch, but that switch only
           records information in the assembler output file as comments, so it
           never reaches the object file.  See also --ggrreeccoorrdd--ggcccc--sswwiittcchheess for
           another way of storing compiler options into the object file.

       --ffppiicc
           Generate position-independent code (PIC) suitable for use in a
           shared library, if supported for the target machine.  Such code
           accesses all constant addresses through a global offset table
           (GOT).  The dynamic loader resolves the GOT entries when the
           program starts (the dynamic loader is not part of GCC; it is part
           of the operating system).  If the GOT size for the linked
           executable exceeds a machine-specific maximum size, you get an
           error message from the linker indicating that --ffppiicc does not work;
           in that case, recompile with --ffPPIICC instead.  (These maximums are 8k
           on the SPARC, 28k on AArch64 and 32k on the m68k and RS/6000.  The
           x86 has no such limit.)

           Position-independent code requires special support, and therefore
           works only on certain machines.  For the x86, GCC supports PIC for
           System V but not for the Sun 386i.  Code generated for the IBM
           RS/6000 is always position-independent.

           When this flag is set, the macros "__pic__" and "__PIC__" are
           defined to 1.

       --ffPPIICC
           If supported for the target machine, emit position-independent
           code, suitable for dynamic linking and avoiding any limit on the
           size of the global offset table.  This option makes a difference on
           AArch64, m68k, PowerPC and SPARC.

           Position-independent code requires special support, and therefore
           works only on certain machines.

           When this flag is set, the macros "__pic__" and "__PIC__" are
           defined to 2.

       --ffppiiee
       --ffPPIIEE
           These options are similar to --ffppiicc and --ffPPIICC, but generated
           position independent code can be only linked into executables.
           Usually these options are used when --ppiiee GCC option is used during
           linking.

           --ffppiiee and --ffPPIIEE both define the macros "__pie__" and "__PIE__".
           The macros have the value 1 for --ffppiiee and 2 for --ffPPIIEE.

       --ffnnoo--pplltt
           Do not use the PLT for external function calls in position-
           independent code.  Instead, load the callee address at call sites
           from the GOT and branch to it.  This leads to more efficient code
           by eliminating PLT stubs and exposing GOT loads to optimizations.
           On architectures such as 32-bit x86 where PLT stubs expect the GOT
           pointer in a specific register, this gives more register allocation
           freedom to the compiler.  Lazy binding requires use of the PLT;
           with --ffnnoo--pplltt all external symbols are resolved at load time.

           Alternatively, the function attribute "noplt" can be used to avoid
           calls through the PLT for specific external functions.

           In position-dependent code, a few targets also convert calls to
           functions that are marked to not use the PLT to use the GOT
           instead.

       --ffnnoo--jjuummpp--ttaabblleess
           Do not use jump tables for switch statements even where it would be
           more efficient than other code generation strategies.  This option
           is of use in conjunction with --ffppiicc or --ffPPIICC for building code that
           forms part of a dynamic linker and cannot reference the address of
           a jump table.  On some targets, jump tables do not require a GOT
           and this option is not needed.

       --ffffiixxeedd--_r_e_g
           Treat the register named _r_e_g as a fixed register; generated code
           should never refer to it (except perhaps as a stack pointer, frame
           pointer or in some other fixed role).

           _r_e_g must be the name of a register.  The register names accepted
           are machine-specific and are defined in the "REGISTER_NAMES" macro
           in the machine description macro file.

           This flag does not have a negative form, because it specifies a
           three-way choice.

       --ffccaallll--uusseedd--_r_e_g
           Treat the register named _r_e_g as an allocable register that is
           clobbered by function calls.  It may be allocated for temporaries
           or variables that do not live across a call.  Functions compiled
           this way do not save and restore the register _r_e_g.

           It is an error to use this flag with the frame pointer or stack
           pointer.  Use of this flag for other registers that have fixed
           pervasive roles in the machine's execution model produces
           disastrous results.

           This flag does not have a negative form, because it specifies a
           three-way choice.

       --ffccaallll--ssaavveedd--_r_e_g
           Treat the register named _r_e_g as an allocable register saved by
           functions.  It may be allocated even for temporaries or variables
           that live across a call.  Functions compiled this way save and
           restore the register _r_e_g if they use it.

           It is an error to use this flag with the frame pointer or stack
           pointer.  Use of this flag for other registers that have fixed
           pervasive roles in the machine's execution model produces
           disastrous results.

           A different sort of disaster results from the use of this flag for
           a register in which function values may be returned.

           This flag does not have a negative form, because it specifies a
           three-way choice.

       --ffppaacckk--ssttrruucctt[[==_n]]
           Without a value specified, pack all structure members together
           without holes.  When a value is specified (which must be a small
           power of two), pack structure members according to this value,
           representing the maximum alignment (that is, objects with default
           alignment requirements larger than this are output potentially
           unaligned at the next fitting location.

           WWaarrnniinngg:: the --ffppaacckk--ssttrruucctt switch causes GCC to generate code that
           is not binary compatible with code generated without that switch.
           Additionally, it makes the code suboptimal.  Use it to conform to a
           non-default application binary interface.

       --fflleeaaddiinngg--uunnddeerrssccoorree
           This option and its counterpart, --ffnnoo--lleeaaddiinngg--uunnddeerrssccoorree, forcibly
           change the way C symbols are represented in the object file.  One
           use is to help link with legacy assembly code.

           WWaarrnniinngg:: the --fflleeaaddiinngg--uunnddeerrssccoorree switch causes GCC to generate
           code that is not binary compatible with code generated without that
           switch.  Use it to conform to a non-default application binary
           interface.  Not all targets provide complete support for this
           switch.

       --ffttllss--mmooddeell==_m_o_d_e_l
           Alter the thread-local storage model to be used.  The _m_o_d_e_l
           argument should be one of gglloobbaall--ddyynnaammiicc, llooccaall--ddyynnaammiicc, iinniittiiaall--
           eexxeecc or llooccaall--eexxeecc.  Note that the choice is subject to
           optimization: the compiler may use a more efficient model for
           symbols not visible outside of the translation unit, or if --ffppiicc is
           not given on the command line.

           The default without --ffppiicc is iinniittiiaall--eexxeecc; with --ffppiicc the default
           is gglloobbaall--ddyynnaammiicc.

       --ffttrraammppoolliinneess
           For targets that normally need trampolines for nested functions,
           always generate them instead of using descriptors.  Otherwise, for
           targets that do not need them, like for example HP-PA or IA-64, do
           nothing.

           A trampoline is a small piece of code that is created at run time
           on the stack when the address of a nested function is taken, and is
           used to call the nested function indirectly.  Therefore, it
           requires the stack to be made executable in order for the program
           to work properly.

           --ffnnoo--ttrraammppoolliinneess is enabled by default on a language by language
           basis to let the compiler avoid generating them, if it computes
           that this is safe, and replace them with descriptors.  Descriptors
           are made up of data only, but the generated code must be prepared
           to deal with them.  As of this writing, --ffnnoo--ttrraammppoolliinneess is enabled
           by default only for Ada.

           Moreover, code compiled with --ffttrraammppoolliinneess and code compiled with
           --ffnnoo--ttrraammppoolliinneess are not binary compatible if nested functions are
           present.  This option must therefore be used on a program-wide
           basis and be manipulated with extreme care.

       --ffvviissiibbiilliittyy==[ddeeffaauulltt|iinntteerrnnaall|hhiiddddeenn|pprrootteecctteedd]
           Set the default ELF image symbol visibility to the specified
           option---all symbols are marked with this unless overridden within
           the code.  Using this feature can very substantially improve
           linking and load times of shared object libraries, produce more
           optimized code, provide near-perfect API export and prevent symbol
           clashes.  It is ssttrroonnggllyy recommended that you use this in any
           shared objects you distribute.

           Despite the nomenclature, ddeeffaauulltt always means public; i.e.,
           available to be linked against from outside the shared object.
           pprrootteecctteedd and iinntteerrnnaall are pretty useless in real-world usage so
           the only other commonly used option is hhiiddddeenn.  The default if
           --ffvviissiibbiilliittyy isn't specified is ddeeffaauulltt, i.e., make every symbol
           public.

           A good explanation of the benefits offered by ensuring ELF symbols
           have the correct visibility is given by "How To Write Shared
           Libraries" by Ulrich Drepper (which can be found at
           <hhttttppss::////wwwwww..aakkkkaaddiiaa..oorrgg//ddrreeppppeerr//>)---however a superior solution
           made possible by this option to marking things hidden when the
           default is public is to make the default hidden and mark things
           public.  This is the norm with DLLs on Windows and with
           --ffvviissiibbiilliittyy==hhiiddddeenn and "__attribute__ ((visibility("default")))"
           instead of "__declspec(dllexport)" you get almost identical
           semantics with identical syntax.  This is a great boon to those
           working with cross-platform projects.

           For those adding visibility support to existing code, you may find
           "#pragma GCC visibility" of use.  This works by you enclosing the
           declarations you wish to set visibility for with (for example)
           "#pragma GCC visibility push(hidden)" and "#pragma GCC visibility
           pop".  Bear in mind that symbol visibility should be viewed aass ppaarrtt
           ooff tthhee AAPPII iinntteerrffaaccee ccoonnttrraacctt and thus all new code should always
           specify visibility when it is not the default; i.e., declarations
           only for use within the local DSO should aallwwaayyss be marked
           explicitly as hidden as so to avoid PLT indirection
           overheads---making this abundantly clear also aids readability and
           self-documentation of the code.  Note that due to ISO C++
           specification requirements, "operator new" and "operator delete"
           must always be of default visibility.

           Be aware that headers from outside your project, in particular
           system headers and headers from any other library you use, may not
           be expecting to be compiled with visibility other than the default.
           You may need to explicitly say "#pragma GCC visibility
           push(default)" before including any such headers.

           "extern" declarations are not affected by --ffvviissiibbiilliittyy, so a lot of
           code can be recompiled with --ffvviissiibbiilliittyy==hhiiddddeenn with no
           modifications.  However, this means that calls to "extern"
           functions with no explicit visibility use the PLT, so it is more
           effective to use "__attribute ((visibility))" and/or "#pragma GCC
           visibility" to tell the compiler which "extern" declarations should
           be treated as hidden.

           Note that --ffvviissiibbiilliittyy does affect C++ vague linkage entities. This
           means that, for instance, an exception class that is be thrown
           between DSOs must be explicitly marked with default visibility so
           that the ttyyppee__iinnffoo nodes are unified between the DSOs.

           An overview of these techniques, their benefits and how to use them
           is at <hhttttpp::////ggcccc..ggnnuu..oorrgg//wwiikkii//VViissiibbiilliittyy>.

       --ffssttrriicctt--vvoollaattiillee--bbiittffiieellddss
           This option should be used if accesses to volatile bit-fields (or
           other structure fields, although the compiler usually honors those
           types anyway) should use a single access of the width of the
           field's type, aligned to a natural alignment if possible.  For
           example, targets with memory-mapped peripheral registers might
           require all such accesses to be 16 bits wide; with this flag you
           can declare all peripheral bit-fields as "unsigned short" (assuming
           short is 16 bits on these targets) to force GCC to use 16-bit
           accesses instead of, perhaps, a more efficient 32-bit access.

           If this option is disabled, the compiler uses the most efficient
           instruction.  In the previous example, that might be a 32-bit load
           instruction, even though that accesses bytes that do not contain
           any portion of the bit-field, or memory-mapped registers unrelated
           to the one being updated.

           In some cases, such as when the "packed" attribute is applied to a
           structure field, it may not be possible to access the field with a
           single read or write that is correctly aligned for the target
           machine.  In this case GCC falls back to generating multiple
           accesses rather than code that will fault or truncate the result at
           run time.

           Note:  Due to restrictions of the C/C++11 memory model, write
           accesses are not allowed to touch non bit-field members.  It is
           therefore recommended to define all bits of the field's type as
           bit-field members.

           The default value of this option is determined by the application
           binary interface for the target processor.

       --ffssyynncc--lliibbccaallllss
           This option controls whether any out-of-line instance of the
           "__sync" family of functions may be used to implement the C++11
           "__atomic" family of functions.

           The default value of this option is enabled, thus the only useful
           form of the option is --ffnnoo--ssyynncc--lliibbccaallllss.  This option is used in
           the implementation of the _l_i_b_a_t_o_m_i_c runtime library.

   GGCCCC DDeevveellooppeerr OOppttiioonnss
       This section describes command-line options that are primarily of
       interest to GCC developers, including options to support compiler
       testing and investigation of compiler bugs and compile-time performance
       problems.  This includes options that produce debug dumps at various
       points in the compilation; that print statistics such as memory use and
       execution time; and that print information about GCC's configuration,
       such as where it searches for libraries.  You should rarely need to use
       any of these options for ordinary compilation and linking tasks.

       --dd_l_e_t_t_e_r_s
       --ffdduummpp--rrttll--_p_a_s_s
       --ffdduummpp--rrttll--_p_a_s_s==_f_i_l_e_n_a_m_e
           Says to make debugging dumps during compilation at times specified
           by _l_e_t_t_e_r_s.  This is used for debugging the RTL-based passes of the
           compiler.  The file names for most of the dumps are made by
           appending a pass number and a word to the _d_u_m_p_n_a_m_e, and the files
           are created in the directory of the output file.  In case of
           ==_f_i_l_e_n_a_m_e option, the dump is output on the given file instead of
           the pass numbered dump files.  Note that the pass number is
           assigned as passes are registered into the pass manager.  Most
           passes are registered in the order that they will execute and for
           these passes the number corresponds to the pass execution order.
           However, passes registered by plugins, passes specific to
           compilation targets, or passes that are otherwise registered after
           all the other passes are numbered higher than a pass named "final",
           even if they are executed earlier.  _d_u_m_p_n_a_m_e is generated from the
           name of the output file if explicitly specified and not an
           executable, otherwise it is the basename of the source file.

           Some --dd_l_e_t_t_e_r_s switches have different meaning when --EE is used for
           preprocessing.

           Debug dumps can be enabled with a --ffdduummpp--rrttll switch or some --dd
           option _l_e_t_t_e_r_s.  Here are the possible letters for use in _p_a_s_s and
           _l_e_t_t_e_r_s, and their meanings:

           --ffdduummpp--rrttll--aalliiggnnmmeennttss
               Dump after branch alignments have been computed.

           --ffdduummpp--rrttll--aassmmccoonnss
               Dump after fixing rtl statements that have unsatisfied in/out
               constraints.

           --ffdduummpp--rrttll--aauuttoo__iinncc__ddeecc
               Dump after auto-inc-dec discovery.  This pass is only run on
               architectures that have auto inc or auto dec instructions.

           --ffdduummpp--rrttll--bbaarrrriieerrss
               Dump after cleaning up the barrier instructions.

           --ffdduummpp--rrttll--bbbbppaarrtt
               Dump after partitioning hot and cold basic blocks.

           --ffdduummpp--rrttll--bbbbrroo
               Dump after block reordering.

           --ffdduummpp--rrttll--bbttll11
           --ffdduummpp--rrttll--bbttll22
               --ffdduummpp--rrttll--bbttll11 and --ffdduummpp--rrttll--bbttll22 enable dumping after the
               two branch target load optimization passes.

           --ffdduummpp--rrttll--bbyyppaassss
               Dump after jump bypassing and control flow optimizations.

           --ffdduummpp--rrttll--ccoommbbiinnee
               Dump after the RTL instruction combination pass.

           --ffdduummpp--rrttll--ccoommppggoottooss
               Dump after duplicating the computed gotos.

           --ffdduummpp--rrttll--ccee11
           --ffdduummpp--rrttll--ccee22
           --ffdduummpp--rrttll--ccee33
               --ffdduummpp--rrttll--ccee11, --ffdduummpp--rrttll--ccee22, and --ffdduummpp--rrttll--ccee33 enable
               dumping after the three if conversion passes.

           --ffdduummpp--rrttll--ccpprroopp__hhaarrddrreegg
               Dump after hard register copy propagation.

           --ffdduummpp--rrttll--ccssaa
               Dump after combining stack adjustments.

           --ffdduummpp--rrttll--ccssee11
           --ffdduummpp--rrttll--ccssee22
               --ffdduummpp--rrttll--ccssee11 and --ffdduummpp--rrttll--ccssee22 enable dumping after the
               two common subexpression elimination passes.

           --ffdduummpp--rrttll--ddccee
               Dump after the standalone dead code elimination passes.

           --ffdduummpp--rrttll--ddbbrr
               Dump after delayed branch scheduling.

           --ffdduummpp--rrttll--ddccee11
           --ffdduummpp--rrttll--ddccee22
               --ffdduummpp--rrttll--ddccee11 and --ffdduummpp--rrttll--ddccee22 enable dumping after the
               two dead store elimination passes.

           --ffdduummpp--rrttll--eehh
               Dump after finalization of EH handling code.

           --ffdduummpp--rrttll--eehh__rraannggeess
               Dump after conversion of EH handling range regions.

           --ffdduummpp--rrttll--eexxppaanndd
               Dump after RTL generation.

           --ffdduummpp--rrttll--ffwwpprroopp11
           --ffdduummpp--rrttll--ffwwpprroopp22
               --ffdduummpp--rrttll--ffwwpprroopp11 and --ffdduummpp--rrttll--ffwwpprroopp22 enable dumping after
               the two forward propagation passes.

           --ffdduummpp--rrttll--ggccssee11
           --ffdduummpp--rrttll--ggccssee22
               --ffdduummpp--rrttll--ggccssee11 and --ffdduummpp--rrttll--ggccssee22 enable dumping after
               global common subexpression elimination.

           --ffdduummpp--rrttll--iinniitt--rreeggss
               Dump after the initialization of the registers.

           --ffdduummpp--rrttll--iinniittvvaallss
               Dump after the computation of the initial value sets.

           --ffdduummpp--rrttll--iinnttoo__ccffggllaayyoouutt
               Dump after converting to cfglayout mode.

           --ffdduummpp--rrttll--iirraa
               Dump after iterated register allocation.

           --ffdduummpp--rrttll--jjuummpp
               Dump after the second jump optimization.

           --ffdduummpp--rrttll--lloooopp22
               --ffdduummpp--rrttll--lloooopp22 enables dumping after the rtl loop
               optimization passes.

           --ffdduummpp--rrttll--mmaacchh
               Dump after performing the machine dependent reorganization
               pass, if that pass exists.

           --ffdduummpp--rrttll--mmooddee__ssww
               Dump after removing redundant mode switches.

           --ffdduummpp--rrttll--rrnnrreegg
               Dump after register renumbering.

           --ffdduummpp--rrttll--oouuttooff__ccffggllaayyoouutt
               Dump after converting from cfglayout mode.

           --ffdduummpp--rrttll--ppeeeepphhoollee22
               Dump after the peephole pass.

           --ffdduummpp--rrttll--ppoossttrreellooaadd
               Dump after post-reload optimizations.

           --ffdduummpp--rrttll--pprroo__aanndd__eeppiilloogguuee
               Dump after generating the function prologues and epilogues.

           --ffdduummpp--rrttll--sscchheedd11
           --ffdduummpp--rrttll--sscchheedd22
               --ffdduummpp--rrttll--sscchheedd11 and --ffdduummpp--rrttll--sscchheedd22 enable dumping after
               the basic block scheduling passes.

           --ffdduummpp--rrttll--rreeee
               Dump after sign/zero extension elimination.

           --ffdduummpp--rrttll--sseeqqaabbssttrr
               Dump after common sequence discovery.

           --ffdduummpp--rrttll--sshhoorrtteenn
               Dump after shortening branches.

           --ffdduummpp--rrttll--ssiibblliinngg
               Dump after sibling call optimizations.

           --ffdduummpp--rrttll--sspplliitt11
           --ffdduummpp--rrttll--sspplliitt22
           --ffdduummpp--rrttll--sspplliitt33
           --ffdduummpp--rrttll--sspplliitt44
           --ffdduummpp--rrttll--sspplliitt55
               These options enable dumping after five rounds of instruction
               splitting.

           --ffdduummpp--rrttll--ssmmss
               Dump after modulo scheduling.  This pass is only run on some
               architectures.

           --ffdduummpp--rrttll--ssttaacckk
               Dump after conversion from GCC's "flat register file" registers
               to the x87's stack-like registers.  This pass is only run on
               x86 variants.

           --ffdduummpp--rrttll--ssuubbrreegg11
           --ffdduummpp--rrttll--ssuubbrreegg22
               --ffdduummpp--rrttll--ssuubbrreegg11 and --ffdduummpp--rrttll--ssuubbrreegg22 enable dumping after
               the two subreg expansion passes.

           --ffdduummpp--rrttll--uunnsshhaarree
               Dump after all rtl has been unshared.

           --ffdduummpp--rrttll--vvaarrttrraacckk
               Dump after variable tracking.

           --ffdduummpp--rrttll--vvrreeggss
               Dump after converting virtual registers to hard registers.

           --ffdduummpp--rrttll--wweebb
               Dump after live range splitting.

           --ffdduummpp--rrttll--rreeggccllaassss
           --ffdduummpp--rrttll--ssuubbrreeggss__ooff__mmooddee__iinniitt
           --ffdduummpp--rrttll--ssuubbrreeggss__ooff__mmooddee__ffiinniisshh
           --ffdduummpp--rrttll--ddffiinniitt
           --ffdduummpp--rrttll--ddffiinniisshh
               These dumps are defined but always produce empty files.

           --ddaa
           --ffdduummpp--rrttll--aallll
               Produce all the dumps listed above.

           --ddAA Annotate the assembler output with miscellaneous debugging
               information.

           --ddDD Dump all macro definitions, at the end of preprocessing, in
               addition to normal output.

           --ddHH Produce a core dump whenever an error occurs.

           --ddpp Annotate the assembler output with a comment indicating which
               pattern and alternative is used.  The length and cost of each
               instruction are also printed.

           --ddPP Dump the RTL in the assembler output as a comment before each
               instruction.  Also turns on --ddpp annotation.

           --ddxx Just generate RTL for a function instead of compiling it.
               Usually used with --ffdduummpp--rrttll--eexxppaanndd.

       --ffdduummpp--nnooaaddddrr
           When doing debugging dumps, suppress address output.  This makes it
           more feasible to use diff on debugging dumps for compiler
           invocations with different compiler binaries and/or different text
           / bss / data / heap / stack / dso start locations.

       --ffrreeppoorrtt--bbuugg
           Collect and dump debug information into a temporary file if an
           internal compiler error (ICE) occurs.

       --ffdduummpp--uunnnnuummbbeerreedd
           When doing debugging dumps, suppress instruction numbers and
           address output.  This makes it more feasible to use diff on
           debugging dumps for compiler invocations with different options, in
           particular with and without --gg.

       --ffdduummpp--uunnnnuummbbeerreedd--lliinnkkss
           When doing debugging dumps (see --dd option above), suppress
           instruction numbers for the links to the previous and next
           instructions in a sequence.

       --ffdduummpp--iippaa--_s_w_i_t_c_h
           Control the dumping at various stages of inter-procedural analysis
           language tree to a file.  The file name is generated by appending a
           switch specific suffix to the source file name, and the file is
           created in the same directory as the output file.  The following
           dumps are possible:

           aallll Enables all inter-procedural analysis dumps.

           ccggrraapphh
               Dumps information about call-graph optimization, unused
               function removal, and inlining decisions.

           iinnlliinnee
               Dump after function inlining.

       --ffdduummpp--llaanngg--aallll
       --ffdduummpp--llaanngg--_s_w_i_t_c_h
       --ffdduummpp--llaanngg--_s_w_i_t_c_h--_o_p_t_i_o_n_s
       --ffdduummpp--llaanngg--_s_w_i_t_c_h--_o_p_t_i_o_n_s==_f_i_l_e_n_a_m_e
           Control the dumping of language-specific information.  The _o_p_t_i_o_n_s
           and _f_i_l_e_n_a_m_e portions behave as described in the --ffdduummpp--ttrreeee
           option.  The following _s_w_i_t_c_h values are accepted:

           aallll Enable all language-specific dumps.

           ccllaassss
               Dump class hierarchy information.  Virtual table information is
               emitted unless 'sslliimm' is specified.  This option is applicable
               to C++ only.

           rraaww Dump the raw internal tree data.  This option is applicable to
               C++ only.

       --ffdduummpp--ppaasssseess
           Print on _s_t_d_e_r_r the list of optimization passes that are turned on
           and off by the current command-line options.

       --ffdduummpp--ssttaattiissttiiccss--_o_p_t_i_o_n
           Enable and control dumping of pass statistics in a separate file.
           The file name is generated by appending a suffix ending in
           ..ssttaattiissttiiccss to the source file name, and the file is created in the
           same directory as the output file.  If the --_o_p_t_i_o_n form is used,
           --ssttaattss causes counters to be summed over the whole compilation unit
           while --ddeettaaiillss dumps every event as the passes generate them.  The
           default with no option is to sum counters for each function
           compiled.

       --ffdduummpp--ttrreeee--aallll
       --ffdduummpp--ttrreeee--_s_w_i_t_c_h
       --ffdduummpp--ttrreeee--_s_w_i_t_c_h--_o_p_t_i_o_n_s
       --ffdduummpp--ttrreeee--_s_w_i_t_c_h--_o_p_t_i_o_n_s==_f_i_l_e_n_a_m_e
           Control the dumping at various stages of processing the
           intermediate language tree to a file.  The file name is generated
           by appending a switch-specific suffix to the source file name, and
           the file is created in the same directory as the output file. In
           case of ==_f_i_l_e_n_a_m_e option, the dump is output on the given file
           instead of the auto named dump files.  If the --_o_p_t_i_o_n_s form is
           used, _o_p_t_i_o_n_s is a list of -- separated options which control the
           details of the dump.  Not all options are applicable to all dumps;
           those that are not meaningful are ignored.  The following options
           are available

           aaddddrreessss
               Print the address of each node.  Usually this is not meaningful
               as it changes according to the environment and source file.
               Its primary use is for tying up a dump file with a debug
               environment.

           aassmmnnaammee
               If "DECL_ASSEMBLER_NAME" has been set for a given decl, use
               that in the dump instead of "DECL_NAME".  Its primary use is
               ease of use working backward from mangled names in the assembly
               file.

           sslliimm
               When dumping front-end intermediate representations, inhibit
               dumping of members of a scope or body of a function merely
               because that scope has been reached.  Only dump such items when
               they are directly reachable by some other path.

               When dumping pretty-printed trees, this option inhibits dumping
               the bodies of control structures.

               When dumping RTL, print the RTL in slim (condensed) form
               instead of the default LISP-like representation.

           rraaww Print a raw representation of the tree.  By default, trees are
               pretty-printed into a C-like representation.

           ddeettaaiillss
               Enable more detailed dumps (not honored by every dump option).
               Also include information from the optimization passes.

           ssttaattss
               Enable dumping various statistics about the pass (not honored
               by every dump option).

           bblloocckkss
               Enable showing basic block boundaries (disabled in raw dumps).

           ggrraapphh
               For each of the other indicated dump files (--ffdduummpp--rrttll--_p_a_s_s),
               dump a representation of the control flow graph suitable for
               viewing with GraphViz to _f_i_l_e_._p_a_s_s_i_d_._p_a_s_s_._d_o_t.  Each function
               in the file is pretty-printed as a subgraph, so that GraphViz
               can render them all in a single plot.

               This option currently only works for RTL dumps, and the RTL is
               always dumped in slim form.

           vvooppss
               Enable showing virtual operands for every statement.

           lliinneennoo
               Enable showing line numbers for statements.

           uuiidd Enable showing the unique ID ("DECL_UID") for each variable.

           vveerrbboossee
               Enable showing the tree dump for each statement.

           eehh  Enable showing the EH region number holding each statement.

           sscceevv
               Enable showing scalar evolution analysis details.

           ooppttiimmiizzeedd
               Enable showing optimization information (only available in
               certain passes).

           mmiisssseedd
               Enable showing missed optimization information (only available
               in certain passes).

           nnoottee
               Enable other detailed optimization information (only available
               in certain passes).

           ==_f_i_l_e_n_a_m_e
               Instead of an auto named dump file, output into the given file
               name. The file names _s_t_d_o_u_t and _s_t_d_e_r_r are treated specially
               and are considered already open standard streams. For example,

                       gcc -O2 -ftree-vectorize -fdump-tree-vect-blocks=foo.dump
                            -fdump-tree-pre=/dev/stderr file.c

               outputs vectorizer dump into _f_o_o_._d_u_m_p, while the PRE dump is
               output on to _s_t_d_e_r_r. If two conflicting dump filenames are
               given for the same pass, then the latter option overrides the
               earlier one.

           aallll Turn on all options, except rraaww, sslliimm, vveerrbboossee and lliinneennoo.

           ooppttaallll
               Turn on all optimization options, i.e., ooppttiimmiizzeedd, mmiisssseedd, and
               nnoottee.

           To determine what tree dumps are available or find the dump for a
           pass of interest follow the steps below.

           1.  Invoke GCC with --ffdduummpp--ppaasssseess and in the _s_t_d_e_r_r output look for
               a code that corresponds to the pass you are interested in.  For
               example, the codes "tree-evrp", "tree-vrp1", and "tree-vrp2"
               correspond to the three Value Range Propagation passes.  The
               number at the end distinguishes distinct invocations of the
               same pass.

           2.  To enable the creation of the dump file, append the pass code
               to the --ffdduummpp-- option prefix and invoke GCC with it.  For
               example, to enable the dump from the Early Value Range
               Propagation pass, invoke GCC with the --ffdduummpp--ttrreeee--eevvrrpp option.
               Optionally, you may specify the name of the dump file.  If you
               don't specify one, GCC creates as described below.

           3.  Find the pass dump in a file whose name is composed of three
               components separated by a period: the name of the source file
               GCC was invoked to compile, a numeric suffix indicating the
               pass number followed by the letter tt for tree passes (and the
               letter rr for RTL passes), and finally the pass code.  For
               example, the Early VRP pass dump might be in a file named
               _m_y_f_i_l_e_._c_._0_3_8_t_._e_v_r_p in the current working directory.  Note that
               the numeric codes are not stable and may change from one
               version of GCC to another.

       --ffoopptt--iinnffoo
       --ffoopptt--iinnffoo--_o_p_t_i_o_n_s
       --ffoopptt--iinnffoo--_o_p_t_i_o_n_s==_f_i_l_e_n_a_m_e
           Controls optimization dumps from various optimization passes. If
           the --_o_p_t_i_o_n_s form is used, _o_p_t_i_o_n_s is a list of -- separated option
           keywords to select the dump details and optimizations.

           The _o_p_t_i_o_n_s can be divided into two groups: options describing the
           verbosity of the dump, and options describing which optimizations
           should be included. The options from both the groups can be freely
           mixed as they are non-overlapping. However, in case of any
           conflicts, the later options override the earlier options on the
           command line.

           The following options control the dump verbosity:

           ooppttiimmiizzeedd
               Print information when an optimization is successfully applied.
               It is up to a pass to decide which information is relevant. For
               example, the vectorizer passes print the source location of
               loops which are successfully vectorized.

           mmiisssseedd
               Print information about missed optimizations. Individual passes
               control which information to include in the output.

           nnoottee
               Print verbose information about optimizations, such as certain
               transformations, more detailed messages about decisions etc.

           aallll Print detailed optimization information. This includes
               ooppttiimmiizzeedd, mmiisssseedd, and nnoottee.

           One or more of the following option keywords can be used to
           describe a group of optimizations:

           iippaa Enable dumps from all interprocedural optimizations.

           lloooopp
               Enable dumps from all loop optimizations.

           iinnlliinnee
               Enable dumps from all inlining optimizations.

           oommpp Enable dumps from all OMP (Offloading and Multi Processing)
               optimizations.

           vveecc Enable dumps from all vectorization optimizations.

           ooppttaallll
               Enable dumps from all optimizations. This is a superset of the
               optimization groups listed above.

           If _o_p_t_i_o_n_s is omitted, it defaults to ooppttiimmiizzeedd--ooppttaallll, which means
           to dump all info about successful optimizations from all the
           passes.

           If the _f_i_l_e_n_a_m_e is provided, then the dumps from all the applicable
           optimizations are concatenated into the _f_i_l_e_n_a_m_e.  Otherwise the
           dump is output onto _s_t_d_e_r_r. Though multiple --ffoopptt--iinnffoo options are
           accepted, only one of them can include a _f_i_l_e_n_a_m_e. If other
           filenames are provided then all but the first such option are
           ignored.

           Note that the output _f_i_l_e_n_a_m_e is overwritten in case of multiple
           translation units. If a combined output from multiple translation
           units is desired, _s_t_d_e_r_r should be used instead.

           In the following example, the optimization info is output to
           _s_t_d_e_r_r:

                   gcc -O3 -fopt-info

           This example:

                   gcc -O3 -fopt-info-missed=missed.all

           outputs missed optimization report from all the passes into
           _m_i_s_s_e_d_._a_l_l, and this one:

                   gcc -O2 -ftree-vectorize -fopt-info-vec-missed

           prints information about missed optimization opportunities from
           vectorization passes on _s_t_d_e_r_r.  Note that --ffoopptt--iinnffoo--vveecc--mmiisssseedd is
           equivalent to --ffoopptt--iinnffoo--mmiisssseedd--vveecc.  The order of the optimization
           group names and message types listed after --ffoopptt--iinnffoo does not
           matter.

           As another example,

                   gcc -O3 -fopt-info-inline-optimized-missed=inline.txt

           outputs information about missed optimizations as well as optimized
           locations from all the inlining passes into _i_n_l_i_n_e_._t_x_t.

           Finally, consider:

                   gcc -fopt-info-vec-missed=vec.miss -fopt-info-loop-optimized=loop.opt

           Here the two output filenames _v_e_c_._m_i_s_s and _l_o_o_p_._o_p_t are in conflict
           since only one output file is allowed. In this case, only the first
           option takes effect and the subsequent options are ignored. Thus
           only _v_e_c_._m_i_s_s is produced which contains dumps from the vectorizer
           about missed opportunities.

       --ffsscchheedd--vveerrbboossee==_n
           On targets that use instruction scheduling, this option controls
           the amount of debugging output the scheduler prints to the dump
           files.

           For _n greater than zero, --ffsscchheedd--vveerrbboossee outputs the same
           information as --ffdduummpp--rrttll--sscchheedd11 and --ffdduummpp--rrttll--sscchheedd22.  For _n
           greater than one, it also output basic block probabilities,
           detailed ready list information and unit/insn info.  For _n greater
           than two, it includes RTL at abort point, control-flow and regions
           info.  And for _n over four, --ffsscchheedd--vveerrbboossee also includes
           dependence info.

       --ffeennaabbllee--_k_i_n_d--_p_a_s_s
       --ffddiissaabbllee--_k_i_n_d--_p_a_s_s==_r_a_n_g_e_-_l_i_s_t
           This is a set of options that are used to explicitly disable/enable
           optimization passes.  These options are intended for use for
           debugging GCC.  Compiler users should use regular options for
           enabling/disabling passes instead.

           --ffddiissaabbllee--iippaa--_p_a_s_s
               Disable IPA pass _p_a_s_s. _p_a_s_s is the pass name.  If the same pass
               is statically invoked in the compiler multiple times, the pass
               name should be appended with a sequential number starting from
               1.

           --ffddiissaabbllee--rrttll--_p_a_s_s
           --ffddiissaabbllee--rrttll--_p_a_s_s==_r_a_n_g_e_-_l_i_s_t
               Disable RTL pass _p_a_s_s.  _p_a_s_s is the pass name.  If the same
               pass is statically invoked in the compiler multiple times, the
               pass name should be appended with a sequential number starting
               from 1.  _r_a_n_g_e_-_l_i_s_t is a comma-separated list of function
               ranges or assembler names.  Each range is a number pair
               separated by a colon.  The range is inclusive in both ends.  If
               the range is trivial, the number pair can be simplified as a
               single number.  If the function's call graph node's _u_i_d falls
               within one of the specified ranges, the _p_a_s_s is disabled for
               that function.  The _u_i_d is shown in the function header of a
               dump file, and the pass names can be dumped by using option
               --ffdduummpp--ppaasssseess.

           --ffddiissaabbllee--ttrreeee--_p_a_s_s
           --ffddiissaabbllee--ttrreeee--_p_a_s_s==_r_a_n_g_e_-_l_i_s_t
               Disable tree pass _p_a_s_s.  See --ffddiissaabbllee--rrttll for the description
               of option arguments.

           --ffeennaabbllee--iippaa--_p_a_s_s
               Enable IPA pass _p_a_s_s.  _p_a_s_s is the pass name.  If the same pass
               is statically invoked in the compiler multiple times, the pass
               name should be appended with a sequential number starting from
               1.

           --ffeennaabbllee--rrttll--_p_a_s_s
           --ffeennaabbllee--rrttll--_p_a_s_s==_r_a_n_g_e_-_l_i_s_t
               Enable RTL pass _p_a_s_s.  See --ffddiissaabbllee--rrttll for option argument
               description and examples.

           --ffeennaabbllee--ttrreeee--_p_a_s_s
           --ffeennaabbllee--ttrreeee--_p_a_s_s==_r_a_n_g_e_-_l_i_s_t
               Enable tree pass _p_a_s_s.  See --ffddiissaabbllee--rrttll for the description
               of option arguments.

           Here are some examples showing uses of these options.

                   # disable ccp1 for all functions
                      -fdisable-tree-ccp1
                   # disable complete unroll for function whose cgraph node uid is 1
                      -fenable-tree-cunroll=1
                   # disable gcse2 for functions at the following ranges [1,1],
                   # [300,400], and [400,1000]
                   # disable gcse2 for functions foo and foo2
                      -fdisable-rtl-gcse2=foo,foo2
                   # disable early inlining
                      -fdisable-tree-einline
                   # disable ipa inlining
                      -fdisable-ipa-inline
                   # enable tree full unroll
                      -fenable-tree-unroll

       --ffcchheecckkiinngg
       --ffcchheecckkiinngg==_n
           Enable internal consistency checking.  The default depends on the
           compiler configuration.  --ffcchheecckkiinngg==22 enables further internal
           consistency checking that might affect code generation.

       --ffrraannddoomm--sseeeedd==_s_t_r_i_n_g
           This option provides a seed that GCC uses in place of random
           numbers in generating certain symbol names that have to be
           different in every compiled file.  It is also used to place unique
           stamps in coverage data files and the object files that produce
           them.  You can use the --ffrraannddoomm--sseeeedd option to produce reproducibly
           identical object files.

           The _s_t_r_i_n_g can either be a number (decimal, octal or hex) or an
           arbitrary string (in which case it's converted to a number by
           computing CRC32).

           The _s_t_r_i_n_g should be different for every file you compile.

       --ssaavvee--tteemmppss
       --ssaavvee--tteemmppss==ccwwdd
           Store the usual "temporary" intermediate files permanently; place
           them in the current directory and name them based on the source
           file.  Thus, compiling _f_o_o_._c with --cc --ssaavvee--tteemmppss produces files
           _f_o_o_._i and _f_o_o_._s, as well as _f_o_o_._o.  This creates a preprocessed
           _f_o_o_._i output file even though the compiler now normally uses an
           integrated preprocessor.

           When used in combination with the --xx command-line option,
           --ssaavvee--tteemmppss is sensible enough to avoid over writing an input
           source file with the same extension as an intermediate file.  The
           corresponding intermediate file may be obtained by renaming the
           source file before using --ssaavvee--tteemmppss.

           If you invoke GCC in parallel, compiling several different source
           files that share a common base name in different subdirectories or
           the same source file compiled for multiple output destinations, it
           is likely that the different parallel compilers will interfere with
           each other, and overwrite the temporary files.  For instance:

                   gcc -save-temps -o outdir1/foo.o indir1/foo.c&
                   gcc -save-temps -o outdir2/foo.o indir2/foo.c&

           may result in _f_o_o_._i and _f_o_o_._o being written to simultaneously by
           both compilers.

       --ssaavvee--tteemmppss==oobbjj
           Store the usual "temporary" intermediate files permanently.  If the
           --oo option is used, the temporary files are based on the object
           file.  If the --oo option is not used, the --ssaavvee--tteemmppss==oobbjj switch
           behaves like --ssaavvee--tteemmppss.

           For example:

                   gcc -save-temps=obj -c foo.c
                   gcc -save-temps=obj -c bar.c -o dir/xbar.o
                   gcc -save-temps=obj foobar.c -o dir2/yfoobar

           creates _f_o_o_._i, _f_o_o_._s, _d_i_r_/_x_b_a_r_._i, _d_i_r_/_x_b_a_r_._s, _d_i_r_2_/_y_f_o_o_b_a_r_._i,
           _d_i_r_2_/_y_f_o_o_b_a_r_._s, and _d_i_r_2_/_y_f_o_o_b_a_r_._o.

       --ttiimmee[==_f_i_l_e]
           Report the CPU time taken by each subprocess in the compilation
           sequence.  For C source files, this is the compiler proper and
           assembler (plus the linker if linking is done).

           Without the specification of an output file, the output looks like
           this:

                   # cc1 0.12 0.01
                   # as 0.00 0.01

           The first number on each line is the "user time", that is time
           spent executing the program itself.  The second number is "system
           time", time spent executing operating system routines on behalf of
           the program.  Both numbers are in seconds.

           With the specification of an output file, the output is appended to
           the named file, and it looks like this:

                   0.12 0.01 cc1 <options>
                   0.00 0.01 as <options>

           The "user time" and the "system time" are moved before the program
           name, and the options passed to the program are displayed, so that
           one can later tell what file was being compiled, and with which
           options.

       --ffdduummpp--ffiinnaall--iinnssnnss[==_f_i_l_e]
           Dump the final internal representation (RTL) to _f_i_l_e.  If the
           optional argument is omitted (or if _f_i_l_e is "."), the name of the
           dump file is determined by appending ".gkd" to the compilation
           output file name.

       --ffccoommppaarree--ddeebbuugg[==_o_p_t_s]
           If no error occurs during compilation, run the compiler a second
           time, adding _o_p_t_s and --ffccoommppaarree--ddeebbuugg--sseeccoonndd to the arguments
           passed to the second compilation.  Dump the final internal
           representation in both compilations, and print an error if they
           differ.

           If the equal sign is omitted, the default --ggttooggggllee is used.

           The environment variable GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG, if defined, non-empty
           and nonzero, implicitly enables --ffccoommppaarree--ddeebbuugg.  If
           GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG is defined to a string starting with a dash, then
           it is used for _o_p_t_s, otherwise the default --ggttooggggllee is used.

           --ffccoommppaarree--ddeebbuugg==, with the equal sign but without _o_p_t_s, is
           equivalent to --ffnnoo--ccoommppaarree--ddeebbuugg, which disables the dumping of the
           final representation and the second compilation, preventing even
           GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG from taking effect.

           To verify full coverage during --ffccoommppaarree--ddeebbuugg testing, set
           GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG to say --ffccoommppaarree--ddeebbuugg--nnoott--oovveerrrriiddddeenn, which GCC
           rejects as an invalid option in any actual compilation (rather than
           preprocessing, assembly or linking).  To get just a warning,
           setting GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG to --ww%%nn--ffccoommppaarree--ddeebbuugg nnoott oovveerrrriiddddeenn
           will do.

       --ffccoommppaarree--ddeebbuugg--sseeccoonndd
           This option is implicitly passed to the compiler for the second
           compilation requested by --ffccoommppaarree--ddeebbuugg, along with options to
           silence warnings, and omitting other options that would cause the
           compiler to produce output to files or to standard output as a side
           effect.  Dump files and preserved temporary files are renamed so as
           to contain the ".gk" additional extension during the second
           compilation, to avoid overwriting those generated by the first.

           When this option is passed to the compiler driver, it causes the
           _f_i_r_s_t compilation to be skipped, which makes it useful for little
           other than debugging the compiler proper.

       --ggttooggggllee
           Turn off generation of debug info, if leaving out this option
           generates it, or turn it on at level 2 otherwise.  The position of
           this argument in the command line does not matter; it takes effect
           after all other options are processed, and it does so only once, no
           matter how many times it is given.  This is mainly intended to be
           used with --ffccoommppaarree--ddeebbuugg.

       --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss--ttooggggllee
           Toggle --ffvvaarr--ttrraacckkiinngg--aassssiiggnnmmeennttss, in the same way that --ggttooggggllee
           toggles --gg.

       --QQ  Makes the compiler print out each function name as it is compiled,
           and print some statistics about each pass when it finishes.

       --ffttiimmee--rreeppoorrtt
           Makes the compiler print some statistics about the time consumed by
           each pass when it finishes.

       --ffttiimmee--rreeppoorrtt--ddeettaaiillss
           Record the time consumed by infrastructure parts separately for
           each pass.

       --ffiirraa--vveerrbboossee==_n
           Control the verbosity of the dump file for the integrated register
           allocator.  The default value is 5.  If the value _n is greater or
           equal to 10, the dump output is sent to stderr using the same
           format as _n minus 10.

       --ffllttoo--rreeppoorrtt
           Prints a report with internal details on the workings of the link-
           time optimizer.  The contents of this report vary from version to
           version.  It is meant to be useful to GCC developers when
           processing object files in LTO mode (via --ffllttoo).

           Disabled by default.

       --ffllttoo--rreeppoorrtt--wwppaa
           Like --ffllttoo--rreeppoorrtt, but only print for the WPA phase of Link Time
           Optimization.

       --ffmmeemm--rreeppoorrtt
           Makes the compiler print some statistics about permanent memory
           allocation when it finishes.

       --ffmmeemm--rreeppoorrtt--wwppaa
           Makes the compiler print some statistics about permanent memory
           allocation for the WPA phase only.

       --ffpprree--iippaa--mmeemm--rreeppoorrtt
       --ffppoosstt--iippaa--mmeemm--rreeppoorrtt
           Makes the compiler print some statistics about permanent memory
           allocation before or after interprocedural optimization.

       --ffpprrooffiillee--rreeppoorrtt
           Makes the compiler print some statistics about consistency of the
           (estimated) profile and effect of individual passes.

       --ffssttaacckk--uussaaggee
           Makes the compiler output stack usage information for the program,
           on a per-function basis.  The filename for the dump is made by
           appending _._s_u to the _a_u_x_n_a_m_e.  _a_u_x_n_a_m_e is generated from the name
           of the output file, if explicitly specified and it is not an
           executable, otherwise it is the basename of the source file.  An
           entry is made up of three fields:

           *   The name of the function.

           *   A number of bytes.

           *   One or more qualifiers: "static", "dynamic", "bounded".

           The qualifier "static" means that the function manipulates the
           stack statically: a fixed number of bytes are allocated for the
           frame on function entry and released on function exit; no stack
           adjustments are otherwise made in the function.  The second field
           is this fixed number of bytes.

           The qualifier "dynamic" means that the function manipulates the
           stack dynamically: in addition to the static allocation described
           above, stack adjustments are made in the body of the function, for
           example to push/pop arguments around function calls.  If the
           qualifier "bounded" is also present, the amount of these
           adjustments is bounded at compile time and the second field is an
           upper bound of the total amount of stack used by the function.  If
           it is not present, the amount of these adjustments is not bounded
           at compile time and the second field only represents the bounded
           part.

       --ffssttaattss
           Emit statistics about front-end processing at the end of the
           compilation.  This option is supported only by the C++ front end,
           and the information is generally only useful to the G++ development
           team.

       --ffddbbgg--ccnntt--lliisstt
           Print the name and the counter upper bound for all debug counters.

       --ffddbbgg--ccnntt==_c_o_u_n_t_e_r_-_v_a_l_u_e_-_l_i_s_t
           Set the internal debug counter upper bound.  _c_o_u_n_t_e_r_-_v_a_l_u_e_-_l_i_s_t is
           a comma-separated list of _n_a_m_e:_v_a_l_u_e pairs which sets the upper
           bound of each debug counter _n_a_m_e to _v_a_l_u_e.  All debug counters have
           the initial upper bound of "UINT_MAX"; thus "dbg_cnt" returns true
           always unless the upper bound is set by this option.  For example,
           with --ffddbbgg--ccnntt==ddccee::1100,,ttaaiill__ccaallll::00, "dbg_cnt(dce)" returns true only
           for first 10 invocations.

       --pprriinntt--ffiillee--nnaammee==_l_i_b_r_a_r_y
           Print the full absolute name of the library file _l_i_b_r_a_r_y that would
           be used when linking---and don't do anything else.  With this
           option, GCC does not compile or link anything; it just prints the
           file name.

       --pprriinntt--mmuullttii--ddiirreeccttoorryy
           Print the directory name corresponding to the multilib selected by
           any other switches present in the command line.  This directory is
           supposed to exist in GGCCCC__EEXXEECC__PPRREEFFIIXX.

       --pprriinntt--mmuullttii--lliibb
           Print the mapping from multilib directory names to compiler
           switches that enable them.  The directory name is separated from
           the switches by ;;, and each switch starts with an @@ instead of the
           --, without spaces between multiple switches.  This is supposed to
           ease shell processing.

       --pprriinntt--mmuullttii--ooss--ddiirreeccttoorryy
           Print the path to OS libraries for the selected multilib, relative
           to some _l_i_b subdirectory.  If OS libraries are present in the _l_i_b
           subdirectory and no multilibs are used, this is usually just _., if
           OS libraries are present in _l_i_b_s_u_f_f_i_x sibling directories this
           prints e.g. _._._/_l_i_b_6_4, _._._/_l_i_b or _._._/_l_i_b_3_2, or if OS libraries are
           present in _l_i_b_/_s_u_b_d_i_r subdirectories it prints e.g. _a_m_d_6_4, _s_p_a_r_c_v_9
           or _e_v_6.

       --pprriinntt--mmuullttiiaarrcchh
           Print the path to OS libraries for the selected multiarch, relative
           to some _l_i_b subdirectory.

       --pprriinntt--pprroogg--nnaammee==_p_r_o_g_r_a_m
           Like --pprriinntt--ffiillee--nnaammee, but searches for a program such as ccpppp.

       --pprriinntt--lliibbggcccc--ffiillee--nnaammee
           Same as --pprriinntt--ffiillee--nnaammee==lliibbggcccc..aa.

           This is useful when you use --nnoossttddlliibb or --nnooddeeffaauullttlliibbss but you do
           want to link with _l_i_b_g_c_c_._a.  You can do:

                   gcc -nostdlib <files>... `gcc -print-libgcc-file-name`

       --pprriinntt--sseeaarrcchh--ddiirrss
           Print the name of the configured installation directory and a list
           of program and library directories ggcccc searches---and don't do
           anything else.

           This is useful when ggcccc prints the error message iinnssttaallllaattiioonn
           pprroobblleemm,, ccaannnnoott eexxeecc ccpppp00:: NNoo ssuucchh ffiillee oorr ddiirreeccttoorryy.  To resolve
           this you either need to put _c_p_p_0 and the other compiler components
           where ggcccc expects to find them, or you can set the environment
           variable GGCCCC__EEXXEECC__PPRREEFFIIXX to the directory where you installed them.
           Don't forget the trailing //.

       --pprriinntt--ssyyssrroooott
           Print the target sysroot directory that is used during compilation.
           This is the target sysroot specified either at configure time or
           using the ----ssyyssrroooott option, possibly with an extra suffix that
           depends on compilation options.  If no target sysroot is specified,
           the option prints nothing.

       --pprriinntt--ssyyssrroooott--hheeaaddeerrss--ssuuffffiixx
           Print the suffix added to the target sysroot when searching for
           headers, or give an error if the compiler is not configured with
           such a suffix---and don't do anything else.

       --dduummppmmaacchhiinnee
           Print the compiler's target machine (for example,
           ii668866--ppcc--lliinnuuxx--ggnnuu)---and don't do anything else.

       --dduummppvveerrssiioonn
           Print the compiler version (for example, 3.0, 6.3.0 or 7)---and
           don't do anything else.  This is the compiler version used in
           filesystem paths, specs, can be depending on how the compiler has
           been configured just a single number (major version), two numbers
           separated by dot (major and minor version) or three numbers
           separated by dots (major, minor and patchlevel version).

       --dduummppffuullllvveerrssiioonn
           Print the full compiler version, always 3 numbers separated by
           dots, major, minor and patchlevel version.

       --dduummppssppeeccss
           Print the compiler's built-in specs---and don't do anything else.
           (This is used when GCC itself is being built.)

   MMaacchhiinnee--DDeeppeennddeenntt OOppttiioonnss
       Each target machine supported by GCC can have its own options---for
       example, to allow you to compile for a particular processor variant or
       ABI, or to control optimizations specific to that machine.  By
       convention, the names of machine-specific options start with --mm.

       Some configurations of the compiler also support additional target-
       specific options, usually for compatibility with other compilers on the
       same platform.

       _A_A_r_c_h_6_4 _O_p_t_i_o_n_s

       These options are defined for AArch64 implementations:

       --mmaabbii==_n_a_m_e
           Generate code for the specified data model.  Permissible values are
           iillpp3322 for SysV-like data model where int, long int and pointers are
           32 bits, and llpp6644 for SysV-like data model where int is 32 bits,
           but long int and pointers are 64 bits.

           The default depends on the specific target configuration.  Note
           that the LP64 and ILP32 ABIs are not link-compatible; you must
           compile your entire program with the same ABI, and link with a
           compatible set of libraries.

       --mmbbiigg--eennddiiaann
           Generate big-endian code.  This is the default when GCC is
           configured for an aaaarrcchh6644__bbee--**--** target.

       --mmggeenneerraall--rreeggss--oonnllyy
           Generate code which uses only the general-purpose registers.  This
           will prevent the compiler from using floating-point and Advanced
           SIMD registers but will not impose any restrictions on the
           assembler.

       --mmlliittttllee--eennddiiaann
           Generate little-endian code.  This is the default when GCC is
           configured for an aaaarrcchh6644--**--** but not an aaaarrcchh6644__bbee--**--** target.

       --mmccmmooddeell==ttiinnyy
           Generate code for the tiny code model.  The program and its
           statically defined symbols must be within 1MB of each other.
           Programs can be statically or dynamically linked.

       --mmccmmooddeell==ssmmaallll
           Generate code for the small code model.  The program and its
           statically defined symbols must be within 4GB of each other.
           Programs can be statically or dynamically linked.  This is the
           default code model.

       --mmccmmooddeell==llaarrggee
           Generate code for the large code model.  This makes no assumptions
           about addresses and sizes of sections.  Programs can be statically
           linked only.

       --mmssttrriicctt--aalliiggnn
           Avoid generating memory accesses that may not be aligned on a
           natural object boundary as described in the architecture
           specification.

       --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr
       --mmnnoo--oommiitt--lleeaaff--ffrraammee--ppooiinntteerr
           Omit or keep the frame pointer in leaf functions.  The former
           behavior is the default.

       --mmttllss--ddiiaalleecctt==ddeesscc
           Use TLS descriptors as the thread-local storage mechanism for
           dynamic accesses of TLS variables.  This is the default.

       --mmttllss--ddiiaalleecctt==ttrraaddiittiioonnaall
           Use traditional TLS as the thread-local storage mechanism for
           dynamic accesses of TLS variables.

       --mmttllss--ssiizzee==_s_i_z_e
           Specify bit size of immediate TLS offsets.  Valid values are 12,
           24, 32, 48.  This option requires binutils 2.26 or newer.

       --mmffiixx--ccoorrtteexx--aa5533--883355776699
       --mmnnoo--ffiixx--ccoorrtteexx--aa5533--883355776699
           Enable or disable the workaround for the ARM Cortex-A53 erratum
           number 835769.  This involves inserting a NOP instruction between
           memory instructions and 64-bit integer multiply-accumulate
           instructions.

       --mmffiixx--ccoorrtteexx--aa5533--884433441199
       --mmnnoo--ffiixx--ccoorrtteexx--aa5533--884433441199
           Enable or disable the workaround for the ARM Cortex-A53 erratum
           number 843419.  This erratum workaround is made at link time and
           this will only pass the corresponding flag to the linker.

       --mmllooww--pprreecciissiioonn--rreecciipp--ssqqrrtt
       --mmnnoo--llooww--pprreecciissiioonn--rreecciipp--ssqqrrtt
           Enable or disable the reciprocal square root approximation.  This
           option only has an effect if --ffffaasstt--mmaatthh or
           --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss is used as well.  Enabling this reduces
           precision of reciprocal square root results to about 16 bits for
           single precision and to 32 bits for double precision.

       --mmllooww--pprreecciissiioonn--ssqqrrtt
       --mmnnoo--llooww--pprreecciissiioonn--ssqqrrtt
           Enable or disable the square root approximation.  This option only
           has an effect if --ffffaasstt--mmaatthh or --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss is used
           as well.  Enabling this reduces precision of square root results to
           about 16 bits for single precision and to 32 bits for double
           precision.  If enabled, it implies --mmllooww--pprreecciissiioonn--rreecciipp--ssqqrrtt.

       --mmllooww--pprreecciissiioonn--ddiivv
       --mmnnoo--llooww--pprreecciissiioonn--ddiivv
           Enable or disable the division approximation.  This option only has
           an effect if --ffffaasstt--mmaatthh or --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss is used as
           well.  Enabling this reduces precision of division results to about
           16 bits for single precision and to 32 bits for double precision.

       --mmaarrcchh==_n_a_m_e
           Specify the name of the target architecture and, optionally, one or
           more feature modifiers.  This option has the form
           --mmaarrcchh==_a_r_c_h{++[nnoo]_f_e_a_t_u_r_e}*.

           The permissible values for _a_r_c_h are aarrmmvv88--aa, aarrmmvv88..11--aa, aarrmmvv88..22--aa,
           aarrmmvv88..33--aa or aarrmmvv88..44--aa or _n_a_t_i_v_e.

           The value aarrmmvv88..44--aa implies aarrmmvv88..33--aa and enables compiler support
           for the ARMv8.4-A architecture extensions.

           The value aarrmmvv88..33--aa implies aarrmmvv88..22--aa and enables compiler support
           for the ARMv8.3-A architecture extensions.

           The value aarrmmvv88..22--aa implies aarrmmvv88..11--aa and enables compiler support
           for the ARMv8.2-A architecture extensions.

           The value aarrmmvv88..11--aa implies aarrmmvv88--aa and enables compiler support
           for the ARMv8.1-A architecture extension.  In particular, it
           enables the ++ccrrcc, ++llssee, and ++rrddmmaa features.

           The value nnaattiivvee is available on native AArch64 GNU/Linux and
           causes the compiler to pick the architecture of the host system.
           This option has no effect if the compiler is unable to recognize
           the architecture of the host system,

           The permissible values for _f_e_a_t_u_r_e are listed in the sub-section on
           aaaarrcchh6644--ffeeaattuurree--mmooddiiffiieerrss,,,,--mmaarrcchh aanndd --mmccppuu FFeeaattuurree MMooddiiffiieerrss.
           Where conflicting feature modifiers are specified, the right-most
           feature is used.

           GCC uses _n_a_m_e to determine what kind of instructions it can emit
           when generating assembly code.  If --mmaarrcchh is specified without
           either of --mmttuunnee or --mmccppuu also being specified, the code is tuned
           to perform well across a range of target processors implementing
           the target architecture.

       --mmttuunnee==_n_a_m_e
           Specify the name of the target processor for which GCC should tune
           the performance of the code.  Permissible values for this option
           are: ggeenneerriicc, ccoorrtteexx--aa3355, ccoorrtteexx--aa5533, ccoorrtteexx--aa5555, ccoorrtteexx--aa5577,
           ccoorrtteexx--aa7722, ccoorrtteexx--aa7733, ccoorrtteexx--aa7755, eexxyynnooss--mm11, ffaallkkoorr, qqddff2244xxxx,
           ssaapphhiirraa, xxggeennee11, vvuullccaann, tthhuunnddeerrxx, tthhuunnddeerrxxtt8888, tthhuunnddeerrxxtt8888pp11,
           tthhuunnddeerrxxtt8811, tthhuunnddeerrxxtt8833, tthhuunnddeerrxx22tt9999, ccoorrtteexx--aa5577..ccoorrtteexx--aa5533,
           ccoorrtteexx--aa7722..ccoorrtteexx--aa5533, ccoorrtteexx--aa7733..ccoorrtteexx--aa3355,
           ccoorrtteexx--aa7733..ccoorrtteexx--aa5533, ccoorrtteexx--aa7755..ccoorrtteexx--aa5555, nnaattiivvee.

           The values ccoorrtteexx--aa5577..ccoorrtteexx--aa5533, ccoorrtteexx--aa7722..ccoorrtteexx--aa5533,
           ccoorrtteexx--aa7733..ccoorrtteexx--aa3355, ccoorrtteexx--aa7733..ccoorrtteexx--aa5533, ccoorrtteexx--aa7755..ccoorrtteexx--aa5555
           specify that GCC should tune for a big.LITTLE system.

           Additionally on native AArch64 GNU/Linux systems the value nnaattiivvee
           tunes performance to the host system.  This option has no effect if
           the compiler is unable to recognize the processor of the host
           system.

           Where none of --mmttuunnee==, --mmccppuu== or --mmaarrcchh== are specified, the code is
           tuned to perform well across a range of target processors.

           This option cannot be suffixed by feature modifiers.

       --mmccppuu==_n_a_m_e
           Specify the name of the target processor, optionally suffixed by
           one or more feature modifiers.  This option has the form
           --mmccppuu==_c_p_u{++[nnoo]_f_e_a_t_u_r_e}*, where the permissible values for _c_p_u are
           the same as those available for --mmttuunnee.  The permissible values for
           _f_e_a_t_u_r_e are documented in the sub-section on
           aaaarrcchh6644--ffeeaattuurree--mmooddiiffiieerrss,,,,--mmaarrcchh aanndd --mmccppuu FFeeaattuurree MMooddiiffiieerrss.
           Where conflicting feature modifiers are specified, the right-most
           feature is used.

           GCC uses _n_a_m_e to determine what kind of instructions it can emit
           when generating assembly code (as if by --mmaarrcchh) and to determine
           the target processor for which to tune for performance (as if by
           --mmttuunnee).  Where this option is used in conjunction with --mmaarrcchh or
           --mmttuunnee, those options take precedence over the appropriate part of
           this option.

       --mmoovveerrrriiddee==_s_t_r_i_n_g
           Override tuning decisions made by the back-end in response to a
           --mmttuunnee== switch.  The syntax, semantics, and accepted values for
           _s_t_r_i_n_g in this option are not guaranteed to be consistent across
           releases.

           This option is only intended to be useful when developing GCC.

       --mmvveerrbboossee--ccoosstt--dduummpp
           Enable verbose cost model dumping in the debug dump files.  This
           option is provided for use in debugging the compiler.

       --mmppcc--rreellaattiivvee--lliitteerraall--llooaaddss
       --mmnnoo--ppcc--rreellaattiivvee--lliitteerraall--llooaaddss
           Enable or disable PC-relative literal loads.  With this option
           literal pools are accessed using a single instruction and emitted
           after each function.  This limits the maximum size of functions to
           1MB.  This is enabled by default for --mmccmmooddeell==ttiinnyy.

       --mmssiiggnn--rreettuurrnn--aaddddrreessss==_s_c_o_p_e
           Select the function scope on which return address signing will be
           applied.  Permissible values are nnoonnee, which disables return
           address signing, nnoonn--lleeaaff, which enables pointer signing for
           functions which are not leaf functions, and aallll, which enables
           pointer signing for all functions.  The default value is nnoonnee.

       --mmssvvee--vveeccttoorr--bbiittss==_b_i_t_s
           Specify the number of bits in an SVE vector register.  This option
           only has an effect when SVE is enabled.

           GCC supports two forms of SVE code generation: "vector-length
           agnostic" output that works with any size of vector register and
           "vector-length specific" output that allows GCC to make assumptions
           about the vector length when it is useful for optimization reasons.
           The possible values of bbiittss are: ssccaallaabbllee, 112288, 225566, 551122, 11002244 and
           22004488.  Specifying ssccaallaabbllee selects vector-length agnostic output.
           At present --mmssvvee--vveeccttoorr--bbiittss==112288 also generates vector-length
           agnostic output.  All other values generate vector-length specific
           code.  The behavior of these values may change in future releases
           and no value except ssccaallaabbllee should be relied on for producing code
           that is portable across different hardware SVE vector lengths.

           The default is --mmssvvee--vveeccttoorr--bbiittss==ssccaallaabbllee, which produces vector-
           length agnostic code.

       --mmaarrcchh and --mmccppuu Feature Modifiers

       Feature modifiers used with --mmaarrcchh and --mmccppuu can be any of the
       following and their inverses nnoo_f_e_a_t_u_r_e:

       ccrrcc Enable CRC extension.  This is on by default for --mmaarrcchh==aarrmmvv88..11--aa.

       ccrryyppttoo
           Enable Crypto extension.  This also enables Advanced SIMD and
           floating-point instructions.

       ffpp  Enable floating-point instructions.  This is on by default for all
           possible values for options --mmaarrcchh and --mmccppuu.

       ssiimmdd
           Enable Advanced SIMD instructions.  This also enables floating-
           point instructions.  This is on by default for all possible values
           for options --mmaarrcchh and --mmccppuu.

       ssvvee Enable Scalable Vector Extension instructions.  This also enables
           Advanced SIMD and floating-point instructions.

       llssee Enable Large System Extension instructions.  This is on by default
           for --mmaarrcchh==aarrmmvv88..11--aa.

       rrddmmaa
           Enable Round Double Multiply Accumulate instructions.  This is on
           by default for --mmaarrcchh==aarrmmvv88..11--aa.

       ffpp1166
           Enable FP16 extension.  This also enables floating-point
           instructions.

       ffpp1166ffmmll
           Enable FP16 fmla extension.  This also enables FP16 extensions and
           floating-point instructions. This option is enabled by default for
           --mmaarrcchh==aarrmmvv88..44--aa. Use of this option with architectures prior to
           Armv8.2-A is not supported.

       rrccppcc
           Enable the RcPc extension.  This does not change code generation
           from GCC, but is passed on to the assembler, enabling inline asm
           statements to use instructions from the RcPc extension.

       ddoottpprroodd
           Enable the Dot Product extension.  This also enables Advanced SIMD
           instructions.

       aaeess Enable the Armv8-a aes and pmull crypto extension.  This also
           enables Advanced SIMD instructions.

       sshhaa22
           Enable the Armv8-a sha2 crypto extension.  This also enables
           Advanced SIMD instructions.

       sshhaa33
           Enable the sha512 and sha3 crypto extension.  This also enables
           Advanced SIMD instructions. Use of this option with architectures
           prior to Armv8.2-A is not supported.

       ssmm44 Enable the sm3 and sm4 crypto extension.  This also enables
           Advanced SIMD instructions.  Use of this option with architectures
           prior to Armv8.2-A is not supported.

       Feature ccrryyppttoo implies aaeess, sshhaa22, and ssiimmdd, which implies ffpp.
       Conversely, nnooffpp implies nnoossiimmdd, which implies nnooccrryyppttoo, nnooaaeess and
       nnoosshhaa22.

       _A_d_a_p_t_e_v_a _E_p_i_p_h_a_n_y _O_p_t_i_o_n_s

       These --mm options are defined for Adapteva Epiphany:

       --mmhhaallff--rreegg--ffiillee
           Don't allocate any register in the range "r32"..."r63".  That
           allows code to run on hardware variants that lack these registers.

       --mmpprreeffeerr--sshhoorrtt--iinnssnn--rreeggss
           Preferentially allocate registers that allow short instruction
           generation.  This can result in increased instruction count, so
           this may either reduce or increase overall code size.

       --mmbbrraanncchh--ccoosstt==_n_u_m
           Set the cost of branches to roughly _n_u_m "simple" instructions.
           This cost is only a heuristic and is not guaranteed to produce
           consistent results across releases.

       --mmccmmoovvee
           Enable the generation of conditional moves.

       --mmnnooppss==_n_u_m
           Emit _n_u_m NOPs before every other generated instruction.

       --mmnnoo--ssoofftt--ccmmppssff
           For single-precision floating-point comparisons, emit an "fsub"
           instruction and test the flags.  This is faster than a software
           comparison, but can get incorrect results in the presence of NaNs,
           or when two different small numbers are compared such that their
           difference is calculated as zero.  The default is --mmssoofftt--ccmmppssff,
           which uses slower, but IEEE-compliant, software comparisons.

       --mmssttaacckk--ooffffsseett==_n_u_m
           Set the offset between the top of the stack and the stack pointer.
           E.g., a value of 8 means that the eight bytes in the range
           "sp+0...sp+7" can be used by leaf functions without stack
           allocation.  Values other than 88 or 1166 are untested and unlikely to
           work.  Note also that this option changes the ABI; compiling a
           program with a different stack offset than the libraries have been
           compiled with generally does not work.  This option can be useful
           if you want to evaluate if a different stack offset would give you
           better code, but to actually use a different stack offset to build
           working programs, it is recommended to configure the toolchain with
           the appropriate ----wwiitthh--ssttaacckk--ooffffsseett==_n_u_m option.

       --mmnnoo--rroouunndd--nneeaarreesstt
           Make the scheduler assume that the rounding mode has been set to
           truncating.  The default is --mmrroouunndd--nneeaarreesstt.

       --mmlloonngg--ccaallllss
           If not otherwise specified by an attribute, assume all calls might
           be beyond the offset range of the "b" / "bl" instructions, and
           therefore load the function address into a register before
           performing a (otherwise direct) call.  This is the default.

       --mmsshhoorrtt--ccaallllss
           If not otherwise specified by an attribute, assume all direct calls
           are in the range of the "b" / "bl" instructions, so use these
           instructions for direct calls.  The default is --mmlloonngg--ccaallllss.

       --mmssmmaallll1166
           Assume addresses can be loaded as 16-bit unsigned values.  This
           does not apply to function addresses for which --mmlloonngg--ccaallllss
           semantics are in effect.

       --mmffpp--mmooddee==_m_o_d_e
           Set the prevailing mode of the floating-point unit.  This
           determines the floating-point mode that is provided and expected at
           function call and return time.  Making this mode match the mode you
           predominantly need at function start can make your programs smaller
           and faster by avoiding unnecessary mode switches.

           _m_o_d_e can be set to one the following values:

           ccaalllleerr
               Any mode at function entry is valid, and retained or restored
               when the function returns, and when it calls other functions.
               This mode is useful for compiling libraries or other
               compilation units you might want to incorporate into different
               programs with different prevailing FPU modes, and the
               convenience of being able to use a single object file outweighs
               the size and speed overhead for any extra mode switching that
               might be needed, compared with what would be needed with a more
               specific choice of prevailing FPU mode.

           ttrruunnccaattee
               This is the mode used for floating-point calculations with
               truncating (i.e. round towards zero) rounding mode.  That
               includes conversion from floating point to integer.

           rroouunndd--nneeaarreesstt
               This is the mode used for floating-point calculations with
               round-to-nearest-or-even rounding mode.

           iinntt This is the mode used to perform integer calculations in the
               FPU, e.g.  integer multiply, or integer multiply-and-
               accumulate.

           The default is --mmffpp--mmooddee==ccaalllleerr

       --mmnnoosspplliitt--lloohhii
       --mmnnoo--ppoossttiinncc
       --mmnnoo--ppoossttmmooddiiffyy
           Code generation tweaks that disable, respectively, splitting of
           32-bit loads, generation of post-increment addresses, and
           generation of post-modify addresses.  The defaults are mmsspplliitt--lloohhii,
           --mmppoosstt--iinncc, and --mmppoosstt--mmooddiiffyy.

       --mmnnoovveecctt--ddoouubbllee
           Change the preferred SIMD mode to SImode.  The default is
           --mmvveecctt--ddoouubbllee, which uses DImode as preferred SIMD mode.

       --mmaaxx--vveecctt--aalliiggnn==_n_u_m
           The maximum alignment for SIMD vector mode types.  _n_u_m may be 4 or
           8.  The default is 8.  Note that this is an ABI change, even though
           many library function interfaces are unaffected if they don't use
           SIMD vector modes in places that affect size and/or alignment of
           relevant types.

       --mmsspplliitt--vveeccmmoovvee--eeaarrllyy
           Split vector moves into single word moves before reload.  In theory
           this can give better register allocation, but so far the reverse
           seems to be generally the case.

       --mm11rreegg--_r_e_g
           Specify a register to hold the constant -1, which makes loading
           small negative constants and certain bitmasks faster.  Allowable
           values for _r_e_g are rr4433 and rr6633, which specify use of that register
           as a fixed register, and nnoonnee, which means that no register is used
           for this purpose.  The default is --mm11rreegg--nnoonnee.

       _A_R_C _O_p_t_i_o_n_s

       The following options control the architecture variant for which code
       is being compiled:

       --mmbbaarrrreell--sshhiifftteerr
           Generate instructions supported by barrel shifter.  This is the
           default unless --mmccppuu==AARRCC660011 or --mmccppuu==AARRCCEEMM is in effect.

       --mmjjllii--aallwwaayyss
           Force to call a function using jli_s instruction.  This option is
           valid only for ARCv2 architecture.

       --mmccppuu==_c_p_u
           Set architecture type, register usage, and instruction scheduling
           parameters for _c_p_u.  There are also shortcut alias options
           available for backward compatibility and convenience.  Supported
           values for _c_p_u are

           aarrcc660000
               Compile for ARC600.  Aliases: --mmAA66, --mmAARRCC660000.

           aarrcc660011
               Compile for ARC601.  Alias: --mmAARRCC660011.

           aarrcc770000
               Compile for ARC700.  Aliases: --mmAA77, --mmAARRCC770000.  This is the
               default when configured with ----wwiitthh--ccppuu==aarrcc770000.

           aarrcceemm
               Compile for ARC EM.

           aarrcchhss
               Compile for ARC HS.

           eemm  Compile for ARC EM CPU with no hardware extensions.

           eemm44 Compile for ARC EM4 CPU.

           eemm44__ddmmiippss
               Compile for ARC EM4 DMIPS CPU.

           eemm44__ffppuuss
               Compile for ARC EM4 DMIPS CPU with the single-precision
               floating-point extension.

           eemm44__ffppuuddaa
               Compile for ARC EM4 DMIPS CPU with single-precision floating-
               point and double assist instructions.

           hhss  Compile for ARC HS CPU with no hardware extensions except the
               atomic instructions.

           hhss3344
               Compile for ARC HS34 CPU.

           hhss3388
               Compile for ARC HS38 CPU.

           hhss3388__lliinnuuxx
               Compile for ARC HS38 CPU with all hardware extensions on.

           aarrcc660000__nnoorrmm
               Compile for ARC 600 CPU with "norm" instructions enabled.

           aarrcc660000__mmuull3322xx1166
               Compile for ARC 600 CPU with "norm" and 32x16-bit multiply
               instructions enabled.

           aarrcc660000__mmuull6644
               Compile for ARC 600 CPU with "norm" and "mul64"-family
               instructions enabled.

           aarrcc660011__nnoorrmm
               Compile for ARC 601 CPU with "norm" instructions enabled.

           aarrcc660011__mmuull3322xx1166
               Compile for ARC 601 CPU with "norm" and 32x16-bit multiply
               instructions enabled.

           aarrcc660011__mmuull6644
               Compile for ARC 601 CPU with "norm" and "mul64"-family
               instructions enabled.

           nnppss440000
               Compile for ARC 700 on NPS400 chip.

           eemm__mmiinnii
               Compile for ARC EM minimalist configuration featuring reduced
               register set.

       --mmddppffpp
       --mmddppffpp--ccoommppaacctt
           Generate double-precision FPX instructions, tuned for the compact
           implementation.

       --mmddppffpp--ffaasstt
           Generate double-precision FPX instructions, tuned for the fast
           implementation.

       --mmnnoo--ddppffpp--llrrssrr
           Disable "lr" and "sr" instructions from using FPX extension aux
           registers.

       --mmeeaa
           Generate extended arithmetic instructions.  Currently only "divaw",
           "adds", "subs", and "sat16" are supported.  This is always enabled
           for --mmccppuu==AARRCC770000.

       --mmnnoo--mmppyy
           Do not generate "mpy"-family instructions for ARC700.  This option
           is deprecated.

       --mmmmuull3322xx1166
           Generate 32x16-bit multiply and multiply-accumulate instructions.

       --mmmmuull6644
           Generate "mul64" and "mulu64" instructions.  Only valid for
           --mmccppuu==AARRCC660000.

       --mmnnoorrmm
           Generate "norm" instructions.  This is the default if --mmccppuu==AARRCC770000
           is in effect.

       --mmssppffpp
       --mmssppffpp--ccoommppaacctt
           Generate single-precision FPX instructions, tuned for the compact
           implementation.

       --mmssppffpp--ffaasstt
           Generate single-precision FPX instructions, tuned for the fast
           implementation.

       --mmssiimmdd
           Enable generation of ARC SIMD instructions via target-specific
           builtins.  Only valid for --mmccppuu==AARRCC770000.

       --mmssoofftt--ffllooaatt
           This option ignored; it is provided for compatibility purposes
           only.  Software floating-point code is emitted by default, and this
           default can overridden by FPX options; --mmssppffpp, --mmssppffpp--ccoommppaacctt, or
           --mmssppffpp--ffaasstt for single precision, and --mmddppffpp, --mmddppffpp--ccoommppaacctt, or
           --mmddppffpp--ffaasstt for double precision.

       --mmsswwaapp
           Generate "swap" instructions.

       --mmaattoommiicc
           This enables use of the locked load/store conditional extension to
           implement atomic memory built-in functions.  Not available for ARC
           6xx or ARC EM cores.

       --mmddiivv--rreemm
           Enable "div" and "rem" instructions for ARCv2 cores.

       --mmccooddee--ddeennssiittyy
           Enable code density instructions for ARC EM.  This option is on by
           default for ARC HS.

       --mmllll6644
           Enable double load/store operations for ARC HS cores.

       --mmttpp--rreeggnnoo==_r_e_g_n_o
           Specify thread pointer register number.

       --mmmmppyy--ooppttiioonn==_m_u_l_t_o
           Compile ARCv2 code with a multiplier design option.  You can
           specify the option using either a string or numeric value for
           _m_u_l_t_o.  wwllhh11 is the default value.  The recognized values are:

           00
           nnoonnee
               No multiplier available.

           11
           ww   16x16 multiplier, fully pipelined.  The following instructions
               are enabled: "mpyw" and "mpyuw".

           22
           wwllhh11
               32x32 multiplier, fully pipelined (1 stage).  The following
               instructions are additionally enabled: "mpy", "mpyu", "mpym",
               "mpymu", and "mpy_s".

           33
           wwllhh22
               32x32 multiplier, fully pipelined (2 stages).  The following
               instructions are additionally enabled: "mpy", "mpyu", "mpym",
               "mpymu", and "mpy_s".

           44
           wwllhh33
               Two 16x16 multipliers, blocking, sequential.  The following
               instructions are additionally enabled: "mpy", "mpyu", "mpym",
               "mpymu", and "mpy_s".

           55
           wwllhh44
               One 16x16 multiplier, blocking, sequential.  The following
               instructions are additionally enabled: "mpy", "mpyu", "mpym",
               "mpymu", and "mpy_s".

           66
           wwllhh55
               One 32x4 multiplier, blocking, sequential.  The following
               instructions are additionally enabled: "mpy", "mpyu", "mpym",
               "mpymu", and "mpy_s".

           77
           pplluuss__ddmmppyy
               ARC HS SIMD support.

           88
           pplluuss__mmaaccdd
               ARC HS SIMD support.

           99
           pplluuss__qqmmaaccww
               ARC HS SIMD support.

           This option is only available for ARCv2 cores.

       --mmffppuu==_f_p_u
           Enables support for specific floating-point hardware extensions for
           ARCv2 cores.  Supported values for _f_p_u are:

           ffppuuss
               Enables support for single-precision floating-point hardware
               extensions.

           ffppuudd
               Enables support for double-precision floating-point hardware
               extensions.  The single-precision floating-point extension is
               also enabled.  Not available for ARC EM.

           ffppuuddaa
               Enables support for double-precision floating-point hardware
               extensions using double-precision assist instructions.  The
               single-precision floating-point extension is also enabled.
               This option is only available for ARC EM.

           ffppuuddaa__ddiivv
               Enables support for double-precision floating-point hardware
               extensions using double-precision assist instructions.  The
               single-precision floating-point, square-root, and divide
               extensions are also enabled.  This option is only available for
               ARC EM.

           ffppuuddaa__ffmmaa
               Enables support for double-precision floating-point hardware
               extensions using double-precision assist instructions.  The
               single-precision floating-point and fused multiply and add
               hardware extensions are also enabled.  This option is only
               available for ARC EM.

           ffppuuddaa__aallll
               Enables support for double-precision floating-point hardware
               extensions using double-precision assist instructions.  All
               single-precision floating-point hardware extensions are also
               enabled.  This option is only available for ARC EM.

           ffppuuss__ddiivv
               Enables support for single-precision floating-point, square-
               root and divide hardware extensions.

           ffppuudd__ddiivv
               Enables support for double-precision floating-point, square-
               root and divide hardware extensions.  This option includes
               option ffppuuss__ddiivv. Not available for ARC EM.

           ffppuuss__ffmmaa
               Enables support for single-precision floating-point and fused
               multiply and add hardware extensions.

           ffppuudd__ffmmaa
               Enables support for double-precision floating-point and fused
               multiply and add hardware extensions.  This option includes
               option ffppuuss__ffmmaa.  Not available for ARC EM.

           ffppuuss__aallll
               Enables support for all single-precision floating-point
               hardware extensions.

           ffppuudd__aallll
               Enables support for all single- and double-precision floating-
               point hardware extensions.  Not available for ARC EM.

       --mmiirrqq--ccttrrll--ssaavveedd==_r_e_g_i_s_t_e_r_-_r_a_n_g_e,, _b_l_i_n_k,, _l_p___c_o_u_n_t
           Specifies general-purposes registers that the processor
           automatically saves/restores on interrupt entry and exit.
           _r_e_g_i_s_t_e_r_-_r_a_n_g_e is specified as two registers separated by a dash.
           The register range always starts with "r0", the upper limit is "fp"
           register.  _b_l_i_n_k and _l_p___c_o_u_n_t are optional.  This option is only
           valid for ARC EM and ARC HS cores.

       --mmrrggff--bbaannkkeedd--rreeggss==_n_u_m_b_e_r
           Specifies the number of registers replicated in second register
           bank on entry to fast interrupt.  Fast interrupts are interrupts
           with the highest priority level P0.  These interrupts save only PC
           and STATUS32 registers to avoid memory transactions during
           interrupt entry and exit sequences.  Use this option when you are
           using fast interrupts in an ARC V2 family processor.  Permitted
           values are 4, 8, 16, and 32.

       --mmllppcc--wwiiddtthh==_w_i_d_t_h
           Specify the width of the "lp_count" register.  Valid values for
           _w_i_d_t_h are 8, 16, 20, 24, 28 and 32 bits.  The default width is
           fixed to 32 bits.  If the width is less than 32, the compiler does
           not attempt to transform loops in your program to use the zero-
           delay loop mechanism unless it is known that the "lp_count"
           register can hold the required loop-counter value.  Depending on
           the width specified, the compiler and run-time library might
           continue to use the loop mechanism for various needs.  This option
           defines macro "__ARC_LPC_WIDTH__" with the value of _w_i_d_t_h.

       --mmrrff1166
           This option instructs the compiler to generate code for a 16-entry
           register file.  This option defines the "__ARC_RF16__" preprocessor
           macro.

       The following options are passed through to the assembler, and also
       define preprocessor macro symbols.

       --mmddsspp--ppaacckkaa
           Passed down to the assembler to enable the DSP Pack A extensions.
           Also sets the preprocessor symbol "__Xdsp_packa".  This option is
           deprecated.

       --mmddvvbbff
           Passed down to the assembler to enable the dual Viterbi butterfly
           extension.  Also sets the preprocessor symbol "__Xdvbf".  This
           option is deprecated.

       --mmlloocckk
           Passed down to the assembler to enable the locked load/store
           conditional extension.  Also sets the preprocessor symbol
           "__Xlock".

       --mmmmaacc--dd1166
           Passed down to the assembler.  Also sets the preprocessor symbol
           "__Xxmac_d16".  This option is deprecated.

       --mmmmaacc--2244
           Passed down to the assembler.  Also sets the preprocessor symbol
           "__Xxmac_24".  This option is deprecated.

       --mmrrttsscc
           Passed down to the assembler to enable the 64-bit time-stamp
           counter extension instruction.  Also sets the preprocessor symbol
           "__Xrtsc".  This option is deprecated.

       --mmsswwaappee
           Passed down to the assembler to enable the swap byte ordering
           extension instruction.  Also sets the preprocessor symbol
           "__Xswape".

       --mmtteelleepphhoonnyy
           Passed down to the assembler to enable dual- and single-operand
           instructions for telephony.  Also sets the preprocessor symbol
           "__Xtelephony".  This option is deprecated.

       --mmxxyy
           Passed down to the assembler to enable the XY memory extension.
           Also sets the preprocessor symbol "__Xxy".

       The following options control how the assembly code is annotated:

       --mmiissiizzee
           Annotate assembler instructions with estimated addresses.

       --mmaannnnoottaattee--aalliiggnn
           Explain what alignment considerations lead to the decision to make
           an instruction short or long.

       The following options are passed through to the linker:

       --mmaarrcclliinnuuxx
           Passed through to the linker, to specify use of the "arclinux"
           emulation.  This option is enabled by default in tool chains built
           for "arc-linux-uclibc" and "arceb-linux-uclibc" targets when
           profiling is not requested.

       --mmaarrcclliinnuuxx__pprrooff
           Passed through to the linker, to specify use of the "arclinux_prof"
           emulation.  This option is enabled by default in tool chains built
           for "arc-linux-uclibc" and "arceb-linux-uclibc" targets when
           profiling is requested.

       The following options control the semantics of generated code:

       --mmlloonngg--ccaallllss
           Generate calls as register indirect calls, thus providing access to
           the full 32-bit address range.

       --mmmmeeddiiuumm--ccaallllss
           Don't use less than 25-bit addressing range for calls, which is the
           offset available for an unconditional branch-and-link instruction.
           Conditional execution of function calls is suppressed, to allow use
           of the 25-bit range, rather than the 21-bit range with conditional
           branch-and-link.  This is the default for tool chains built for
           "arc-linux-uclibc" and "arceb-linux-uclibc" targets.

       --GG _n_u_m
           Put definitions of externally-visible data in a small data section
           if that data is no bigger than _n_u_m bytes.  The default value of _n_u_m
           is 4 for any ARC configuration, or 8 when we have double load/store
           operations.

       --mmnnoo--ssddaattaa
           Do not generate sdata references.  This is the default for tool
           chains built for "arc-linux-uclibc" and "arceb-linux-uclibc"
           targets.

       --mmvvoollaattiillee--ccaacchhee
           Use ordinarily cached memory accesses for volatile references.
           This is the default.

       --mmnnoo--vvoollaattiillee--ccaacchhee
           Enable cache bypass for volatile references.

       The following options fine tune code generation:

       --mmaalliiggnn--ccaallll
           Do alignment optimizations for call instructions.

       --mmaauuttoo--mmooddiiffyy--rreegg
           Enable the use of pre/post modify with register displacement.

       --mmbbbbiitt--ppeeeepphhoollee
           Enable bbit peephole2.

       --mmnnoo--bbrrcccc
           This option disables a target-specific pass in _a_r_c___r_e_o_r_g to
           generate compare-and-branch ("br_c_c_") instructions.  It has no
           effect on generation of these instructions driven by the combiner
           pass.

       --mmccaassee--vveeccttoorr--ppccrreell
           Use PC-relative switch case tables to enable case table shortening.
           This is the default for --OOss.

       --mmccoommppaacctt--ccaasseessii
           Enable compact "casesi" pattern.  This is the default for --OOss, and
           only available for ARCv1 cores.

       --mmnnoo--ccoonndd--eexxeecc
           Disable the ARCompact-specific pass to generate conditional
           execution instructions.

           Due to delay slot scheduling and interactions between operand
           numbers, literal sizes, instruction lengths, and the support for
           conditional execution, the target-independent pass to generate
           conditional execution is often lacking, so the ARC port has kept a
           special pass around that tries to find more conditional execution
           generation opportunities after register allocation, branch
           shortening, and delay slot scheduling have been done.  This pass
           generally, but not always, improves performance and code size, at
           the cost of extra compilation time, which is why there is an option
           to switch it off.  If you have a problem with call instructions
           exceeding their allowable offset range because they are
           conditionalized, you should consider using --mmmmeeddiiuumm--ccaallllss instead.

       --mmeeaarrllyy--ccbbrraanncchhssii
           Enable pre-reload use of the "cbranchsi" pattern.

       --mmeexxppaanndd--aaddddddii
           Expand "adddi3" and "subdi3" at RTL generation time into "add.f",
           "adc" etc.  This option is deprecated.

       --mmiinnddeexxeedd--llooaaddss
           Enable the use of indexed loads.  This can be problematic because
           some optimizers then assume that indexed stores exist, which is not
           the case.

       --mmllrraa
           Enable Local Register Allocation.  This is still experimental for
           ARC, so by default the compiler uses standard reload (i.e.
           --mmnnoo--llrraa).

       --mmllrraa--pprriioorriittyy--nnoonnee
           Don't indicate any priority for target registers.

       --mmllrraa--pprriioorriittyy--ccoommppaacctt
           Indicate target register priority for r0..r3 / r12..r15.

       --mmllrraa--pprriioorriittyy--nnoonnccoommppaacctt
           Reduce target register priority for r0..r3 / r12..r15.

       --mmnnoo--mmiilllliiccooddee
           When optimizing for size (using --OOss), prologues and epilogues that
           have to save or restore a large number of registers are often
           shortened by using call to a special function in libgcc; this is
           referred to as a _m_i_l_l_i_c_o_d_e call.  As these calls can pose
           performance issues, and/or cause linking issues when linking in a
           nonstandard way, this option is provided to turn off millicode call
           generation.

       --mmmmiixxeedd--ccooddee
           Tweak register allocation to help 16-bit instruction generation.
           This generally has the effect of decreasing the average instruction
           size while increasing the instruction count.

       --mmqq--ccllaassss
           Enable qq instruction alternatives.  This is the default for --OOss.

       --mmRRccqq
           Enable RRccqq constraint handling.  Most short code generation depends
           on this.  This is the default.

       --mmRRccww
           Enable RRccww constraint handling.  Most ccfsm condexec mostly depends
           on this.  This is the default.

       --mmssiizzee--lleevveell==_l_e_v_e_l
           Fine-tune size optimization with regards to instruction lengths and
           alignment.  The recognized values for _l_e_v_e_l are:

           00   No size optimization.  This level is deprecated and treated
               like 11.

           11   Short instructions are used opportunistically.

           22   In addition, alignment of loops and of code after barriers are
               dropped.

           33   In addition, optional data alignment is dropped, and the option
               OOss is enabled.

           This defaults to 33 when --OOss is in effect.  Otherwise, the behavior
           when this is not set is equivalent to level 11.

       --mmttuunnee==_c_p_u
           Set instruction scheduling parameters for _c_p_u, overriding any
           implied by --mmccppuu==.

           Supported values for _c_p_u are

           AARRCC660000
               Tune for ARC600 CPU.

           AARRCC660011
               Tune for ARC601 CPU.

           AARRCC770000
               Tune for ARC700 CPU with standard multiplier block.

           AARRCC770000--xxmmaacc
               Tune for ARC700 CPU with XMAC block.

           AARRCC772255DD
               Tune for ARC725D CPU.

           AARRCC775500DD
               Tune for ARC750D CPU.

       --mmmmuullttccoosstt==_n_u_m
           Cost to assume for a multiply instruction, with 44 being equal to a
           normal instruction.

       --mmuunnaalliiggnn--pprroobb--tthhrreesshhoolldd==_p_r_o_b_a_b_i_l_i_t_y
           Set probability threshold for unaligning branches.  When tuning for
           AARRCC770000 and optimizing for speed, branches without filled delay slot
           are preferably emitted unaligned and long, unless profiling
           indicates that the probability for the branch to be taken is below
           _p_r_o_b_a_b_i_l_i_t_y.  The default is (REG_BR_PROB_BASE/2), i.e. 5000.

       The following options are maintained for backward compatibility, but
       are now deprecated and will be removed in a future release:

       --mmaarrggoonnaauutt
           Obsolete FPX.

       --mmbbiigg--eennddiiaann
       --EEBB Compile code for big-endian targets.  Use of these options is now
           deprecated.  Big-endian code is supported by configuring GCC to
           build "arceb-elf32" and "arceb-linux-uclibc" targets, for which big
           endian is the default.

       --mmlliittttllee--eennddiiaann
       --EELL Compile code for little-endian targets.  Use of these options is
           now deprecated.  Little-endian code is supported by configuring GCC
           to build "arc-elf32" and "arc-linux-uclibc" targets, for which
           little endian is the default.

       --mmbbaarrrreell__sshhiifftteerr
           Replaced by --mmbbaarrrreell--sshhiifftteerr.

       --mmddppffpp__ccoommppaacctt
           Replaced by --mmddppffpp--ccoommppaacctt.

       --mmddppffpp__ffaasstt
           Replaced by --mmddppffpp--ffaasstt.

       --mmddsspp__ppaacckkaa
           Replaced by --mmddsspp--ppaacckkaa.

       --mmEEAA
           Replaced by --mmeeaa.

       --mmmmaacc__2244
           Replaced by --mmmmaacc--2244.

       --mmmmaacc__dd1166
           Replaced by --mmmmaacc--dd1166.

       --mmssppffpp__ccoommppaacctt
           Replaced by --mmssppffpp--ccoommppaacctt.

       --mmssppffpp__ffaasstt
           Replaced by --mmssppffpp--ffaasstt.

       --mmttuunnee==_c_p_u
           Values aarrcc660000, aarrcc660011, aarrcc770000 and aarrcc770000--xxmmaacc for _c_p_u are replaced
           by AARRCC660000, AARRCC660011, AARRCC770000 and AARRCC770000--xxmmaacc respectively.

       --mmuullttccoosstt==_n_u_m
           Replaced by --mmmmuullttccoosstt.

       _A_R_M _O_p_t_i_o_n_s

       These --mm options are defined for the ARM port:

       --mmaabbii==_n_a_m_e
           Generate code for the specified ABI.  Permissible values are: aappccss--
           ggnnuu, aattppccss, aaaappccss, aaaappccss--lliinnuuxx and iiwwmmmmxxtt.

       --mmaappccss--ffrraammee
           Generate a stack frame that is compliant with the ARM Procedure
           Call Standard for all functions, even if this is not strictly
           necessary for correct execution of the code.  Specifying
           --ffoommiitt--ffrraammee--ppooiinntteerr with this option causes the stack frames not
           to be generated for leaf functions.  The default is
           --mmnnoo--aappccss--ffrraammee.  This option is deprecated.

       --mmaappccss
           This is a synonym for --mmaappccss--ffrraammee and is deprecated.

       --mmtthhuummbb--iinntteerrwwoorrkk
           Generate code that supports calling between the ARM and Thumb
           instruction sets.  Without this option, on pre-v5 architectures,
           the two instruction sets cannot be reliably used inside one
           program.  The default is --mmnnoo--tthhuummbb--iinntteerrwwoorrkk, since slightly
           larger code is generated when --mmtthhuummbb--iinntteerrwwoorrkk is specified.  In
           AAPCS configurations this option is meaningless.

       --mmnnoo--sscchheedd--pprroolloogg
           Prevent the reordering of instructions in the function prologue, or
           the merging of those instruction with the instructions in the
           function's body.  This means that all functions start with a
           recognizable set of instructions (or in fact one of a choice from a
           small set of different function prologues), and this information
           can be used to locate the start of functions inside an executable
           piece of code.  The default is --mmsscchheedd--pprroolloogg.

       --mmffllooaatt--aabbii==_n_a_m_e
           Specifies which floating-point ABI to use.  Permissible values are:
           ssoofftt, ssooffttffpp and hhaarrdd.

           Specifying ssoofftt causes GCC to generate output containing library
           calls for floating-point operations.  ssooffttffpp allows the generation
           of code using hardware floating-point instructions, but still uses
           the soft-float calling conventions.  hhaarrdd allows generation of
           floating-point instructions and uses FPU-specific calling
           conventions.

           The default depends on the specific target configuration.  Note
           that the hard-float and soft-float ABIs are not link-compatible;
           you must compile your entire program with the same ABI, and link
           with a compatible set of libraries.

       --mmlliittttllee--eennddiiaann
           Generate code for a processor running in little-endian mode.  This
           is the default for all standard configurations.

       --mmbbiigg--eennddiiaann
           Generate code for a processor running in big-endian mode; the
           default is to compile code for a little-endian processor.

       --mmbbee88
       --mmbbee3322
           When linking a big-endian image select between BE8 and BE32
           formats.  The option has no effect for little-endian images and is
           ignored.  The default is dependent on the selected target
           architecture.  For ARMv6 and later architectures the default is
           BE8, for older architectures the default is BE32.  BE32 format has
           been deprecated by ARM.

       --mmaarrcchh==_n_a_m_e[++eexxtteennssiioonn......]
           This specifies the name of the target ARM architecture.  GCC uses
           this name to determine what kind of instructions it can emit when
           generating assembly code.  This option can be used in conjunction
           with or instead of the --mmccppuu== option.

           Permissible names are: aarrmmvv44tt, aarrmmvv55tt, aarrmmvv55ttee, aarrmmvv66, aarrmmvv66jj,
           aarrmmvv66kk, aarrmmvv66kkzz, aarrmmvv66tt22, aarrmmvv66zz, aarrmmvv66zzkk, aarrmmvv77, aarrmmvv77--aa, aarrmmvv77vvee,
           aarrmmvv88--aa, aarrmmvv88..11--aa, aarrmmvv88..22--aa, aarrmmvv88..33--aa, aarrmmvv88..44--aa, aarrmmvv77--rr,
           aarrmmvv88--rr, aarrmmvv66--mm, aarrmmvv66ss--mm, aarrmmvv77--mm, aarrmmvv77ee--mm, aarrmmvv88--mm..bbaassee,
           aarrmmvv88--mm..mmaaiinn, iiwwmmmmxxtt and iiwwmmmmxxtt22.

           Additionally, the following architectures, which lack support for
           the Thumb execution state, are recognized but support is
           deprecated: aarrmmvv22, aarrmmvv22aa, aarrmmvv33, aarrmmvv33mm, aarrmmvv44, aarrmmvv55 and aarrmmvv55ee.

           Many of the architectures support extensions.  These can be added
           by appending ++_e_x_t_e_n_s_i_o_n to the architecture name.  Extension
           options are processed in order and capabilities accumulate.  An
           extension will also enable any necessary base extensions upon which
           it depends.  For example, the ++ccrryyppttoo extension will always enable
           the ++ssiimmdd extension.  The exception to the additive construction is
           for extensions that are prefixed with ++nnoo......: these extensions
           disable the specified option and any other extensions that may
           depend on the presence of that extension.

           For example, --mmaarrcchh==aarrmmvv77--aa++ssiimmdd++nnooffpp++vvffppvv44 is equivalent to
           writing --mmaarrcchh==aarrmmvv77--aa++vvffppvv44 since the ++ssiimmdd option is entirely
           disabled by the ++nnooffpp option that follows it.

           Most extension names are generically named, but have an effect that
           is dependent upon the architecture to which it is applied.  For
           example, the ++ssiimmdd option can be applied to both aarrmmvv77--aa and
           aarrmmvv88--aa architectures, but will enable the original ARMv7-A
           Advanced SIMD (Neon) extensions for aarrmmvv77--aa and the ARMv8-A variant
           for aarrmmvv88--aa.

           The table below lists the supported extensions for each
           architecture.  Architectures not mentioned do not support any
           extensions.

           aarrmmvv55ee
           aarrmmvv55ttee
           aarrmmvv66
           aarrmmvv66jj
           aarrmmvv66kk
           aarrmmvv66kkzz
           aarrmmvv66tt22
           aarrmmvv66zz
           aarrmmvv66zzkk
               ++ffpp The VFPv2 floating-point instructions.  The extension
                   ++vvffppvv22 can be used as an alias for this extension.

               ++nnooffpp
                   Disable the floating-point instructions.

           aarrmmvv77
               The common subset of the ARMv7-A, ARMv7-R and ARMv7-M
               architectures.

               ++ffpp The VFPv3 floating-point instructions, with 16 double-
                   precision registers.  The extension ++vvffppvv33--dd1166 can be used
                   as an alias for this extension.  Note that floating-point
                   is not supported by the base ARMv7-M architecture, but is
                   compatible with both the ARMv7-A and ARMv7-R architectures.

               ++nnooffpp
                   Disable the floating-point instructions.

           aarrmmvv77--aa
               ++mmpp The multiprocessing extension.

               ++sseecc
                   The security extension.

               ++ffpp The VFPv3 floating-point instructions, with 16 double-
                   precision registers.  The extension ++vvffppvv33--dd1166 can be used
                   as an alias for this extension.

               ++ssiimmdd
                   The Advanced SIMD (Neon) v1 and the VFPv3 floating-point
                   instructions.  The extensions ++nneeoonn and ++nneeoonn--vvffppvv33 can be
                   used as aliases for this extension.

               ++vvffppvv33
                   The VFPv3 floating-point instructions, with 32 double-
                   precision registers.

               ++vvffppvv33--dd1166--ffpp1166
                   The VFPv3 floating-point instructions, with 16 double-
                   precision registers and the half-precision floating-point
                   conversion operations.

               ++vvffppvv33--ffpp1166
                   The VFPv3 floating-point instructions, with 32 double-
                   precision registers and the half-precision floating-point
                   conversion operations.

               ++vvffppvv44--dd1166
                   The VFPv4 floating-point instructions, with 16 double-
                   precision registers.

               ++vvffppvv44
                   The VFPv4 floating-point instructions, with 32 double-
                   precision registers.

               ++nneeoonn--ffpp1166
                   The Advanced SIMD (Neon) v1 and the VFPv3 floating-point
                   instructions, with the half-precision floating-point
                   conversion operations.

               ++nneeoonn--vvffppvv44
                   The Advanced SIMD (Neon) v2 and the VFPv4 floating-point
                   instructions.

               ++nnoossiimmdd
                   Disable the Advanced SIMD instructions (does not disable
                   floating point).

               ++nnooffpp
                   Disable the floating-point and Advanced SIMD instructions.

           aarrmmvv77vvee
               The extended version of the ARMv7-A architecture with support
               for virtualization.

               ++ffpp The VFPv4 floating-point instructions, with 16 double-
                   precision registers.  The extension ++vvffppvv44--dd1166 can be used
                   as an alias for this extension.

               ++ssiimmdd
                   The Advanced SIMD (Neon) v2 and the VFPv4 floating-point
                   instructions.  The extension ++nneeoonn--vvffppvv44 can be used as an
                   alias for this extension.

               ++vvffppvv33--dd1166
                   The VFPv3 floating-point instructions, with 16 double-
                   precision registers.

               ++vvffppvv33
                   The VFPv3 floating-point instructions, with 32 double-
                   precision registers.

               ++vvffppvv33--dd1166--ffpp1166
                   The VFPv3 floating-point instructions, with 16 double-
                   precision registers and the half-precision floating-point
                   conversion operations.

               ++vvffppvv33--ffpp1166
                   The VFPv3 floating-point instructions, with 32 double-
                   precision registers and the half-precision floating-point
                   conversion operations.

               ++vvffppvv44--dd1166
                   The VFPv4 floating-point instructions, with 16 double-
                   precision registers.

               ++vvffppvv44
                   The VFPv4 floating-point instructions, with 32 double-
                   precision registers.

               ++nneeoonn
                   The Advanced SIMD (Neon) v1 and the VFPv3 floating-point
                   instructions.  The extension ++nneeoonn--vvffppvv33 can be used as an
                   alias for this extension.

               ++nneeoonn--ffpp1166
                   The Advanced SIMD (Neon) v1 and the VFPv3 floating-point
                   instructions, with the half-precision floating-point
                   conversion operations.

               ++nnoossiimmdd
                   Disable the Advanced SIMD instructions (does not disable
                   floating point).

               ++nnooffpp
                   Disable the floating-point and Advanced SIMD instructions.

           aarrmmvv88--aa
               ++ccrrcc
                   The Cyclic Redundancy Check (CRC) instructions.

               ++ssiimmdd
                   The ARMv8-A Advanced SIMD and floating-point instructions.

               ++ccrryyppttoo
                   The cryptographic instructions.

               ++nnooccrryyppttoo
                   Disable the cryptographic instructions.

               ++nnooffpp
                   Disable the floating-point, Advanced SIMD and cryptographic
                   instructions.

           aarrmmvv88..11--aa
               ++ssiimmdd
                   The ARMv8.1-A Advanced SIMD and floating-point
                   instructions.

               ++ccrryyppttoo
                   The cryptographic instructions.  This also enables the
                   Advanced SIMD and floating-point instructions.

               ++nnooccrryyppttoo
                   Disable the cryptographic instructions.

               ++nnooffpp
                   Disable the floating-point, Advanced SIMD and cryptographic
                   instructions.

           aarrmmvv88..22--aa
           aarrmmvv88..33--aa
               ++ffpp1166
                   The half-precision floating-point data processing
                   instructions.  This also enables the Advanced SIMD and
                   floating-point instructions.

               ++ffpp1166ffmmll
                   The half-precision floating-point fmla extension.  This
                   also enables the half-precision floating-point extension
                   and Advanced SIMD and floating-point instructions.

               ++ssiimmdd
                   The ARMv8.1-A Advanced SIMD and floating-point
                   instructions.

               ++ccrryyppttoo
                   The cryptographic instructions.  This also enables the
                   Advanced SIMD and floating-point instructions.

               ++ddoottpprroodd
                   Enable the Dot Product extension.  This also enables
                   Advanced SIMD instructions.

               ++nnooccrryyppttoo
                   Disable the cryptographic extension.

               ++nnooffpp
                   Disable the floating-point, Advanced SIMD and cryptographic
                   instructions.

           aarrmmvv88..44--aa
               ++ffpp1166
                   The half-precision floating-point data processing
                   instructions.  This also enables the Advanced SIMD and
                   floating-point instructions as well as the Dot Product
                   extension and the half-precision floating-point fmla
                   extension.

               ++ssiimmdd
                   The ARMv8.3-A Advanced SIMD and floating-point instructions
                   as well as the Dot Product extension.

               ++ccrryyppttoo
                   The cryptographic instructions.  This also enables the
                   Advanced SIMD and floating-point instructions as well as
                   the Dot Product extension.

               ++nnooccrryyppttoo
                   Disable the cryptographic extension.

               ++nnooffpp
                   Disable the floating-point, Advanced SIMD and cryptographic
                   instructions.

           aarrmmvv77--rr
               ++ffpp..sspp
                   The single-precision VFPv3 floating-point instructions.
                   The extension ++vvffppvv33xxdd can be used as an alias for this
                   extension.

               ++ffpp The VFPv3 floating-point instructions with 16 double-
                   precision registers.  The extension +vfpv3-d16 can be used
                   as an alias for this extension.

               ++vvffppvv33xxdd--dd1166--ffpp1166
                   The single-precision VFPv3 floating-point instructions with
                   16 double-precision registers and the half-precision
                   floating-point conversion operations.

               ++vvffppvv33--dd1166--ffpp1166
                   The VFPv3 floating-point instructions, with 16 double-
                   precision registers and the half-precision floating-point
                   conversion operations.

               ++nnooffpp
                   Disable the floating-point extension.

               ++iiddiivv
                   The ARM-state integer division instructions.

               ++nnooiiddiivv
                   Disable the ARM-state integer division extension.

           aarrmmvv77ee--mm
               ++ffpp The single-precision VFPv4 floating-point instructions.

               ++ffppvv55
                   The single-precision FPv5 floating-point instructions.

               ++ffpp..ddpp
                   The single- and double-precision FPv5 floating-point
                   instructions.

               ++nnooffpp
                   Disable the floating-point extensions.

           aarrmmvv88--mm..mmaaiinn
               ++ddsspp
                   The DSP instructions.

               ++nnooddsspp
                   Disable the DSP extension.

               ++ffpp The single-precision floating-point instructions.

               ++ffpp..ddpp
                   The single- and double-precision floating-point
                   instructions.

               ++nnooffpp
                   Disable the floating-point extension.

           aarrmmvv88--rr
               ++ccrrcc
                   The Cyclic Redundancy Check (CRC) instructions.

               ++ffpp..sspp
                   The single-precision FPv5 floating-point instructions.

               ++ssiimmdd
                   The ARMv8-A Advanced SIMD and floating-point instructions.

               ++ccrryyppttoo
                   The cryptographic instructions.

               ++nnooccrryyppttoo
                   Disable the cryptographic instructions.

               ++nnooffpp
                   Disable the floating-point, Advanced SIMD and cryptographic
                   instructions.

           --mmaarrcchh==nnaattiivvee causes the compiler to auto-detect the architecture
           of the build computer.  At present, this feature is only supported
           on GNU/Linux, and not all architectures are recognized.  If the
           auto-detect is unsuccessful the option has no effect.

       --mmttuunnee==_n_a_m_e
           This option specifies the name of the target ARM processor for
           which GCC should tune the performance of the code.  For some ARM
           implementations better performance can be obtained by using this
           option.  Permissible names are: aarrmm22, aarrmm225500, aarrmm33, aarrmm66, aarrmm6600,
           aarrmm660000, aarrmm661100, aarrmm662200, aarrmm77, aarrmm77mm, aarrmm77dd, aarrmm77ddmm, aarrmm77ddii,
           aarrmm77ddmmii, aarrmm7700, aarrmm770000, aarrmm770000ii, aarrmm771100, aarrmm771100cc, aarrmm77110000, aarrmm772200,
           aarrmm77550000, aarrmm77550000ffee, aarrmm77ttddmmii, aarrmm77ttddmmii--ss, aarrmm771100tt, aarrmm772200tt,
           aarrmm774400tt, ssttrroonnggaarrmm, ssttrroonnggaarrmm111100, ssttrroonnggaarrmm11110000, ssttrroonnggaarrmm11111100,
           aarrmm88, aarrmm881100, aarrmm99, aarrmm99ee, aarrmm992200, aarrmm992200tt, aarrmm992222tt, aarrmm994466ee--ss,
           aarrmm996666ee--ss, aarrmm996688ee--ss, aarrmm992266eejj--ss, aarrmm994400tt, aarrmm99ttddmmii, aarrmm1100ttddmmii,
           aarrmm11002200tt, aarrmm11002266eejj--ss, aarrmm1100ee, aarrmm11002200ee, aarrmm11002222ee, aarrmm11113366jj--ss,
           aarrmm11113366jjff--ss, mmppccoorree, mmppccoorreennoovvffpp, aarrmm11115566tt22--ss, aarrmm11115566tt22ff--ss,
           aarrmm11117766jjzz--ss, aarrmm11117766jjzzff--ss, ggeenneerriicc--aarrmmvv77--aa, ccoorrtteexx--aa55, ccoorrtteexx--aa77,
           ccoorrtteexx--aa88, ccoorrtteexx--aa99, ccoorrtteexx--aa1122, ccoorrtteexx--aa1155, ccoorrtteexx--aa1177,
           ccoorrtteexx--aa3322, ccoorrtteexx--aa3355, ccoorrtteexx--aa5533, ccoorrtteexx--aa5555, ccoorrtteexx--aa5577,
           ccoorrtteexx--aa7722, ccoorrtteexx--aa7733, ccoorrtteexx--aa7755, ccoorrtteexx--rr44, ccoorrtteexx--rr44ff,
           ccoorrtteexx--rr55, ccoorrtteexx--rr77, ccoorrtteexx--rr88, ccoorrtteexx--rr5522, ccoorrtteexx--mm3333,
           ccoorrtteexx--mm2233, ccoorrtteexx--mm77, ccoorrtteexx--mm44, ccoorrtteexx--mm33, ccoorrtteexx--mm11, ccoorrtteexx--mm00,
           ccoorrtteexx--mm00pplluuss, ccoorrtteexx--mm11..ssmmaallll--mmuullttiippllyy, ccoorrtteexx--mm00..ssmmaallll--mmuullttiippllyy,
           ccoorrtteexx--mm00pplluuss..ssmmaallll--mmuullttiippllyy, eexxyynnooss--mm11, mmaarrvveellll--ppjj44, xxssccaallee,
           iiwwmmmmxxtt, iiwwmmmmxxtt22, eepp99331122, ffaa552266, ffaa662266, ffaa660066ttee, ffaa662266ttee, ffmmpp662266,
           ffaa772266ttee, xxggeennee11.

           Additionally, this option can specify that GCC should tune the
           performance of the code for a big.LITTLE system.  Permissible names
           are: ccoorrtteexx--aa1155..ccoorrtteexx--aa77, ccoorrtteexx--aa1177..ccoorrtteexx--aa77,
           ccoorrtteexx--aa5577..ccoorrtteexx--aa5533, ccoorrtteexx--aa7722..ccoorrtteexx--aa5533,
           ccoorrtteexx--aa7722..ccoorrtteexx--aa3355, ccoorrtteexx--aa7733..ccoorrtteexx--aa5533,
           ccoorrtteexx--aa7755..ccoorrtteexx--aa5555.

           --mmttuunnee==ggeenneerriicc--_a_r_c_h specifies that GCC should tune the performance
           for a blend of processors within architecture _a_r_c_h.  The aim is to
           generate code that run well on the current most popular processors,
           balancing between optimizations that benefit some CPUs in the
           range, and avoiding performance pitfalls of other CPUs.  The
           effects of this option may change in future GCC versions as CPU
           models come and go.

           --mmttuunnee permits the same extension options as --mmccppuu, but the
           extension options do not affect the tuning of the generated code.

           --mmttuunnee==nnaattiivvee causes the compiler to auto-detect the CPU of the
           build computer.  At present, this feature is only supported on
           GNU/Linux, and not all architectures are recognized.  If the auto-
           detect is unsuccessful the option has no effect.

       --mmccppuu==_n_a_m_e[++eexxtteennssiioonn......]
           This specifies the name of the target ARM processor.  GCC uses this
           name to derive the name of the target ARM architecture (as if
           specified by --mmaarrcchh) and the ARM processor type for which to tune
           for performance (as if specified by --mmttuunnee).  Where this option is
           used in conjunction with --mmaarrcchh or --mmttuunnee, those options take
           precedence over the appropriate part of this option.

           Many of the supported CPUs implement optional architectural
           extensions.  Where this is so the architectural extensions are
           normally enabled by default.  If implementations that lack the
           extension exist, then the extension syntax can be used to disable
           those extensions that have been omitted.  For floating-point and
           Advanced SIMD (Neon) instructions, the settings of the options
           --mmffllooaatt--aabbii and --mmffppuu must also be considered: floating-point and
           Advanced SIMD instructions will only be used if --mmffllooaatt--aabbii is not
           set to ssoofftt; and any setting of --mmffppuu other than aauuttoo will override
           the available floating-point and SIMD extension instructions.

           For example, ccoorrtteexx--aa99 can be found in three major configurations:
           integer only, with just a floating-point unit or with floating-
           point and Advanced SIMD.  The default is to enable all the
           instructions, but the extensions ++nnoossiimmdd and ++nnooffpp can be used to
           disable just the SIMD or both the SIMD and floating-point
           instructions respectively.

           Permissible names for this option are the same as those for --mmttuunnee.

           The following extension options are common to the listed CPUs:

           ++nnooddsspp
               Disable the DSP instructions on ccoorrtteexx--mm3333.

           ++nnooffpp
               Disables the floating-point instructions on aarrmm99ee, aarrmm994466ee--ss,
               aarrmm996666ee--ss, aarrmm996688ee--ss, aarrmm1100ee, aarrmm11002200ee, aarrmm11002222ee, aarrmm992266eejj--ss,
               aarrmm11002266eejj--ss, ccoorrtteexx--rr55, ccoorrtteexx--rr77, ccoorrtteexx--rr88, ccoorrtteexx--mm44,
               ccoorrtteexx--mm77 and ccoorrtteexx--mm3333.  Disables the floating-point and SIMD
               instructions on ggeenneerriicc--aarrmmvv77--aa, ccoorrtteexx--aa55, ccoorrtteexx--aa77,
               ccoorrtteexx--aa88, ccoorrtteexx--aa99, ccoorrtteexx--aa1122, ccoorrtteexx--aa1155, ccoorrtteexx--aa1177,
               ccoorrtteexx--aa1155..ccoorrtteexx--aa77, ccoorrtteexx--aa1177..ccoorrtteexx--aa77, ccoorrtteexx--aa3322,
               ccoorrtteexx--aa3355, ccoorrtteexx--aa5533 and ccoorrtteexx--aa5555.

           ++nnooffpp..ddpp
               Disables the double-precision component of the floating-point
               instructions on ccoorrtteexx--rr55, ccoorrtteexx--rr77, ccoorrtteexx--rr88, ccoorrtteexx--rr5522 and
               ccoorrtteexx--mm77.

           ++nnoossiimmdd
               Disables the SIMD (but not floating-point) instructions on
               ggeenneerriicc--aarrmmvv77--aa, ccoorrtteexx--aa55, ccoorrtteexx--aa77 and ccoorrtteexx--aa99.

           ++ccrryyppttoo
               Enables the cryptographic instructions on ccoorrtteexx--aa3322,
               ccoorrtteexx--aa3355, ccoorrtteexx--aa5533, ccoorrtteexx--aa5555, ccoorrtteexx--aa5577, ccoorrtteexx--aa7722,
               ccoorrtteexx--aa7733, ccoorrtteexx--aa7755, eexxyynnooss--mm11, xxggeennee11,
               ccoorrtteexx--aa5577..ccoorrtteexx--aa5533, ccoorrtteexx--aa7722..ccoorrtteexx--aa5533,
               ccoorrtteexx--aa7733..ccoorrtteexx--aa3355, ccoorrtteexx--aa7733..ccoorrtteexx--aa5533 and
               ccoorrtteexx--aa7755..ccoorrtteexx--aa5555.

           Additionally the ggeenneerriicc--aarrmmvv77--aa pseudo target defaults to VFPv3
           with 16 double-precision registers.  It supports the following
           extension options: mmpp, sseecc, vvffppvv33--dd1166, vvffppvv33, vvffppvv33--dd1166--ffpp1166,
           vvffppvv33--ffpp1166, vvffppvv44--dd1166, vvffppvv44, nneeoonn, nneeoonn--vvffppvv33, nneeoonn--ffpp1166,
           nneeoonn--vvffppvv44.  The meanings are the same as for the extensions to
           --mmaarrcchh==aarrmmvv77--aa.

           --mmccppuu==ggeenneerriicc--_a_r_c_h is also permissible, and is equivalent to
           --mmaarrcchh==_a_r_c_h --mmttuunnee==ggeenneerriicc--_a_r_c_h.  See --mmttuunnee for more information.

           --mmccppuu==nnaattiivvee causes the compiler to auto-detect the CPU of the
           build computer.  At present, this feature is only supported on
           GNU/Linux, and not all architectures are recognized.  If the auto-
           detect is unsuccessful the option has no effect.

       --mmffppuu==_n_a_m_e
           This specifies what floating-point hardware (or hardware emulation)
           is available on the target.  Permissible names are: aauuttoo, vvffppvv22,
           vvffppvv33, vvffppvv33--ffpp1166, vvffppvv33--dd1166, vvffppvv33--dd1166--ffpp1166, vvffppvv33xxdd,
           vvffppvv33xxdd--ffpp1166, nneeoonn--vvffppvv33, nneeoonn--ffpp1166, vvffppvv44, vvffppvv44--dd1166, ffppvv44--sspp--dd1166,
           nneeoonn--vvffppvv44, ffppvv55--dd1166, ffppvv55--sspp--dd1166, ffpp--aarrmmvv88, nneeoonn--ffpp--aarrmmvv88 and
           ccrryyppttoo--nneeoonn--ffpp--aarrmmvv88.  Note that nneeoonn is an alias for nneeoonn--vvffppvv33
           and vvffpp is an alias for vvffppvv22.

           The setting aauuttoo is the default and is special.  It causes the
           compiler to select the floating-point and Advanced SIMD
           instructions based on the settings of --mmccppuu and --mmaarrcchh.

           If the selected floating-point hardware includes the NEON extension
           (e.g. --mmffppuu==nneeoonn), note that floating-point operations are not
           generated by GCC's auto-vectorization pass unless
           --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss is also specified.  This is because
           NEON hardware does not fully implement the IEEE 754 standard for
           floating-point arithmetic (in particular denormal values are
           treated as zero), so the use of NEON instructions may lead to a
           loss of precision.

           You can also set the fpu name at function level by using the
           "target("fpu=")" function attributes or pragmas.

       --mmffpp1166--ffoorrmmaatt==_n_a_m_e
           Specify the format of the "__fp16" half-precision floating-point
           type.  Permissible names are nnoonnee, iieeeeee, and aalltteerrnnaattiivvee; the
           default is nnoonnee, in which case the "__fp16" type is not defined.

       --mmssttrruuccttuurree--ssiizzee--bboouunnddaarryy==_n
           The sizes of all structures and unions are rounded up to a multiple
           of the number of bits set by this option.  Permissible values are
           8, 32 and 64.  The default value varies for different toolchains.
           For the COFF targeted toolchain the default value is 8.  A value of
           64 is only allowed if the underlying ABI supports it.

           Specifying a larger number can produce faster, more efficient code,
           but can also increase the size of the program.  Different values
           are potentially incompatible.  Code compiled with one value cannot
           necessarily expect to work with code or libraries compiled with
           another value, if they exchange information using structures or
           unions.

           This option is deprecated.

       --mmaabboorrtt--oonn--nnoorreettuurrnn
           Generate a call to the function "abort" at the end of a "noreturn"
           function.  It is executed if the function tries to return.

       --mmlloonngg--ccaallllss
       --mmnnoo--lloonngg--ccaallllss
           Tells the compiler to perform function calls by first loading the
           address of the function into a register and then performing a
           subroutine call on this register.  This switch is needed if the
           target function lies outside of the 64-megabyte addressing range of
           the offset-based version of subroutine call instruction.

           Even if this switch is enabled, not all function calls are turned
           into long calls.  The heuristic is that static functions, functions
           that have the "short_call" attribute, functions that are inside the
           scope of a "#pragma no_long_calls" directive, and functions whose
           definitions have already been compiled within the current
           compilation unit are not turned into long calls.  The exceptions to
           this rule are that weak function definitions, functions with the
           "long_call" attribute or the "section" attribute, and functions
           that are within the scope of a "#pragma long_calls" directive are
           always turned into long calls.

           This feature is not enabled by default.  Specifying --mmnnoo--lloonngg--ccaallllss
           restores the default behavior, as does placing the function calls
           within the scope of a "#pragma long_calls_off" directive.  Note
           these switches have no effect on how the compiler generates code to
           handle function calls via function pointers.

       --mmssiinnggllee--ppiicc--bbaassee
           Treat the register used for PIC addressing as read-only, rather
           than loading it in the prologue for each function.  The runtime
           system is responsible for initializing this register with an
           appropriate value before execution begins.

       --mmppiicc--rreeggiisstteerr==_r_e_g
           Specify the register to be used for PIC addressing.  For standard
           PIC base case, the default is any suitable register determined by
           compiler.  For single PIC base case, the default is RR99 if target is
           EABI based or stack-checking is enabled, otherwise the default is
           RR1100.

       --mmppiicc--ddaattaa--iiss--tteexxtt--rreellaattiivvee
           Assume that the displacement between the text and data segments is
           fixed at static link time.  This permits using PC-relative
           addressing operations to access data known to be in the data
           segment.  For non-VxWorks RTP targets, this option is enabled by
           default.  When disabled on such targets, it will enable
           --mmssiinnggllee--ppiicc--bbaassee by default.

       --mmppookkee--ffuunnccttiioonn--nnaammee
           Write the name of each function into the text section, directly
           preceding the function prologue.  The generated code is similar to
           this:

                        t0
                            .ascii "arm_poke_function_name", 0
                            .align
                        t1
                            .word 0xff000000 + (t1 - t0)
                        arm_poke_function_name
                            mov     ip, sp
                            stmfd   sp!, {fp, ip, lr, pc}
                            sub     fp, ip, #4

           When performing a stack backtrace, code can inspect the value of
           "pc" stored at "fp + 0".  If the trace function then looks at
           location "pc - 12" and the top 8 bits are set, then we know that
           there is a function name embedded immediately preceding this
           location and has length "((pc[-3]) & 0xff000000)".

       --mmtthhuummbb
       --mmaarrmm
           Select between generating code that executes in ARM and Thumb
           states.  The default for most configurations is to generate code
           that executes in ARM state, but the default can be changed by
           configuring GCC with the ----wwiitthh--mmooddee==_s_t_a_t_e configure option.

           You can also override the ARM and Thumb mode for each function by
           using the "target("thumb")" and "target("arm")" function attributes
           or pragmas.

       --mmfflliipp--tthhuummbb
           Switch ARM/Thumb modes on alternating functions.  This option is
           provided for regression testing of mixed Thumb/ARM code generation,
           and is not intended for ordinary use in compiling code.

       --mmttppccss--ffrraammee
           Generate a stack frame that is compliant with the Thumb Procedure
           Call Standard for all non-leaf functions.  (A leaf function is one
           that does not call any other functions.)  The default is
           --mmnnoo--ttppccss--ffrraammee.

       --mmttppccss--lleeaaff--ffrraammee
           Generate a stack frame that is compliant with the Thumb Procedure
           Call Standard for all leaf functions.  (A leaf function is one that
           does not call any other functions.)  The default is
           --mmnnoo--aappccss--lleeaaff--ffrraammee.

       --mmccaalllleeee--ssuuppeerr--iinntteerrwwoorrkkiinngg
           Gives all externally visible functions in the file being compiled
           an ARM instruction set header which switches to Thumb mode before
           executing the rest of the function.  This allows these functions to
           be called from non-interworking code.  This option is not valid in
           AAPCS configurations because interworking is enabled by default.

       --mmccaalllleerr--ssuuppeerr--iinntteerrwwoorrkkiinngg
           Allows calls via function pointers (including virtual functions) to
           execute correctly regardless of whether the target code has been
           compiled for interworking or not.  There is a small overhead in the
           cost of executing a function pointer if this option is enabled.
           This option is not valid in AAPCS configurations because
           interworking is enabled by default.

       --mmttpp==_n_a_m_e
           Specify the access model for the thread local storage pointer.  The
           valid models are ssoofftt, which generates calls to "__aeabi_read_tp",
           ccpp1155, which fetches the thread pointer from "cp15" directly
           (supported in the arm6k architecture), and aauuttoo, which uses the
           best available method for the selected processor.  The default
           setting is aauuttoo.

       --mmttllss--ddiiaalleecctt==_d_i_a_l_e_c_t
           Specify the dialect to use for accessing thread local storage.  Two
           _d_i_a_l_e_c_ts are supported---ggnnuu and ggnnuu22.  The ggnnuu dialect selects the
           original GNU scheme for supporting local and global dynamic TLS
           models.  The ggnnuu22 dialect selects the GNU descriptor scheme, which
           provides better performance for shared libraries.  The GNU
           descriptor scheme is compatible with the original scheme, but does
           require new assembler, linker and library support.  Initial and
           local exec TLS models are unaffected by this option and always use
           the original scheme.

       --mmwwoorrdd--rreellooccaattiioonnss
           Only generate absolute relocations on word-sized values (i.e.
           R_ARM_ABS32).  This is enabled by default on targets (uClinux,
           SymbianOS) where the runtime loader imposes this restriction, and
           when --ffppiicc or --ffPPIICC is specified.

       --mmffiixx--ccoorrtteexx--mm33--llddrrdd
           Some Cortex-M3 cores can cause data corruption when "ldrd"
           instructions with overlapping destination and base registers are
           used.  This option avoids generating these instructions.  This
           option is enabled by default when --mmccppuu==ccoorrtteexx--mm33 is specified.

       --mmuunnaalliiggnneedd--aacccceessss
       --mmnnoo--uunnaalliiggnneedd--aacccceessss
           Enables (or disables) reading and writing of 16- and 32- bit values
           from addresses that are not 16- or 32- bit aligned.  By default
           unaligned access is disabled for all pre-ARMv6, all ARMv6-M and for
           ARMv8-M Baseline architectures, and enabled for all other
           architectures.  If unaligned access is not enabled then words in
           packed data structures are accessed a byte at a time.

           The ARM attribute "Tag_CPU_unaligned_access" is set in the
           generated object file to either true or false, depending upon the
           setting of this option.  If unaligned access is enabled then the
           preprocessor symbol "__ARM_FEATURE_UNALIGNED" is also defined.

       --mmnneeoonn--ffoorr--6644bbiittss
           Enables using Neon to handle scalar 64-bits operations. This is
           disabled by default since the cost of moving data from core
           registers to Neon is high.

       --mmssllooww--ffllaasshh--ddaattaa
           Assume loading data from flash is slower than fetching instruction.
           Therefore literal load is minimized for better performance.  This
           option is only supported when compiling for ARMv7 M-profile and off
           by default.

       --mmaassmm--ssyynnttaaxx--uunniiffiieedd
           Assume inline assembler is using unified asm syntax.  The default
           is currently off which implies divided syntax.  This option has no
           impact on Thumb2. However, this may change in future releases of
           GCC.  Divided syntax should be considered deprecated.

       --mmrreessttrriicctt--iitt
           Restricts generation of IT blocks to conform to the rules of
           ARMv8-A.  IT blocks can only contain a single 16-bit instruction
           from a select set of instructions. This option is on by default for
           ARMv8-A Thumb mode.

       --mmpprriinntt--ttuunnee--iinnffoo
           Print CPU tuning information as comment in assembler file.  This is
           an option used only for regression testing of the compiler and not
           intended for ordinary use in compiling code.  This option is
           disabled by default.

       --mmvveerrbboossee--ccoosstt--dduummpp
           Enable verbose cost model dumping in the debug dump files.  This
           option is provided for use in debugging the compiler.

       --mmppuurree--ccooddee
           Do not allow constant data to be placed in code sections.
           Additionally, when compiling for ELF object format give all text
           sections the ELF processor-specific section attribute
           "SHF_ARM_PURECODE".  This option is only available when generating
           non-pic code for M-profile targets with the MOVT instruction.

       --mmccmmssee
           Generate secure code as per the "ARMv8-M Security Extensions:
           Requirements on Development Tools Engineering Specification", which
           can be found on
           <hhttttpp::////iinnffoocceenntteerr..aarrmm..ccoomm//hheellpp//ttooppiicc//ccoomm..aarrmm..ddoocc..eeccmm00335599881188//EECCMM00335599881188__aarrmmvv88mm__sseeccuurriittyy__eexxtteennssiioonnss__rreeqqss__oonn__ddeevv__ttoooollss__11__00..ppddff>.

       _A_V_R _O_p_t_i_o_n_s

       These options are defined for AVR implementations:

       --mmmmccuu==_m_c_u
           Specify Atmel AVR instruction set architectures (ISA) or MCU type.

           The default for this option is@tie{}aavvrr22.

           GCC supports the following AVR devices and ISAs:

           "avr2"
               "Classic" devices with up to 8@tie{}KiB of program memory.
               _m_c_u@tie{}= "attiny22", "attiny26", "at90c8534", "at90s2313",
               "at90s2323", "at90s2333", "at90s2343", "at90s4414",
               "at90s4433", "at90s4434", "at90s8515", "at90s8535".

           "avr25"
               "Classic" devices with up to 8@tie{}KiB of program memory and
               with the "MOVW" instruction.  _m_c_u@tie{}= "ata5272", "ata6616c",
               "attiny13", "attiny13a", "attiny2313", "attiny2313a",
               "attiny24", "attiny24a", "attiny25", "attiny261", "attiny261a",
               "attiny43u", "attiny4313", "attiny44", "attiny44a",
               "attiny441", "attiny45", "attiny461", "attiny461a", "attiny48",
               "attiny828", "attiny84", "attiny84a", "attiny841", "attiny85",
               "attiny861", "attiny861a", "attiny87", "attiny88", "at86rf401".

           "avr3"
               "Classic" devices with 16@tie{}KiB up to 64@tie{}KiB of
               program memory.  _m_c_u@tie{}= "at43usb355", "at76c711".

           "avr31"
               "Classic" devices with 128@tie{}KiB of program memory.
               _m_c_u@tie{}= "atmega103", "at43usb320".

           "avr35"
               "Classic" devices with 16@tie{}KiB up to 64@tie{}KiB of program
               memory and with the "MOVW" instruction.  _m_c_u@tie{}= "ata5505",
               "ata6617c", "ata664251", "atmega16u2", "atmega32u2",
               "atmega8u2", "attiny1634", "attiny167", "at90usb162",
               "at90usb82".

           "avr4"
               "Enhanced" devices with up to 8@tie{}KiB of program memory.
               _m_c_u@tie{}= "ata6285", "ata6286", "ata6289", "ata6612c",
               "atmega48", "atmega48a", "atmega48p", "atmega48pa",
               "atmega48pb", "atmega8", "atmega8a", "atmega8hva",
               "atmega8515", "atmega8535", "atmega88", "atmega88a",
               "atmega88p", "atmega88pa", "atmega88pb", "at90pwm1",
               "at90pwm2", "at90pwm2b", "at90pwm3", "at90pwm3b", "at90pwm81".

           "avr5"
               "Enhanced" devices with 16@tie{}KiB up to 64@tie{}KiB of
               program memory.  _m_c_u@tie{}= "ata5702m322", "ata5782",
               "ata5790", "ata5790n", "ata5791", "ata5795", "ata5831",
               "ata6613c", "ata6614q", "ata8210", "ata8510", "atmega16",
               "atmega16a", "atmega16hva", "atmega16hva2", "atmega16hvb",
               "atmega16hvbrevb", "atmega16m1", "atmega16u4", "atmega161",
               "atmega162", "atmega163", "atmega164a", "atmega164p",
               "atmega164pa", "atmega165", "atmega165a", "atmega165p",
               "atmega165pa", "atmega168", "atmega168a", "atmega168p",
               "atmega168pa", "atmega168pb", "atmega169", "atmega169a",
               "atmega169p", "atmega169pa", "atmega32", "atmega32a",
               "atmega32c1", "atmega32hvb", "atmega32hvbrevb", "atmega32m1",
               "atmega32u4", "atmega32u6", "atmega323", "atmega324a",
               "atmega324p", "atmega324pa", "atmega325", "atmega325a",
               "atmega325p", "atmega325pa", "atmega3250", "atmega3250a",
               "atmega3250p", "atmega3250pa", "atmega328", "atmega328p",
               "atmega328pb", "atmega329", "atmega329a", "atmega329p",
               "atmega329pa", "atmega3290", "atmega3290a", "atmega3290p",
               "atmega3290pa", "atmega406", "atmega64", "atmega64a",
               "atmega64c1", "atmega64hve", "atmega64hve2", "atmega64m1",
               "atmega64rfr2", "atmega640", "atmega644", "atmega644a",
               "atmega644p", "atmega644pa", "atmega644rfr2", "atmega645",
               "atmega645a", "atmega645p", "atmega6450", "atmega6450a",
               "atmega6450p", "atmega649", "atmega649a", "atmega649p",
               "atmega6490", "atmega6490a", "atmega6490p", "at90can32",
               "at90can64", "at90pwm161", "at90pwm216", "at90pwm316",
               "at90scr100", "at90usb646", "at90usb647", "at94k", "m3000".

           "avr51"
               "Enhanced" devices with 128@tie{}KiB of program memory.
               _m_c_u@tie{}= "atmega128", "atmega128a", "atmega128rfa1",
               "atmega128rfr2", "atmega1280", "atmega1281", "atmega1284",
               "atmega1284p", "atmega1284rfr2", "at90can128", "at90usb1286",
               "at90usb1287".

           "avr6"
               "Enhanced" devices with 3-byte PC, i.e. with more than
               128@tie{}KiB of program memory.  _m_c_u@tie{}= "atmega256rfr2",
               "atmega2560", "atmega2561", "atmega2564rfr2".

           "avrxmega2"
               "XMEGA" devices with more than 8@tie{}KiB and up to 64@tie{}KiB
               of program memory.  _m_c_u@tie{}= "atxmega16a4", "atxmega16a4u",
               "atxmega16c4", "atxmega16d4", "atxmega16e5", "atxmega32a4",
               "atxmega32a4u", "atxmega32c3", "atxmega32c4", "atxmega32d3",
               "atxmega32d4", "atxmega32e5", "atxmega8e5".

           "avrxmega3"
               "XMEGA" devices with up to 64@tie{}KiB of combined program
               memory and RAM, and with program memory visible in the RAM
               address space.  _m_c_u@tie{}= "attiny1614", "attiny1616",
               "attiny1617", "attiny212", "attiny214", "attiny3214",
               "attiny3216", "attiny3217", "attiny412", "attiny414",
               "attiny416", "attiny417", "attiny814", "attiny816",
               "attiny817".

           "avrxmega4"
               "XMEGA" devices with more than 64@tie{}KiB and up to
               128@tie{}KiB of program memory.  _m_c_u@tie{}= "atxmega64a3",
               "atxmega64a3u", "atxmega64a4u", "atxmega64b1", "atxmega64b3",
               "atxmega64c3", "atxmega64d3", "atxmega64d4".

           "avrxmega5"
               "XMEGA" devices with more than 64@tie{}KiB and up to
               128@tie{}KiB of program memory and more than 64@tie{}KiB of
               RAM.  _m_c_u@tie{}= "atxmega64a1", "atxmega64a1u".

           "avrxmega6"
               "XMEGA" devices with more than 128@tie{}KiB of program memory.
               _m_c_u@tie{}= "atxmega128a3", "atxmega128a3u", "atxmega128b1",
               "atxmega128b3", "atxmega128c3", "atxmega128d3", "atxmega128d4",
               "atxmega192a3", "atxmega192a3u", "atxmega192c3",
               "atxmega192d3", "atxmega256a3", "atxmega256a3b",
               "atxmega256a3bu", "atxmega256a3u", "atxmega256c3",
               "atxmega256d3", "atxmega384c3", "atxmega384d3".

           "avrxmega7"
               "XMEGA" devices with more than 128@tie{}KiB of program memory
               and more than 64@tie{}KiB of RAM.  _m_c_u@tie{}= "atxmega128a1",
               "atxmega128a1u", "atxmega128a4u".

           "avrtiny"
               "TINY" Tiny core devices with 512@tie{}B up to 4@tie{}KiB of
               program memory.  _m_c_u@tie{}= "attiny10", "attiny20", "attiny4",
               "attiny40", "attiny5", "attiny9".

           "avr1"
               This ISA is implemented by the minimal AVR core and supported
               for assembler only.  _m_c_u@tie{}= "attiny11", "attiny12",
               "attiny15", "attiny28", "at90s1200".

       --mmaabbssddaattaa
           Assume that all data in static storage can be accessed by LDS / STS
           instructions.  This option has only an effect on reduced Tiny
           devices like ATtiny40.  See also the "absdata" AAVVRR VVaarriiaabbllee
           AAttttrriibbuutteess,,vvaarriiaabbllee aattttrriibbuuttee.

       --mmaaccccuummuullaattee--aarrggss
           Accumulate outgoing function arguments and acquire/release the
           needed stack space for outgoing function arguments once in function
           prologue/epilogue.  Without this option, outgoing arguments are
           pushed before calling a function and popped afterwards.

           Popping the arguments after the function call can be expensive on
           AVR so that accumulating the stack space might lead to smaller
           executables because arguments need not be removed from the stack
           after such a function call.

           This option can lead to reduced code size for functions that
           perform several calls to functions that get their arguments on the
           stack like calls to printf-like functions.

       --mmbbrraanncchh--ccoosstt==_c_o_s_t
           Set the branch costs for conditional branch instructions to _c_o_s_t.
           Reasonable values for _c_o_s_t are small, non-negative integers. The
           default branch cost is 0.

       --mmccaallll--pprroolloogguueess
           Functions prologues/epilogues are expanded as calls to appropriate
           subroutines.  Code size is smaller.

       --mmggaass--iissrr--pprroolloogguueess
           Interrupt service routines (ISRs) may use the "__gcc_isr" pseudo
           instruction supported by GNU Binutils.  If this option is on, the
           feature can still be disabled for individual ISRs by means of the
           AAVVRR FFuunnccttiioonn AAttttrriibbuutteess,,,,""nnoo__ggcccciissrr"" function attribute.  This
           feature is activated per default if optimization is on (but not
           with --OOgg, @pxref{Optimize Options}), and if GNU Binutils support
           PR21683 ("https://sourceware.org/PR21683").

       --mmiinntt88
           Assume "int" to be 8-bit integer.  This affects the sizes of all
           types: a "char" is 1 byte, an "int" is 1 byte, a "long" is 2 bytes,
           and "long long" is 4 bytes.  Please note that this option does not
           conform to the C standards, but it results in smaller code size.

       --mmmmaaiinn--iiss--OOSS__ttaasskk
           Do not save registers in "main".  The effect is the same like
           attaching attribute AAVVRR FFuunnccttiioonn AAttttrriibbuutteess,,,,""OOSS__ttaasskk"" to "main".
           It is activated per default if optimization is on.

       --mmnn--ffllaasshh==_n_u_m
           Assume that the flash memory has a size of _n_u_m times 64@tie{}KiB.

       --mmnnoo--iinntteerrrruuppttss
           Generated code is not compatible with hardware interrupts.  Code
           size is smaller.

       --mmrreellaaxx
           Try to replace "CALL" resp. "JMP" instruction by the shorter
           "RCALL" resp. "RJMP" instruction if applicable.  Setting --mmrreellaaxx
           just adds the ----mmlliinnkk--rreellaaxx option to the assembler's command line
           and the ----rreellaaxx option to the linker's command line.

           Jump relaxing is performed by the linker because jump offsets are
           not known before code is located. Therefore, the assembler code
           generated by the compiler is the same, but the instructions in the
           executable may differ from instructions in the assembler code.

           Relaxing must be turned on if linker stubs are needed, see the
           section on "EIND" and linker stubs below.

       --mmrrmmww
           Assume that the device supports the Read-Modify-Write instructions
           "XCH", "LAC", "LAS" and "LAT".

       --mmsshhoorrtt--ccaallllss
           Assume that "RJMP" and "RCALL" can target the whole program memory.

           This option is used internally for multilib selection.  It is not
           an optimization option, and you don't need to set it by hand.

       --mmsspp88
           Treat the stack pointer register as an 8-bit register, i.e. assume
           the high byte of the stack pointer is zero.  In general, you don't
           need to set this option by hand.

           This option is used internally by the compiler to select and build
           multilibs for architectures "avr2" and "avr25".  These
           architectures mix devices with and without "SPH".  For any setting
           other than --mmmmccuu==aavvrr22 or --mmmmccuu==aavvrr2255 the compiler driver adds or
           removes this option from the compiler proper's command line,
           because the compiler then knows if the device or architecture has
           an 8-bit stack pointer and thus no "SPH" register or not.

       --mmssttrriicctt--XX
           Use address register "X" in a way proposed by the hardware.  This
           means that "X" is only used in indirect, post-increment or pre-
           decrement addressing.

           Without this option, the "X" register may be used in the same way
           as "Y" or "Z" which then is emulated by additional instructions.
           For example, loading a value with "X+const" addressing with a small
           non-negative "const < 64" to a register _R_n is performed as

                   adiw r26, const   ; X += const
                   ld   <Rn>, X        ; <Rn> = *X
                   sbiw r26, const   ; X -= const

       --mmttiinnyy--ssttaacckk
           Only change the lower 8@tie{}bits of the stack pointer.

       --mmffrraacctt--ccoonnvveerrtt--ttrruunnccaattee
           Allow to use truncation instead of rounding towards zero for
           fractional fixed-point types.

       --nnooddeevviicceelliibb
           Don't link against AVR-LibC's device specific library "lib<mcu>.a".

       --WWaaddddrr--ssppaaccee--ccoonnvveerrtt
           Warn about conversions between address spaces in the case where the
           resulting address space is not contained in the incoming address
           space.

       --WWmmiissssppeelllleedd--iissrr
           Warn if the ISR is misspelled, i.e. without __vector prefix.
           Enabled by default.

       "EIND" and Devices with More Than 128 Ki Bytes of Flash

       Pointers in the implementation are 16@tie{}bits wide.  The address of a
       function or label is represented as word address so that indirect jumps
       and calls can target any code address in the range of 64@tie{}Ki words.

       In order to facilitate indirect jump on devices with more than
       128@tie{}Ki bytes of program memory space, there is a special function
       register called "EIND" that serves as most significant part of the
       target address when "EICALL" or "EIJMP" instructions are used.

       Indirect jumps and calls on these devices are handled as follows by the
       compiler and are subject to some limitations:

       *   The compiler never sets "EIND".

       *   The compiler uses "EIND" implicitly in "EICALL"/"EIJMP"
           instructions or might read "EIND" directly in order to emulate an
           indirect call/jump by means of a "RET" instruction.

       *   The compiler assumes that "EIND" never changes during the startup
           code or during the application. In particular, "EIND" is not
           saved/restored in function or interrupt service routine
           prologue/epilogue.

       *   For indirect calls to functions and computed goto, the linker
           generates _s_t_u_b_s. Stubs are jump pads sometimes also called
           _t_r_a_m_p_o_l_i_n_e_s. Thus, the indirect call/jump jumps to such a stub.
           The stub contains a direct jump to the desired address.

       *   Linker relaxation must be turned on so that the linker generates
           the stubs correctly in all situations. See the compiler option
           --mmrreellaaxx and the linker option ----rreellaaxx.  There are corner cases
           where the linker is supposed to generate stubs but aborts without
           relaxation and without a helpful error message.

       *   The default linker script is arranged for code with "EIND = 0".  If
           code is supposed to work for a setup with "EIND != 0", a custom
           linker script has to be used in order to place the sections whose
           name start with ".trampolines" into the segment where "EIND" points
           to.

       *   The startup code from libgcc never sets "EIND".  Notice that
           startup code is a blend of code from libgcc and AVR-LibC.  For the
           impact of AVR-LibC on "EIND", see the AVR-LibC user manual
           ("http://nongnu.org/avr-libc/user-manual/").

       *   It is legitimate for user-specific startup code to set up "EIND"
           early, for example by means of initialization code located in
           section ".init3". Such code runs prior to general startup code that
           initializes RAM and calls constructors, but after the bit of
           startup code from AVR-LibC that sets "EIND" to the segment where
           the vector table is located.

                   #include <avr/io.h>

                   static void
                   __attribute__((section(".init3"),naked,used,no_instrument_function))
                   init3_set_eind (void)
                   {
                     __asm volatile ("ldi r24,pm_hh8(__trampolines_start)\n\t"
                                     "out %i0,r24" :: "n" (&EIND) : "r24","memory");
                   }

           The "__trampolines_start" symbol is defined in the linker script.

       *   Stubs are generated automatically by the linker if the following
           two conditions are met:

           -<The address of a label is taken by means of the "gs" modifier>
               (short for _g_e_n_e_r_a_t_e _s_t_u_b_s) like so:

                       LDI r24, lo8(gs(<func>))
                       LDI r25, hi8(gs(<func>))

           -<The final location of that label is in a code segment>
               _o_u_t_s_i_d_e the segment where the stubs are located.

       *   The compiler emits such "gs" modifiers for code labels in the
           following situations:

           -<Taking address of a function or code label.>
           -<Computed goto.>
           -<If prologue-save function is used, see --mmccaallll--pprroolloogguueess>
               command-line option.

           -<Switch/case dispatch tables. If you do not want such dispatch>
               tables you can specify the --ffnnoo--jjuummpp--ttaabblleess command-line
               option.

           -<C and C++ constructors/destructors called during
           startup/shutdown.>
           -<If the tools hit a "gs()" modifier explained above.>
       *   Jumping to non-symbolic addresses like so is _n_o_t supported:

                   int main (void)
                   {
                       /* Call function at word address 0x2 */
                       return ((int(*)(void)) 0x2)();
                   }

           Instead, a stub has to be set up, i.e. the function has to be
           called through a symbol ("func_4" in the example):

                   int main (void)
                   {
                       extern int func_4 (void);

                       /* Call function at byte address 0x4 */
                       return func_4();
                   }

           and the application be linked with --WWll,,----ddeeffssyymm,,ffuunncc__44==00xx44.
           Alternatively, "func_4" can be defined in the linker script.

       Handling of the "RAMPD", "RAMPX", "RAMPY" and "RAMPZ" Special Function
       Registers

       Some AVR devices support memories larger than the 64@tie{}KiB range
       that can be accessed with 16-bit pointers.  To access memory locations
       outside this 64@tie{}KiB range, the content of a "RAMP" register is
       used as high part of the address: The "X", "Y", "Z" address register is
       concatenated with the "RAMPX", "RAMPY", "RAMPZ" special function
       register, respectively, to get a wide address. Similarly, "RAMPD" is
       used together with direct addressing.

       *   The startup code initializes the "RAMP" special function registers
           with zero.

       *   If a AAVVRR NNaammeedd AAddddrreessss SSppaacceess,,nnaammeedd aaddddrreessss ssppaaccee other than
           generic or "__flash" is used, then "RAMPZ" is set as needed before
           the operation.

       *   If the device supports RAM larger than 64@tie{}KiB and the compiler
           needs to change "RAMPZ" to accomplish an operation, "RAMPZ" is
           reset to zero after the operation.

       *   If the device comes with a specific "RAMP" register, the ISR
           prologue/epilogue saves/restores that SFR and initializes it with
           zero in case the ISR code might (implicitly) use it.

       *   RAM larger than 64@tie{}KiB is not supported by GCC for AVR
           targets.  If you use inline assembler to read from locations
           outside the 16-bit address range and change one of the "RAMP"
           registers, you must reset it to zero after the access.

       AVR Built-in Macros

       GCC defines several built-in macros so that the user code can test for
       the presence or absence of features.  Almost any of the following
       built-in macros are deduced from device capabilities and thus triggered
       by the --mmmmccuu== command-line option.

       For even more AVR-specific built-in macros see AAVVRR NNaammeedd AAddddrreessss SSppaacceess
       and AAVVRR BBuuiilltt--iinn FFuunnccttiioonnss.

       "__AVR_ARCH__"
           Build-in macro that resolves to a decimal number that identifies
           the architecture and depends on the --mmmmccuu==_m_c_u option.  Possible
           values are:

           2, 25, 3, 31, 35, 4, 5, 51, 6

           for _m_c_u="avr2", "avr25", "avr3", "avr31", "avr35", "avr4", "avr5",
           "avr51", "avr6",

           respectively and

           100, 102, 103, 104, 105, 106, 107

           for _m_c_u="avrtiny", "avrxmega2", "avrxmega3", "avrxmega4",
           "avrxmega5", "avrxmega6", "avrxmega7", respectively.  If _m_c_u
           specifies a device, this built-in macro is set accordingly. For
           example, with --mmmmccuu==aattmmeeggaa88 the macro is defined to 4.

       "__AVR__D_e_v_i_c_e__"
           Setting --mmmmccuu==_d_e_v_i_c_e defines this built-in macro which reflects the
           device's name. For example, --mmmmccuu==aattmmeeggaa88 defines the built-in
           macro "__AVR_ATmega8__", --mmmmccuu==aattttiinnyy226611aa defines
           "__AVR_ATtiny261A__", etc.

           The built-in macros' names follow the scheme "__AVR__D_e_v_i_c_e_____" where
           _D_e_v_i_c_e is the device name as from the AVR user manual. The
           difference between _D_e_v_i_c_e in the built-in macro and _d_e_v_i_c_e in
           --mmmmccuu==_d_e_v_i_c_e is that the latter is always lowercase.

           If _d_e_v_i_c_e is not a device but only a core architecture like aavvrr5511,
           this macro is not defined.

       "__AVR_DEVICE_NAME__"
           Setting --mmmmccuu==_d_e_v_i_c_e defines this built-in macro to the device's
           name. For example, with --mmmmccuu==aattmmeeggaa88 the macro is defined to
           "atmega8".

           If _d_e_v_i_c_e is not a device but only a core architecture like aavvrr5511,
           this macro is not defined.

       "__AVR_XMEGA__"
           The device / architecture belongs to the XMEGA family of devices.

       "__AVR_HAVE_ELPM__"
           The device has the "ELPM" instruction.

       "__AVR_HAVE_ELPMX__"
           The device has the "ELPM R_n_,_Z_" and "ELPM R_n_,_Z_+_" instructions.

       "__AVR_HAVE_MOVW__"
           The device has the "MOVW" instruction to perform 16-bit register-
           register moves.

       "__AVR_HAVE_LPMX__"
           The device has the "LPM R_n_,_Z_" and "LPM R_n_,_Z_+_" instructions.

       "__AVR_HAVE_MUL__"
           The device has a hardware multiplier.

       "__AVR_HAVE_JMP_CALL__"
           The device has the "JMP" and "CALL" instructions.  This is the case
           for devices with more than 8@tie{}KiB of program memory.

       "__AVR_HAVE_EIJMP_EICALL__"
       "__AVR_3_BYTE_PC__"
           The device has the "EIJMP" and "EICALL" instructions.  This is the
           case for devices with more than 128@tie{}KiB of program memory.
           This also means that the program counter (PC) is 3@tie{}bytes wide.

       "__AVR_2_BYTE_PC__"
           The program counter (PC) is 2@tie{}bytes wide. This is the case for
           devices with up to 128@tie{}KiB of program memory.

       "__AVR_HAVE_8BIT_SP__"
       "__AVR_HAVE_16BIT_SP__"
           The stack pointer (SP) register is treated as 8-bit respectively
           16-bit register by the compiler.  The definition of these macros is
           affected by --mmttiinnyy--ssttaacckk.

       "__AVR_HAVE_SPH__"
       "__AVR_SP8__"
           The device has the SPH (high part of stack pointer) special
           function register or has an 8-bit stack pointer, respectively.  The
           definition of these macros is affected by --mmmmccuu== and in the cases
           of --mmmmccuu==aavvrr22 and --mmmmccuu==aavvrr2255 also by --mmsspp88.

       "__AVR_HAVE_RAMPD__"
       "__AVR_HAVE_RAMPX__"
       "__AVR_HAVE_RAMPY__"
       "__AVR_HAVE_RAMPZ__"
           The device has the "RAMPD", "RAMPX", "RAMPY", "RAMPZ" special
           function register, respectively.

       "__NO_INTERRUPTS__"
           This macro reflects the --mmnnoo--iinntteerrrruuppttss command-line option.

       "__AVR_ERRATA_SKIP__"
       "__AVR_ERRATA_SKIP_JMP_CALL__"
           Some AVR devices (AT90S8515, ATmega103) must not skip 32-bit
           instructions because of a hardware erratum.  Skip instructions are
           "SBRS", "SBRC", "SBIS", "SBIC" and "CPSE".  The second macro is
           only defined if "__AVR_HAVE_JMP_CALL__" is also set.

       "__AVR_ISA_RMW__"
           The device has Read-Modify-Write instructions (XCH, LAC, LAS and
           LAT).

       "__AVR_SFR_OFFSET__=_o_f_f_s_e_t"
           Instructions that can address I/O special function registers
           directly like "IN", "OUT", "SBI", etc. may use a different address
           as if addressed by an instruction to access RAM like "LD" or "STS".
           This offset depends on the device architecture and has to be
           subtracted from the RAM address in order to get the respective
           I/O@tie{}address.

       "__AVR_SHORT_CALLS__"
           The --mmsshhoorrtt--ccaallllss command line option is set.

       "__AVR_PM_BASE_ADDRESS__=_a_d_d_r"
           Some devices support reading from flash memory by means of "LD*"
           instructions.  The flash memory is seen in the data address space
           at an offset of "__AVR_PM_BASE_ADDRESS__".  If this macro is not
           defined, this feature is not available.  If defined, the address
           space is linear and there is no need to put ".rodata" into RAM.
           This is handled by the default linker description file, and is
           currently available for "avrtiny" and "avrxmega3".  Even more
           convenient, there is no need to use address spaces like "__flash"
           or features like attribute "progmem" and "pgm_read_*".

       "__WITH_AVRLIBC__"
           The compiler is configured to be used together with AVR-Libc.  See
           the ----wwiitthh--aavvrrlliibbcc configure option.

       _B_l_a_c_k_f_i_n _O_p_t_i_o_n_s

       --mmccppuu==_c_p_u[--_s_i_r_e_v_i_s_i_o_n]
           Specifies the name of the target Blackfin processor.  Currently,
           _c_p_u can be one of bbff551122, bbff551144, bbff551166, bbff551188, bbff552222, bbff552233, bbff552244,
           bbff552255, bbff552266, bbff552277, bbff553311, bbff553322, bbff553333, bbff553344, bbff553366, bbff553377,
           bbff553388, bbff553399, bbff554422, bbff554444, bbff554477, bbff554488, bbff554499, bbff554422mm, bbff554444mm,
           bbff554477mm, bbff554488mm, bbff554499mm, bbff556611, bbff559922.

           The optional _s_i_r_e_v_i_s_i_o_n specifies the silicon revision of the
           target Blackfin processor.  Any workarounds available for the
           targeted silicon revision are enabled.  If _s_i_r_e_v_i_s_i_o_n is nnoonnee, no
           workarounds are enabled.  If _s_i_r_e_v_i_s_i_o_n is aannyy, all workarounds for
           the targeted processor are enabled.  The "__SILICON_REVISION__"
           macro is defined to two hexadecimal digits representing the major
           and minor numbers in the silicon revision.  If _s_i_r_e_v_i_s_i_o_n is nnoonnee,
           the "__SILICON_REVISION__" is not defined.  If _s_i_r_e_v_i_s_i_o_n is aannyy,
           the "__SILICON_REVISION__" is defined to be 0xffff.  If this
           optional _s_i_r_e_v_i_s_i_o_n is not used, GCC assumes the latest known
           silicon revision of the targeted Blackfin processor.

           GCC defines a preprocessor macro for the specified _c_p_u.  For the
           bbffiinn--eellff toolchain, this option causes the hardware BSP provided by
           libgloss to be linked in if --mmssiimm is not given.

           Without this option, bbff553322 is used as the processor by default.

           Note that support for bbff556611 is incomplete.  For bbff556611, only the
           preprocessor macro is defined.

       --mmssiimm
           Specifies that the program will be run on the simulator.  This
           causes the simulator BSP provided by libgloss to be linked in.
           This option has effect only for bbffiinn--eellff toolchain.  Certain other
           options, such as --mmiidd--sshhaarreedd--lliibbrraarryy and --mmffddppiicc, imply --mmssiimm.

       --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr
           Don't keep the frame pointer in a register for leaf functions.
           This avoids the instructions to save, set up and restore frame
           pointers and makes an extra register available in leaf functions.

       --mmssppeecclldd--aannoommaallyy
           When enabled, the compiler ensures that the generated code does not
           contain speculative loads after jump instructions. If this option
           is used, "__WORKAROUND_SPECULATIVE_LOADS" is defined.

       --mmnnoo--ssppeecclldd--aannoommaallyy
           Don't generate extra code to prevent speculative loads from
           occurring.

       --mmccssyynncc--aannoommaallyy
           When enabled, the compiler ensures that the generated code does not
           contain CSYNC or SSYNC instructions too soon after conditional
           branches.  If this option is used, "__WORKAROUND_SPECULATIVE_SYNCS"
           is defined.

       --mmnnoo--ccssyynncc--aannoommaallyy
           Don't generate extra code to prevent CSYNC or SSYNC instructions
           from occurring too soon after a conditional branch.

       --mmllooww--6644kk
           When enabled, the compiler is free to take advantage of the
           knowledge that the entire program fits into the low 64k of memory.

       --mmnnoo--llooww--6644kk
           Assume that the program is arbitrarily large.  This is the default.

       --mmssttaacckk--cchheecckk--ll11
           Do stack checking using information placed into L1 scratchpad
           memory by the uClinux kernel.

       --mmiidd--sshhaarreedd--lliibbrraarryy
           Generate code that supports shared libraries via the library ID
           method.  This allows for execute in place and shared libraries in
           an environment without virtual memory management.  This option
           implies --ffPPIICC.  With a bbffiinn--eellff target, this option implies --mmssiimm.

       --mmnnoo--iidd--sshhaarreedd--lliibbrraarryy
           Generate code that doesn't assume ID-based shared libraries are
           being used.  This is the default.

       --mmlleeaaff--iidd--sshhaarreedd--lliibbrraarryy
           Generate code that supports shared libraries via the library ID
           method, but assumes that this library or executable won't link
           against any other ID shared libraries.  That allows the compiler to
           use faster code for jumps and calls.

       --mmnnoo--lleeaaff--iidd--sshhaarreedd--lliibbrraarryy
           Do not assume that the code being compiled won't link against any
           ID shared libraries.  Slower code is generated for jump and call
           insns.

       --mmsshhaarreedd--lliibbrraarryy--iidd==nn
           Specifies the identification number of the ID-based shared library
           being compiled.  Specifying a value of 0 generates more compact
           code; specifying other values forces the allocation of that number
           to the current library but is no more space- or time-efficient than
           omitting this option.

       --mmsseepp--ddaattaa
           Generate code that allows the data segment to be located in a
           different area of memory from the text segment.  This allows for
           execute in place in an environment without virtual memory
           management by eliminating relocations against the text section.

       --mmnnoo--sseepp--ddaattaa
           Generate code that assumes that the data segment follows the text
           segment.  This is the default.

       --mmlloonngg--ccaallllss
       --mmnnoo--lloonngg--ccaallllss
           Tells the compiler to perform function calls by first loading the
           address of the function into a register and then performing a
           subroutine call on this register.  This switch is needed if the
           target function lies outside of the 24-bit addressing range of the
           offset-based version of subroutine call instruction.

           This feature is not enabled by default.  Specifying --mmnnoo--lloonngg--ccaallllss
           restores the default behavior.  Note these switches have no effect
           on how the compiler generates code to handle function calls via
           function pointers.

       --mmffaasstt--ffpp
           Link with the fast floating-point library. This library relaxes
           some of the IEEE floating-point standard's rules for checking
           inputs against Not-a-Number (NAN), in the interest of performance.

       --mmiinnlliinnee--pplltt
           Enable inlining of PLT entries in function calls to functions that
           are not known to bind locally.  It has no effect without --mmffddppiicc.

       --mmmmuullttiiccoorree
           Build a standalone application for multicore Blackfin processors.
           This option causes proper start files and link scripts supporting
           multicore to be used, and defines the macro "__BFIN_MULTICORE".  It
           can only be used with --mmccppuu==bbff556611[--_s_i_r_e_v_i_s_i_o_n].

           This option can be used with --mmccoorreeaa or --mmccoorreebb, which selects the
           one-application-per-core programming model.  Without --mmccoorreeaa or
           --mmccoorreebb, the single-application/dual-core programming model is
           used. In this model, the main function of Core B should be named as
           "coreb_main".

           If this option is not used, the single-core application programming
           model is used.

       --mmccoorreeaa
           Build a standalone application for Core A of BF561 when using the
           one-application-per-core programming model. Proper start files and
           link scripts are used to support Core A, and the macro
           "__BFIN_COREA" is defined.  This option can only be used in
           conjunction with --mmmmuullttiiccoorree.

       --mmccoorreebb
           Build a standalone application for Core B of BF561 when using the
           one-application-per-core programming model. Proper start files and
           link scripts are used to support Core B, and the macro
           "__BFIN_COREB" is defined. When this option is used, "coreb_main"
           should be used instead of "main".  This option can only be used in
           conjunction with --mmmmuullttiiccoorree.

       --mmssddrraamm
           Build a standalone application for SDRAM. Proper start files and
           link scripts are used to put the application into SDRAM, and the
           macro "__BFIN_SDRAM" is defined.  The loader should initialize
           SDRAM before loading the application.

       --mmiiccppllbb
           Assume that ICPLBs are enabled at run time.  This has an effect on
           certain anomaly workarounds.  For Linux targets, the default is to
           assume ICPLBs are enabled; for standalone applications the default
           is off.

       _C_6_X _O_p_t_i_o_n_s

       --mmaarrcchh==_n_a_m_e
           This specifies the name of the target architecture.  GCC uses this
           name to determine what kind of instructions it can emit when
           generating assembly code.  Permissible names are: cc6622xx, cc6644xx,
           cc6644xx++, cc6677xx, cc6677xx++, cc667744xx.

       --mmbbiigg--eennddiiaann
           Generate code for a big-endian target.

       --mmlliittttllee--eennddiiaann
           Generate code for a little-endian target.  This is the default.

       --mmssiimm
           Choose startup files and linker script suitable for the simulator.

       --mmssddaattaa==ddeeffaauulltt
           Put small global and static data in the ".neardata" section, which
           is pointed to by register "B14".  Put small uninitialized global
           and static data in the ".bss" section, which is adjacent to the
           ".neardata" section.  Put small read-only data into the ".rodata"
           section.  The corresponding sections used for large pieces of data
           are ".fardata", ".far" and ".const".

       --mmssddaattaa==aallll
           Put all data, not just small objects, into the sections reserved
           for small data, and use addressing relative to the "B14" register
           to access them.

       --mmssddaattaa==nnoonnee
           Make no use of the sections reserved for small data, and use
           absolute addresses to access all data.  Put all initialized global
           and static data in the ".fardata" section, and all uninitialized
           data in the ".far" section.  Put all constant data into the
           ".const" section.

       _C_R_I_S _O_p_t_i_o_n_s

       These options are defined specifically for the CRIS ports.

       --mmaarrcchh==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
       --mmccppuu==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
           Generate code for the specified architecture.  The choices for
           _a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e are vv33, vv88 and vv1100 for respectively ETRAX 4,
           ETRAX 100, and ETRAX 100 LX.  Default is vv00 except for cris-axis-
           linux-gnu, where the default is vv1100.

       --mmttuunnee==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
           Tune to _a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e everything applicable about the generated
           code, except for the ABI and the set of available instructions.
           The choices for _a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e are the same as for
           --mmaarrcchh==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e.

       --mmmmaaxx--ssttaacckk--ffrraammee==_n
           Warn when the stack frame of a function exceeds _n bytes.

       --mmeettrraaxx44
       --mmeettrraaxx110000
           The options --mmeettrraaxx44 and --mmeettrraaxx110000 are synonyms for --mmaarrcchh==vv33 and
           --mmaarrcchh==vv88 respectively.

       --mmmmuull--bbuugg--wwoorrkkaarroouunndd
       --mmnnoo--mmuull--bbuugg--wwoorrkkaarroouunndd
           Work around a bug in the "muls" and "mulu" instructions for CPU
           models where it applies.  This option is active by default.

       --mmppddeebbuugg
           Enable CRIS-specific verbose debug-related information in the
           assembly code.  This option also has the effect of turning off the
           ##NNOO__AAPPPP formatted-code indicator to the assembler at the beginning
           of the assembly file.

       --mmcccc--iinniitt
           Do not use condition-code results from previous instruction; always
           emit compare and test instructions before use of condition codes.

       --mmnnoo--ssiiddee--eeffffeeccttss
           Do not emit instructions with side effects in addressing modes
           other than post-increment.

       --mmssttaacckk--aalliiggnn
       --mmnnoo--ssttaacckk--aalliiggnn
       --mmddaattaa--aalliiggnn
       --mmnnoo--ddaattaa--aalliiggnn
       --mmccoonnsstt--aalliiggnn
       --mmnnoo--ccoonnsstt--aalliiggnn
           These options (nnoo-- options) arrange (eliminate arrangements) for
           the stack frame, individual data and constants to be aligned for
           the maximum single data access size for the chosen CPU model.  The
           default is to arrange for 32-bit alignment.  ABI details such as
           structure layout are not affected by these options.

       --mm3322--bbiitt
       --mm1166--bbiitt
       --mm88--bbiitt
           Similar to the stack- data- and const-align options above, these
           options arrange for stack frame, writable data and constants to all
           be 32-bit, 16-bit or 8-bit aligned.  The default is 32-bit
           alignment.

       --mmnnoo--pprroolloogguuee--eeppiilloogguuee
       --mmpprroolloogguuee--eeppiilloogguuee
           With --mmnnoo--pprroolloogguuee--eeppiilloogguuee, the normal function prologue and
           epilogue which set up the stack frame are omitted and no return
           instructions or return sequences are generated in the code.  Use
           this option only together with visual inspection of the compiled
           code: no warnings or errors are generated when call-saved registers
           must be saved, or storage for local variables needs to be
           allocated.

       --mmnnoo--ggoottpplltt
       --mmggoottpplltt
           With --ffppiicc and --ffPPIICC, don't generate (do generate) instruction
           sequences that load addresses for functions from the PLT part of
           the GOT rather than (traditional on other architectures) calls to
           the PLT.  The default is --mmggoottpplltt.

       --mmeellff
           Legacy no-op option only recognized with the cris-axis-elf and
           cris-axis-linux-gnu targets.

       --mmlliinnuuxx
           Legacy no-op option only recognized with the cris-axis-linux-gnu
           target.

       --ssiimm
           This option, recognized for the cris-axis-elf, arranges to link
           with input-output functions from a simulator library.  Code,
           initialized data and zero-initialized data are allocated
           consecutively.

       --ssiimm22
           Like --ssiimm, but pass linker options to locate initialized data at
           0x40000000 and zero-initialized data at 0x80000000.

       _C_R_1_6 _O_p_t_i_o_n_s

       These options are defined specifically for the CR16 ports.

       --mmmmaacc
           Enable the use of multiply-accumulate instructions. Disabled by
           default.

       --mmccrr1166ccpplluuss
       --mmccrr1166cc
           Generate code for CR16C or CR16C+ architecture. CR16C+ architecture
           is default.

       --mmssiimm
           Links the library libsim.a which is in compatible with simulator.
           Applicable to ELF compiler only.

       --mmiinntt3322
           Choose integer type as 32-bit wide.

       --mmbbiitt--ooppss
           Generates "sbit"/"cbit" instructions for bit manipulations.

       --mmddaattaa--mmooddeell==_m_o_d_e_l
           Choose a data model. The choices for _m_o_d_e_l are nneeaarr, ffaarr or mmeeddiiuumm.
           mmeeddiiuumm is default.  However, ffaarr is not valid with --mmccrr1166cc, as the
           CR16C architecture does not support the far data model.

       _D_a_r_w_i_n _O_p_t_i_o_n_s

       These options are defined for all architectures running the Darwin
       operating system.

       FSF GCC on Darwin does not create "fat" object files; it creates an
       object file for the single architecture that GCC was built to target.
       Apple's GCC on Darwin does create "fat" files if multiple --aarrcchh options
       are used; it does so by running the compiler or linker multiple times
       and joining the results together with _l_i_p_o.

       The subtype of the file created (like ppppcc77440000 or ppppcc997700 or ii668866) is
       determined by the flags that specify the ISA that GCC is targeting,
       like --mmccppuu or --mmaarrcchh.  The --ffoorrccee__ccppuussuubbttyyppee__AALLLL option can be used to
       override this.

       The Darwin tools vary in their behavior when presented with an ISA
       mismatch.  The assembler, _a_s, only permits instructions to be used that
       are valid for the subtype of the file it is generating, so you cannot
       put 64-bit instructions in a ppppcc775500 object file.  The linker for shared
       libraries, _/_u_s_r_/_b_i_n_/_l_i_b_t_o_o_l, fails and prints an error if asked to
       create a shared library with a less restrictive subtype than its input
       files (for instance, trying to put a ppppcc997700 object file in a ppppcc77440000
       library).  The linker for executables, lldd, quietly gives the executable
       the most restrictive subtype of any of its input files.

       --FF_d_i_r
           Add the framework directory _d_i_r to the head of the list of
           directories to be searched for header files.  These directories are
           interleaved with those specified by --II options and are scanned in a
           left-to-right order.

           A framework directory is a directory with frameworks in it.  A
           framework is a directory with a _H_e_a_d_e_r_s and/or _P_r_i_v_a_t_e_H_e_a_d_e_r_s
           directory contained directly in it that ends in _._f_r_a_m_e_w_o_r_k.  The
           name of a framework is the name of this directory excluding the
           _._f_r_a_m_e_w_o_r_k.  Headers associated with the framework are found in one
           of those two directories, with _H_e_a_d_e_r_s being searched first.  A
           subframework is a framework directory that is in a framework's
           _F_r_a_m_e_w_o_r_k_s directory.  Includes of subframework headers can only
           appear in a header of a framework that contains the subframework,
           or in a sibling subframework header.  Two subframeworks are
           siblings if they occur in the same framework.  A subframework
           should not have the same name as a framework; a warning is issued
           if this is violated.  Currently a subframework cannot have
           subframeworks; in the future, the mechanism may be extended to
           support this.  The standard frameworks can be found in
           _/_S_y_s_t_e_m_/_L_i_b_r_a_r_y_/_F_r_a_m_e_w_o_r_k_s and _/_L_i_b_r_a_r_y_/_F_r_a_m_e_w_o_r_k_s.  An example
           include looks like "#include <Framework/header.h>", where _F_r_a_m_e_w_o_r_k
           denotes the name of the framework and _h_e_a_d_e_r_._h is found in the
           _P_r_i_v_a_t_e_H_e_a_d_e_r_s or _H_e_a_d_e_r_s directory.

       --iiffrraammeewwoorrkk_d_i_r
           Like --FF except the directory is a treated as a system directory.
           The main difference between this --iiffrraammeewwoorrkk and --FF is that with
           --iiffrraammeewwoorrkk the compiler does not warn about constructs contained
           within header files found via _d_i_r.  This option is valid only for
           the C family of languages.

       --gguusseedd
           Emit debugging information for symbols that are used.  For stabs
           debugging format, this enables --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ssyymmbboollss.
           This is by default ON.

       --ggffuullll
           Emit debugging information for all symbols and types.

       --mmmmaaccoossxx--vveerrssiioonn--mmiinn==_v_e_r_s_i_o_n
           The earliest version of MacOS X that this executable will run on is
           _v_e_r_s_i_o_n.  Typical values of _v_e_r_s_i_o_n include 10.1, 10.2, and 10.3.9.

           If the compiler was built to use the system's headers by default,
           then the default for this option is the system version on which the
           compiler is running, otherwise the default is to make choices that
           are compatible with as many systems and code bases as possible.

       --mmkkeerrnneell
           Enable kernel development mode.  The --mmkkeerrnneell option sets --ssttaattiicc,
           --ffnnoo--ccoommmmoonn, --ffnnoo--uussee--ccxxaa--aatteexxiitt, --ffnnoo--eexxcceeppttiioonnss,
           --ffnnoo--nnoonn--ccaallll--eexxcceeppttiioonnss, --ffaappppllee--kkeexxtt, --ffnnoo--wweeaakk and --ffnnoo--rrttttii
           where applicable.  This mode also sets --mmnnoo--aallttiivveecc, --mmssoofftt--ffllooaatt,
           --ffnnoo--bbuuiillttiinn and --mmlloonngg--bbrraanncchh for PowerPC targets.

       --mmoonnee--bbyyttee--bbooooll
           Override the defaults for "bool" so that "sizeof(bool)==1".  By
           default "sizeof(bool)" is 4 when compiling for Darwin/PowerPC and 1
           when compiling for Darwin/x86, so this option has no effect on x86.

           WWaarrnniinngg:: The --mmoonnee--bbyyttee--bbooooll switch causes GCC to generate code
           that is not binary compatible with code generated without that
           switch.  Using this switch may require recompiling all other
           modules in a program, including system libraries.  Use this switch
           to conform to a non-default data model.

       --mmffiixx--aanndd--ccoonnttiinnuuee
       --ffffiixx--aanndd--ccoonnttiinnuuee
       --ffiinnddiirreecctt--ddaattaa
           Generate code suitable for fast turnaround development, such as to
           allow GDB to dynamically load _._o files into already-running
           programs.  --ffiinnddiirreecctt--ddaattaa and --ffffiixx--aanndd--ccoonnttiinnuuee are provided for
           backwards compatibility.

       --aallll__llooaadd
           Loads all members of static archive libraries.  See man lldd(1) for
           more information.

       --aarrcchh__eerrrroorrss__ffaattaall
           Cause the errors having to do with files that have the wrong
           architecture to be fatal.

       --bbiinndd__aatt__llooaadd
           Causes the output file to be marked such that the dynamic linker
           will bind all undefined references when the file is loaded or
           launched.

       --bbuunnddllee
           Produce a Mach-o bundle format file.  See man lldd(1) for more
           information.

       --bbuunnddllee__llooaaddeerr _e_x_e_c_u_t_a_b_l_e
           This option specifies the _e_x_e_c_u_t_a_b_l_e that will load the build
           output file being linked.  See man lldd(1) for more information.

       --ddyynnaammiicclliibb
           When passed this option, GCC produces a dynamic library instead of
           an executable when linking, using the Darwin _l_i_b_t_o_o_l command.

       --ffoorrccee__ccppuussuubbttyyppee__AALLLL
           This causes GCC's output file to have the AALLLL subtype, instead of
           one controlled by the --mmccppuu or --mmaarrcchh option.

       --aalllloowwaabbllee__cclliieenntt  _c_l_i_e_n_t___n_a_m_e
       --cclliieenntt__nnaammee
       --ccoommppaattiibbiilliittyy__vveerrssiioonn
       --ccuurrrreenntt__vveerrssiioonn
       --ddeeaadd__ssttrriipp
       --ddeeppeennddeennccyy--ffiillee
       --ddyylliibb__ffiillee
       --ddyylliinnkkeerr__iinnssttaallll__nnaammee
       --ddyynnaammiicc
       --eexxppoorrtteedd__ssyymmbboollss__lliisstt
       --ffiilleelliisstt
       --ffllaatt__nnaammeessppaaccee
       --ffoorrccee__ffllaatt__nnaammeessppaaccee
       --hheeaaddeerrppaadd__mmaaxx__iinnssttaallll__nnaammeess
       --iimmaaggee__bbaassee
       --iinniitt
       --iinnssttaallll__nnaammee
       --kkeeeepp__pprriivvaattee__eexxtteerrnnss
       --mmuullttii__mmoodduullee
       --mmuullttiippllyy__ddeeffiinneedd
       --mmuullttiippllyy__ddeeffiinneedd__uunnuusseedd
       --nnooaallll__llooaadd
       --nnoo__ddeeaadd__ssttrriipp__iinniittss__aanndd__tteerrmmss
       --nnooffiixxpprreebbiinnddiinngg
       --nnoommuullttiiddeeffss
       --nnoopprreebbiinndd
       --nnoosseegglliinnkkeeddiitt
       --ppaaggeezzeerroo__ssiizzee
       --pprreebbiinndd
       --pprreebbiinndd__aallll__ttwwoolleevveell__mmoodduulleess
       --pprriivvaattee__bbuunnddllee
       --rreeaadd__oonnllyy__rreellooccss
       --sseeccttaalliiggnn
       --sseeccttoobbjjeeccttssyymmbboollss
       --wwhhyyllooaadd
       --sseegg11aaddddrr
       --sseeccttccrreeaattee
       --sseeccttoobbjjeeccttssyymmbboollss
       --sseeccttoorrddeerr
       --sseeggaaddddrr
       --sseeggss__rreeaadd__oonnllyy__aaddddrr
       --sseeggss__rreeaadd__wwrriittee__aaddddrr
       --sseegg__aaddddrr__ttaabbllee
       --sseegg__aaddddrr__ttaabbllee__ffiilleennaammee
       --sseegglliinnkkeeddiitt
       --sseeggpprroott
       --sseeggss__rreeaadd__oonnllyy__aaddddrr
       --sseeggss__rreeaadd__wwrriittee__aaddddrr
       --ssiinnggllee__mmoodduullee
       --ssttaattiicc
       --ssuubb__lliibbrraarryy
       --ssuubb__uummbbrreellllaa
       --ttwwoolleevveell__nnaammeessppaaccee
       --uummbbrreellllaa
       --uunnddeeffiinneedd
       --uunneexxppoorrtteedd__ssyymmbboollss__lliisstt
       --wweeaakk__rreeffeerreennccee__mmiissmmaattcchheess
       --wwhhaattssllooaaddeedd
           These options are passed to the Darwin linker.  The Darwin linker
           man page describes them in detail.

       _D_E_C _A_l_p_h_a _O_p_t_i_o_n_s

       These --mm options are defined for the DEC Alpha implementations:

       --mmnnoo--ssoofftt--ffllooaatt
       --mmssoofftt--ffllooaatt
           Use (do not use) the hardware floating-point instructions for
           floating-point operations.  When --mmssoofftt--ffllooaatt is specified,
           functions in _l_i_b_g_c_c_._a are used to perform floating-point
           operations.  Unless they are replaced by routines that emulate the
           floating-point operations, or compiled in such a way as to call
           such emulations routines, these routines issue floating-point
           operations.   If you are compiling for an Alpha without floating-
           point operations, you must ensure that the library is built so as
           not to call them.

           Note that Alpha implementations without floating-point operations
           are required to have floating-point registers.

       --mmffpp--rreegg
       --mmnnoo--ffpp--rreeggss
           Generate code that uses (does not use) the floating-point register
           set.  --mmnnoo--ffpp--rreeggss implies --mmssoofftt--ffllooaatt.  If the floating-point
           register set is not used, floating-point operands are passed in
           integer registers as if they were integers and floating-point
           results are passed in $0 instead of $f0.  This is a non-standard
           calling sequence, so any function with a floating-point argument or
           return value called by code compiled with --mmnnoo--ffpp--rreeggss must also be
           compiled with that option.

           A typical use of this option is building a kernel that does not
           use, and hence need not save and restore, any floating-point
           registers.

       --mmiieeeeee
           The Alpha architecture implements floating-point hardware optimized
           for maximum performance.  It is mostly compliant with the IEEE
           floating-point standard.  However, for full compliance, software
           assistance is required.  This option generates code fully IEEE-
           compliant code _e_x_c_e_p_t that the _i_n_e_x_a_c_t_-_f_l_a_g is not maintained (see
           below).  If this option is turned on, the preprocessor macro
           "_IEEE_FP" is defined during compilation.  The resulting code is
           less efficient but is able to correctly support denormalized
           numbers and exceptional IEEE values such as not-a-number and
           plus/minus infinity.  Other Alpha compilers call this option
           --iieeeeee__wwiitthh__nnoo__iinneexxaacctt.

       --mmiieeeeee--wwiitthh--iinneexxaacctt
           This is like --mmiieeeeee except the generated code also maintains the
           IEEE _i_n_e_x_a_c_t_-_f_l_a_g.  Turning on this option causes the generated
           code to implement fully-compliant IEEE math.  In addition to
           "_IEEE_FP", "_IEEE_FP_EXACT" is defined as a preprocessor macro.
           On some Alpha implementations the resulting code may execute
           significantly slower than the code generated by default.  Since
           there is very little code that depends on the _i_n_e_x_a_c_t_-_f_l_a_g, you
           should normally not specify this option.  Other Alpha compilers
           call this option --iieeeeee__wwiitthh__iinneexxaacctt.

       --mmffpp--ttrraapp--mmooddee==_t_r_a_p_-_m_o_d_e
           This option controls what floating-point related traps are enabled.
           Other Alpha compilers call this option --ffppttmm _t_r_a_p_-_m_o_d_e.  The trap
           mode can be set to one of four values:

           nn   This is the default (normal) setting.  The only traps that are
               enabled are the ones that cannot be disabled in software (e.g.,
               division by zero trap).

           uu   In addition to the traps enabled by nn, underflow traps are
               enabled as well.

           ssuu  Like uu, but the instructions are marked to be safe for software
               completion (see Alpha architecture manual for details).

           ssuuii Like ssuu, but inexact traps are enabled as well.

       --mmffpp--rroouunnddiinngg--mmooddee==_r_o_u_n_d_i_n_g_-_m_o_d_e
           Selects the IEEE rounding mode.  Other Alpha compilers call this
           option --ffpprrmm _r_o_u_n_d_i_n_g_-_m_o_d_e.  The _r_o_u_n_d_i_n_g_-_m_o_d_e can be one of:

           nn   Normal IEEE rounding mode.  Floating-point numbers are rounded
               towards the nearest machine number or towards the even machine
               number in case of a tie.

           mm   Round towards minus infinity.

           cc   Chopped rounding mode.  Floating-point numbers are rounded
               towards zero.

           dd   Dynamic rounding mode.  A field in the floating-point control
               register (_f_p_c_r, see Alpha architecture reference manual)
               controls the rounding mode in effect.  The C library
               initializes this register for rounding towards plus infinity.
               Thus, unless your program modifies the _f_p_c_r, dd corresponds to
               round towards plus infinity.

       --mmttrraapp--pprreecciissiioonn==_t_r_a_p_-_p_r_e_c_i_s_i_o_n
           In the Alpha architecture, floating-point traps are imprecise.
           This means without software assistance it is impossible to recover
           from a floating trap and program execution normally needs to be
           terminated.  GCC can generate code that can assist operating system
           trap handlers in determining the exact location that caused a
           floating-point trap.  Depending on the requirements of an
           application, different levels of precisions can be selected:

           pp   Program precision.  This option is the default and means a trap
               handler can only identify which program caused a floating-point
               exception.

           ff   Function precision.  The trap handler can determine the
               function that caused a floating-point exception.

           ii   Instruction precision.  The trap handler can determine the
               exact instruction that caused a floating-point exception.

           Other Alpha compilers provide the equivalent options called
           --ssccooppee__ssaaffee and --rreessuummppttiioonn__ssaaffee.

       --mmiieeeeee--ccoonnffoorrmmaanntt
           This option marks the generated code as IEEE conformant.  You must
           not use this option unless you also specify --mmttrraapp--pprreecciissiioonn==ii and
           either --mmffpp--ttrraapp--mmooddee==ssuu or --mmffpp--ttrraapp--mmooddee==ssuuii.  Its only effect is
           to emit the line ..eeffllaagg 4488 in the function prologue of the
           generated assembly file.

       --mmbbuuiilldd--ccoonnssttaannttss
           Normally GCC examines a 32- or 64-bit integer constant to see if it
           can construct it from smaller constants in two or three
           instructions.  If it cannot, it outputs the constant as a literal
           and generates code to load it from the data segment at run time.

           Use this option to require GCC to construct _a_l_l integer constants
           using code, even if it takes more instructions (the maximum is
           six).

           You typically use this option to build a shared library dynamic
           loader.  Itself a shared library, it must relocate itself in memory
           before it can find the variables and constants in its own data
           segment.

       --mmbbwwxx
       --mmnnoo--bbwwxx
       --mmcciixx
       --mmnnoo--cciixx
       --mmffiixx
       --mmnnoo--ffiixx
       --mmmmaaxx
       --mmnnoo--mmaaxx
           Indicate whether GCC should generate code to use the optional BWX,
           CIX, FIX and MAX instruction sets.  The default is to use the
           instruction sets supported by the CPU type specified via --mmccppuu==
           option or that of the CPU on which GCC was built if none is
           specified.

       --mmffllooaatt--vvaaxx
       --mmffllooaatt--iieeeeee
           Generate code that uses (does not use) VAX F and G floating-point
           arithmetic instead of IEEE single and double precision.

       --mmeexxpplliicciitt--rreellooccss
       --mmnnoo--eexxpplliicciitt--rreellooccss
           Older Alpha assemblers provided no way to generate symbol
           relocations except via assembler macros.  Use of these macros does
           not allow optimal instruction scheduling.  GNU binutils as of
           version 2.12 supports a new syntax that allows the compiler to
           explicitly mark which relocations should apply to which
           instructions.  This option is mostly useful for debugging, as GCC
           detects the capabilities of the assembler when it is built and sets
           the default accordingly.

       --mmssmmaallll--ddaattaa
       --mmllaarrggee--ddaattaa
           When --mmeexxpplliicciitt--rreellooccss is in effect, static data is accessed via
           _g_p_-_r_e_l_a_t_i_v_e relocations.  When --mmssmmaallll--ddaattaa is used, objects 8
           bytes long or smaller are placed in a _s_m_a_l_l _d_a_t_a _a_r_e_a (the ".sdata"
           and ".sbss" sections) and are accessed via 16-bit relocations off
           of the $gp register.  This limits the size of the small data area
           to 64KB, but allows the variables to be directly accessed via a
           single instruction.

           The default is --mmllaarrggee--ddaattaa.  With this option the data area is
           limited to just below 2GB.  Programs that require more than 2GB of
           data must use "malloc" or "mmap" to allocate the data in the heap
           instead of in the program's data segment.

           When generating code for shared libraries, --ffppiicc implies
           --mmssmmaallll--ddaattaa and --ffPPIICC implies --mmllaarrggee--ddaattaa.

       --mmssmmaallll--tteexxtt
       --mmllaarrggee--tteexxtt
           When --mmssmmaallll--tteexxtt is used, the compiler assumes that the code of
           the entire program (or shared library) fits in 4MB, and is thus
           reachable with a branch instruction.  When --mmssmmaallll--ddaattaa is used,
           the compiler can assume that all local symbols share the same $gp
           value, and thus reduce the number of instructions required for a
           function call from 4 to 1.

           The default is --mmllaarrggee--tteexxtt.

       --mmccppuu==_c_p_u___t_y_p_e
           Set the instruction set and instruction scheduling parameters for
           machine type _c_p_u___t_y_p_e.  You can specify either the EEVV style name or
           the corresponding chip number.  GCC supports scheduling parameters
           for the EV4, EV5 and EV6 family of processors and chooses the
           default values for the instruction set from the processor you
           specify.  If you do not specify a processor type, GCC defaults to
           the processor on which the compiler was built.

           Supported values for _c_p_u___t_y_p_e are

           eevv44
           eevv4455
           2211006644
               Schedules as an EV4 and has no instruction set extensions.

           eevv55
           2211116644
               Schedules as an EV5 and has no instruction set extensions.

           eevv5566
           2211116644aa
               Schedules as an EV5 and supports the BWX extension.

           ppccaa5566
           2211116644ppcc
           2211116644PPCC
               Schedules as an EV5 and supports the BWX and MAX extensions.

           eevv66
           2211226644
               Schedules as an EV6 and supports the BWX, FIX, and MAX
               extensions.

           eevv6677
           2211226644aa
               Schedules as an EV6 and supports the BWX, CIX, FIX, and MAX
               extensions.

           Native toolchains also support the value nnaattiivvee, which selects the
           best architecture option for the host processor.  --mmccppuu==nnaattiivvee has
           no effect if GCC does not recognize the processor.

       --mmttuunnee==_c_p_u___t_y_p_e
           Set only the instruction scheduling parameters for machine type
           _c_p_u___t_y_p_e.  The instruction set is not changed.

           Native toolchains also support the value nnaattiivvee, which selects the
           best architecture option for the host processor.  --mmttuunnee==nnaattiivvee has
           no effect if GCC does not recognize the processor.

       --mmmmeemmoorryy--llaatteennccyy==_t_i_m_e
           Sets the latency the scheduler should assume for typical memory
           references as seen by the application.  This number is highly
           dependent on the memory access patterns used by the application and
           the size of the external cache on the machine.

           Valid options for _t_i_m_e are

           _n_u_m_b_e_r
               A decimal number representing clock cycles.

           LL11
           LL22
           LL33
           mmaaiinn
               The compiler contains estimates of the number of clock cycles
               for "typical" EV4 & EV5 hardware for the Level 1, 2 & 3 caches
               (also called Dcache, Scache, and Bcache), as well as to main
               memory.  Note that L3 is only valid for EV5.

       _F_R_3_0 _O_p_t_i_o_n_s

       These options are defined specifically for the FR30 port.

       --mmssmmaallll--mmooddeell
           Use the small address space model.  This can produce smaller code,
           but it does assume that all symbolic values and addresses fit into
           a 20-bit range.

       --mmnnoo--llssiimm
           Assume that runtime support has been provided and so there is no
           need to include the simulator library (_l_i_b_s_i_m_._a) on the linker
           command line.

       _F_T_3_2 _O_p_t_i_o_n_s

       These options are defined specifically for the FT32 port.

       --mmssiimm
           Specifies that the program will be run on the simulator.  This
           causes an alternate runtime startup and library to be linked.  You
           must not use this option when generating programs that will run on
           real hardware; you must provide your own runtime library for
           whatever I/O functions are needed.

       --mmllrraa
           Enable Local Register Allocation.  This is still experimental for
           FT32, so by default the compiler uses standard reload.

       --mmnnooddiivv
           Do not use div and mod instructions.

       --mmfftt3322bb
           Enable use of the extended instructions of the FT32B processor.

       --mmccoommpprreessss
           Compress all code using the Ft32B code compression scheme.

       --mmnnooppmm
           Do not generate code that reads program memory.

       _F_R_V _O_p_t_i_o_n_s

       --mmggpprr--3322
           Only use the first 32 general-purpose registers.

       --mmggpprr--6644
           Use all 64 general-purpose registers.

       --mmffpprr--3322
           Use only the first 32 floating-point registers.

       --mmffpprr--6644
           Use all 64 floating-point registers.

       --mmhhaarrdd--ffllooaatt
           Use hardware instructions for floating-point operations.

       --mmssoofftt--ffllooaatt
           Use library routines for floating-point operations.

       --mmaalllloocc--cccc
           Dynamically allocate condition code registers.

       --mmffiixxeedd--cccc
           Do not try to dynamically allocate condition code registers, only
           use "icc0" and "fcc0".

       --mmddwwoorrdd
           Change ABI to use double word insns.

       --mmnnoo--ddwwoorrdd
           Do not use double word instructions.

       --mmddoouubbllee
           Use floating-point double instructions.

       --mmnnoo--ddoouubbllee
           Do not use floating-point double instructions.

       --mmmmeeddiiaa
           Use media instructions.

       --mmnnoo--mmeeddiiaa
           Do not use media instructions.

       --mmmmuullaadddd
           Use multiply and add/subtract instructions.

       --mmnnoo--mmuullaadddd
           Do not use multiply and add/subtract instructions.

       --mmffddppiicc
           Select the FDPIC ABI, which uses function descriptors to represent
           pointers to functions.  Without any PIC/PIE-related options, it
           implies --ffPPIIEE.  With --ffppiicc or --ffppiiee, it assumes GOT entries and
           small data are within a 12-bit range from the GOT base address;
           with --ffPPIICC or --ffPPIIEE, GOT offsets are computed with 32 bits.  With a
           bbffiinn--eellff target, this option implies --mmssiimm.

       --mmiinnlliinnee--pplltt
           Enable inlining of PLT entries in function calls to functions that
           are not known to bind locally.  It has no effect without --mmffddppiicc.
           It's enabled by default if optimizing for speed and compiling for
           shared libraries (i.e., --ffPPIICC or --ffppiicc), or when an optimization
           option such as --OO33 or above is present in the command line.

       --mmTTLLSS
           Assume a large TLS segment when generating thread-local code.

       --mmttllss
           Do not assume a large TLS segment when generating thread-local
           code.

       --mmggpprreell--rroo
           Enable the use of "GPREL" relocations in the FDPIC ABI for data
           that is known to be in read-only sections.  It's enabled by
           default, except for --ffppiicc or --ffppiiee: even though it may help make
           the global offset table smaller, it trades 1 instruction for 4.
           With --ffPPIICC or --ffPPIIEE, it trades 3 instructions for 4, one of which
           may be shared by multiple symbols, and it avoids the need for a GOT
           entry for the referenced symbol, so it's more likely to be a win.
           If it is not, --mmnnoo--ggpprreell--rroo can be used to disable it.

       --mmuullttiilliibb--lliibbrraarryy--ppiicc
           Link with the (library, not FD) pic libraries.  It's implied by
           --mmlliibbrraarryy--ppiicc, as well as by --ffPPIICC and --ffppiicc without --mmffddppiicc.  You
           should never have to use it explicitly.

       --mmlliinnkkeedd--ffpp
           Follow the EABI requirement of always creating a frame pointer
           whenever a stack frame is allocated.  This option is enabled by
           default and can be disabled with --mmnnoo--lliinnkkeedd--ffpp.

       --mmlloonngg--ccaallllss
           Use indirect addressing to call functions outside the current
           compilation unit.  This allows the functions to be placed anywhere
           within the 32-bit address space.

       --mmaalliiggnn--llaabbeellss
           Try to align labels to an 8-byte boundary by inserting NOPs into
           the previous packet.  This option only has an effect when VLIW
           packing is enabled.  It doesn't create new packets; it merely adds
           NOPs to existing ones.

       --mmlliibbrraarryy--ppiicc
           Generate position-independent EABI code.

       --mmaacccc--44
           Use only the first four media accumulator registers.

       --mmaacccc--88
           Use all eight media accumulator registers.

       --mmppaacckk
           Pack VLIW instructions.

       --mmnnoo--ppaacckk
           Do not pack VLIW instructions.

       --mmnnoo--eeffllaaggss
           Do not mark ABI switches in e_flags.

       --mmccoonndd--mmoovvee
           Enable the use of conditional-move instructions (default).

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmnnoo--ccoonndd--mmoovvee
           Disable the use of conditional-move instructions.

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmsscccc
           Enable the use of conditional set instructions (default).

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmnnoo--sscccc
           Disable the use of conditional set instructions.

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmccoonndd--eexxeecc
           Enable the use of conditional execution (default).

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmnnoo--ccoonndd--eexxeecc
           Disable the use of conditional execution.

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmvvlliiww--bbrraanncchh
           Run a pass to pack branches into VLIW instructions (default).

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmnnoo--vvlliiww--bbrraanncchh
           Do not run a pass to pack branches into VLIW instructions.

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmmmuullttii--ccoonndd--eexxeecc
           Enable optimization of "&&" and "||" in conditional execution
           (default).

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmnnoo--mmuullttii--ccoonndd--eexxeecc
           Disable optimization of "&&" and "||" in conditional execution.

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmnneesstteedd--ccoonndd--eexxeecc
           Enable nested conditional execution optimizations (default).

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmnnoo--nneesstteedd--ccoonndd--eexxeecc
           Disable nested conditional execution optimizations.

           This switch is mainly for debugging the compiler and will likely be
           removed in a future version.

       --mmooppttiimmiizzee--mmeemmbbaarr
           This switch removes redundant "membar" instructions from the
           compiler-generated code.  It is enabled by default.

       --mmnnoo--ooppttiimmiizzee--mmeemmbbaarr
           This switch disables the automatic removal of redundant "membar"
           instructions from the generated code.

       --mmttoommccaatt--ssttaattss
           Cause gas to print out tomcat statistics.

       --mmccppuu==_c_p_u
           Select the processor type for which to generate code.  Possible
           values are ffrrvv, ffrr555500, ttoommccaatt, ffrr550000, ffrr445500, ffrr440055, ffrr440000, ffrr330000
           and ssiimmppllee.

       _G_N_U_/_L_i_n_u_x _O_p_t_i_o_n_s

       These --mm options are defined for GNU/Linux targets:

       --mmgglliibbcc
           Use the GNU C library.  This is the default except on
           **--**--lliinnuuxx--**uucclliibbcc**, **--**--lliinnuuxx--**mmuussll** and **--**--lliinnuuxx--**aannddrrooiidd**
           targets.

       --mmuucclliibbcc
           Use uClibc C library.  This is the default on **--**--lliinnuuxx--**uucclliibbcc**
           targets.

       --mmmmuussll
           Use the musl C library.  This is the default on **--**--lliinnuuxx--**mmuussll**
           targets.

       --mmbbiioonniicc
           Use Bionic C library.  This is the default on **--**--lliinnuuxx--**aannddrrooiidd**
           targets.

       --mmaannddrrooiidd
           Compile code compatible with Android platform.  This is the default
           on **--**--lliinnuuxx--**aannddrrooiidd** targets.

           When compiling, this option enables --mmbbiioonniicc, --ffPPIICC,
           --ffnnoo--eexxcceeppttiioonnss and --ffnnoo--rrttttii by default.  When linking, this
           option makes the GCC driver pass Android-specific options to the
           linker.  Finally, this option causes the preprocessor macro
           "__ANDROID__" to be defined.

       --ttnnoo--aannddrrooiidd--cccc
           Disable compilation effects of --mmaannddrrooiidd, i.e., do not enable
           --mmbbiioonniicc, --ffPPIICC, --ffnnoo--eexxcceeppttiioonnss and --ffnnoo--rrttttii by default.

       --ttnnoo--aannddrrooiidd--lldd
           Disable linking effects of --mmaannddrrooiidd, i.e., pass standard Linux
           linking options to the linker.

       _H_8_/_3_0_0 _O_p_t_i_o_n_s

       These --mm options are defined for the H8/300 implementations:

       --mmrreellaaxx
           Shorten some address references at link time, when possible; uses
           the linker option --rreellaaxx.

       --mmhh Generate code for the H8/300H.

       --mmss Generate code for the H8S.

       --mmnn Generate code for the H8S and H8/300H in the normal mode.  This
           switch must be used either with --mmhh or --mmss.

       --mmss22660000
           Generate code for the H8S/2600.  This switch must be used with --mmss.

       --mmeexxrr
           Extended registers are stored on stack before execution of function
           with monitor attribute. Default option is --mmeexxrr.  This option is
           valid only for H8S targets.

       --mmnnoo--eexxrr
           Extended registers are not stored on stack before execution of
           function with monitor attribute. Default option is --mmnnoo--eexxrr.  This
           option is valid only for H8S targets.

       --mmiinntt3322
           Make "int" data 32 bits by default.

       --mmaalliiggnn--330000
           On the H8/300H and H8S, use the same alignment rules as for the
           H8/300.  The default for the H8/300H and H8S is to align longs and
           floats on 4-byte boundaries.  --mmaalliiggnn--330000 causes them to be aligned
           on 2-byte boundaries.  This option has no effect on the H8/300.

       _H_P_P_A _O_p_t_i_o_n_s

       These --mm options are defined for the HPPA family of computers:

       --mmaarrcchh==_a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e
           Generate code for the specified architecture.  The choices for
           _a_r_c_h_i_t_e_c_t_u_r_e_-_t_y_p_e are 11..00 for PA 1.0, 11..11 for PA 1.1, and 22..00 for
           PA 2.0 processors.  Refer to _/_u_s_r_/_l_i_b_/_s_c_h_e_d_._m_o_d_e_l_s on an HP-UX
           system to determine the proper architecture option for your
           machine.  Code compiled for lower numbered architectures runs on
           higher numbered architectures, but not the other way around.

       --mmppaa--rriisscc--11--00
       --mmppaa--rriisscc--11--11
       --mmppaa--rriisscc--22--00
           Synonyms for --mmaarrcchh==11..00, --mmaarrcchh==11..11, and --mmaarrcchh==22..00 respectively.

       --mmccaalllleerr--ccooppiieess
           The caller copies function arguments passed by hidden reference.
           This option should be used with care as it is not compatible with
           the default 32-bit runtime.  However, only aggregates larger than
           eight bytes are passed by hidden reference and the option provides
           better compatibility with OpenMP.

       --mmjjuummpp--iinn--ddeellaayy
           This option is ignored and provided for compatibility purposes
           only.

       --mmddiissaabbllee--ffpprreeggss
           Prevent floating-point registers from being used in any manner.
           This is necessary for compiling kernels that perform lazy context
           switching of floating-point registers.  If you use this option and
           attempt to perform floating-point operations, the compiler aborts.

       --mmddiissaabbllee--iinnddeexxiinngg
           Prevent the compiler from using indexing address modes.  This
           avoids some rather obscure problems when compiling MIG generated
           code under MACH.

       --mmnnoo--ssppaaccee--rreeggss
           Generate code that assumes the target has no space registers.  This
           allows GCC to generate faster indirect calls and use unscaled index
           address modes.

           Such code is suitable for level 0 PA systems and kernels.

       --mmffaasstt--iinnddiirreecctt--ccaallllss
           Generate code that assumes calls never cross space boundaries.
           This allows GCC to emit code that performs faster indirect calls.

           This option does not work in the presence of shared libraries or
           nested functions.

       --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           Generate code treating the given register range as fixed registers.
           A fixed register is one that the register allocator cannot use.
           This is useful when compiling kernel code.  A register range is
           specified as two registers separated by a dash.  Multiple register
           ranges can be specified separated by a comma.

       --mmlloonngg--llooaadd--ssttoorree
           Generate 3-instruction load and store sequences as sometimes
           required by the HP-UX 10 linker.  This is equivalent to the ++kk
           option to the HP compilers.

       --mmppoorrttaabbllee--rruunnttiimmee
           Use the portable calling conventions proposed by HP for ELF
           systems.

       --mmggaass
           Enable the use of assembler directives only GAS understands.

       --mmsscchheedduullee==_c_p_u_-_t_y_p_e
           Schedule code according to the constraints for the machine type
           _c_p_u_-_t_y_p_e.  The choices for _c_p_u_-_t_y_p_e are 770000 77110000, 77110000LLCC, 77220000,
           77330000 and 88000000.  Refer to _/_u_s_r_/_l_i_b_/_s_c_h_e_d_._m_o_d_e_l_s on an HP-UX system
           to determine the proper scheduling option for your machine.  The
           default scheduling is 88000000.

       --mmlliinnkkeerr--oopptt
           Enable the optimization pass in the HP-UX linker.  Note this makes
           symbolic debugging impossible.  It also triggers a bug in the HP-UX
           8 and HP-UX 9 linkers in which they give bogus error messages when
           linking some programs.

       --mmssoofftt--ffllooaatt
           Generate output containing library calls for floating point.
           WWaarrnniinngg:: the requisite libraries are not available for all HPPA
           targets.  Normally the facilities of the machine's usual C compiler
           are used, but this cannot be done directly in cross-compilation.
           You must make your own arrangements to provide suitable library
           functions for cross-compilation.

           --mmssoofftt--ffllooaatt changes the calling convention in the output file;
           therefore, it is only useful if you compile _a_l_l of a program with
           this option.  In particular, you need to compile _l_i_b_g_c_c_._a, the
           library that comes with GCC, with --mmssoofftt--ffllooaatt in order for this to
           work.

       --mmssiioo
           Generate the predefine, "_SIO", for server IO.  The default is
           --mmwwssiioo.  This generates the predefines, "__hp9000s700",
           "__hp9000s700__" and "_WSIO", for workstation IO.  These options
           are available under HP-UX and HI-UX.

       --mmggnnuu--lldd
           Use options specific to GNU lldd.  This passes --sshhaarreedd to lldd when
           building a shared library.  It is the default when GCC is
           configured, explicitly or implicitly, with the GNU linker.  This
           option does not affect which lldd is called; it only changes what
           parameters are passed to that lldd.  The lldd that is called is
           determined by the ----wwiitthh--lldd configure option, GCC's program search
           path, and finally by the user's PPAATTHH.  The linker used by GCC can
           be printed using wwhhiicchh ``ggcccc --pprriinntt--pprroogg--nnaammee==lldd``.  This option is
           only available on the 64-bit HP-UX GCC, i.e. configured with
           hhppppaa**6644**--**--hhppuuxx**.

       --mmhhpp--lldd
           Use options specific to HP lldd.  This passes --bb to lldd when building
           a shared library and passes ++AAcccceepptt TTyyppeeMMiissmmaattcchh to lldd on all
           links.  It is the default when GCC is configured, explicitly or
           implicitly, with the HP linker.  This option does not affect which
           lldd is called; it only changes what parameters are passed to that
           lldd.  The lldd that is called is determined by the ----wwiitthh--lldd configure
           option, GCC's program search path, and finally by the user's PPAATTHH.
           The linker used by GCC can be printed using wwhhiicchh ``ggcccc
           --pprriinntt--pprroogg--nnaammee==lldd``.  This option is only available on the 64-bit
           HP-UX GCC, i.e. configured with hhppppaa**6644**--**--hhppuuxx**.

       --mmlloonngg--ccaallllss
           Generate code that uses long call sequences.  This ensures that a
           call is always able to reach linker generated stubs.  The default
           is to generate long calls only when the distance from the call site
           to the beginning of the function or translation unit, as the case
           may be, exceeds a predefined limit set by the branch type being
           used.  The limits for normal calls are 7,600,000 and 240,000 bytes,
           respectively for the PA 2.0 and PA 1.X architectures.  Sibcalls are
           always limited at 240,000 bytes.

           Distances are measured from the beginning of functions when using
           the --ffffuunnccttiioonn--sseeccttiioonnss option, or when using the --mmggaass and
           --mmnnoo--ppoorrttaabbllee--rruunnttiimmee options together under HP-UX with the SOM
           linker.

           It is normally not desirable to use this option as it degrades
           performance.  However, it may be useful in large applications,
           particularly when partial linking is used to build the application.

           The types of long calls used depends on the capabilities of the
           assembler and linker, and the type of code being generated.  The
           impact on systems that support long absolute calls, and long pic
           symbol-difference or pc-relative calls should be relatively small.
           However, an indirect call is used on 32-bit ELF systems in pic code
           and it is quite long.

       --mmuunniixx==_u_n_i_x_-_s_t_d
           Generate compiler predefines and select a startfile for the
           specified UNIX standard.  The choices for _u_n_i_x_-_s_t_d are 9933, 9955 and
           9988.  9933 is supported on all HP-UX versions.  9955 is available on HP-
           UX 10.10 and later.  9988 is available on HP-UX 11.11 and later.  The
           default values are 9933 for HP-UX 10.00, 9955 for HP-UX 10.10 though to
           11.00, and 9988 for HP-UX 11.11 and later.

           --mmuunniixx==9933 provides the same predefines as GCC 3.3 and 3.4.
           --mmuunniixx==9955 provides additional predefines for "XOPEN_UNIX" and
           "_XOPEN_SOURCE_EXTENDED", and the startfile _u_n_i_x_9_5_._o.  --mmuunniixx==9988
           provides additional predefines for "_XOPEN_UNIX",
           "_XOPEN_SOURCE_EXTENDED", "_INCLUDE__STDC_A1_SOURCE" and
           "_INCLUDE_XOPEN_SOURCE_500", and the startfile _u_n_i_x_9_8_._o.

           It is _i_m_p_o_r_t_a_n_t to note that this option changes the interfaces for
           various library routines.  It also affects the operational behavior
           of the C library.  Thus, _e_x_t_r_e_m_e care is needed in using this
           option.

           Library code that is intended to operate with more than one UNIX
           standard must test, set and restore the variable
           "__xpg4_extended_mask" as appropriate.  Most GNU software doesn't
           provide this capability.

       --nnoolliibbddlldd
           Suppress the generation of link options to search libdld.sl when
           the --ssttaattiicc option is specified on HP-UX 10 and later.

       --ssttaattiicc
           The HP-UX implementation of setlocale in libc has a dependency on
           libdld.sl.  There isn't an archive version of libdld.sl.  Thus,
           when the --ssttaattiicc option is specified, special link options are
           needed to resolve this dependency.

           On HP-UX 10 and later, the GCC driver adds the necessary options to
           link with libdld.sl when the --ssttaattiicc option is specified.  This
           causes the resulting binary to be dynamic.  On the 64-bit port, the
           linkers generate dynamic binaries by default in any case.  The
           --nnoolliibbddlldd option can be used to prevent the GCC driver from adding
           these link options.

       --tthhrreeaaddss
           Add support for multithreading with the _d_c_e _t_h_r_e_a_d library under
           HP-UX.  This option sets flags for both the preprocessor and
           linker.

       _I_A_-_6_4 _O_p_t_i_o_n_s

       These are the --mm options defined for the Intel IA-64 architecture.

       --mmbbiigg--eennddiiaann
           Generate code for a big-endian target.  This is the default for HP-
           UX.

       --mmlliittttllee--eennddiiaann
           Generate code for a little-endian target.  This is the default for
           AIX5 and GNU/Linux.

       --mmggnnuu--aass
       --mmnnoo--ggnnuu--aass
           Generate (or don't) code for the GNU assembler.  This is the
           default.

       --mmggnnuu--lldd
       --mmnnoo--ggnnuu--lldd
           Generate (or don't) code for the GNU linker.  This is the default.

       --mmnnoo--ppiicc
           Generate code that does not use a global pointer register.  The
           result is not position independent code, and violates the IA-64
           ABI.

       --mmvvoollaattiillee--aassmm--ssttoopp
       --mmnnoo--vvoollaattiillee--aassmm--ssttoopp
           Generate (or don't) a stop bit immediately before and after
           volatile asm statements.

       --mmrreeggiisstteerr--nnaammeess
       --mmnnoo--rreeggiisstteerr--nnaammeess
           Generate (or don't) iinn, lloocc, and oouutt register names for the stacked
           registers.  This may make assembler output more readable.

       --mmnnoo--ssddaattaa
       --mmssddaattaa
           Disable (or enable) optimizations that use the small data section.
           This may be useful for working around optimizer bugs.

       --mmccoonnssttaanntt--ggpp
           Generate code that uses a single constant global pointer value.
           This is useful when compiling kernel code.

       --mmaauuttoo--ppiicc
           Generate code that is self-relocatable.  This implies
           --mmccoonnssttaanntt--ggpp.  This is useful when compiling firmware code.

       --mmiinnlliinnee--ffllooaatt--ddiivviiddee--mmiinn--llaatteennccyy
           Generate code for inline divides of floating-point values using the
           minimum latency algorithm.

       --mmiinnlliinnee--ffllooaatt--ddiivviiddee--mmaaxx--tthhrroouugghhppuutt
           Generate code for inline divides of floating-point values using the
           maximum throughput algorithm.

       --mmnnoo--iinnlliinnee--ffllooaatt--ddiivviiddee
           Do not generate inline code for divides of floating-point values.

       --mmiinnlliinnee--iinntt--ddiivviiddee--mmiinn--llaatteennccyy
           Generate code for inline divides of integer values using the
           minimum latency algorithm.

       --mmiinnlliinnee--iinntt--ddiivviiddee--mmaaxx--tthhrroouugghhppuutt
           Generate code for inline divides of integer values using the
           maximum throughput algorithm.

       --mmnnoo--iinnlliinnee--iinntt--ddiivviiddee
           Do not generate inline code for divides of integer values.

       --mmiinnlliinnee--ssqqrrtt--mmiinn--llaatteennccyy
           Generate code for inline square roots using the minimum latency
           algorithm.

       --mmiinnlliinnee--ssqqrrtt--mmaaxx--tthhrroouugghhppuutt
           Generate code for inline square roots using the maximum throughput
           algorithm.

       --mmnnoo--iinnlliinnee--ssqqrrtt
           Do not generate inline code for "sqrt".

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Do (don't) generate code that uses the fused multiply/add or
           multiply/subtract instructions.  The default is to use these
           instructions.

       --mmnnoo--ddwwaarrff22--aassmm
       --mmddwwaarrff22--aassmm
           Don't (or do) generate assembler code for the DWARF line number
           debugging info.  This may be useful when not using the GNU
           assembler.

       --mmeeaarrllyy--ssttoopp--bbiittss
       --mmnnoo--eeaarrllyy--ssttoopp--bbiittss
           Allow stop bits to be placed earlier than immediately preceding the
           instruction that triggered the stop bit.  This can improve
           instruction scheduling, but does not always do so.

       --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           Generate code treating the given register range as fixed registers.
           A fixed register is one that the register allocator cannot use.
           This is useful when compiling kernel code.  A register range is
           specified as two registers separated by a dash.  Multiple register
           ranges can be specified separated by a comma.

       --mmttllss--ssiizzee==_t_l_s_-_s_i_z_e
           Specify bit size of immediate TLS offsets.  Valid values are 14,
           22, and 64.

       --mmttuunnee==_c_p_u_-_t_y_p_e
           Tune the instruction scheduling for a particular CPU, Valid values
           are iittaanniiuumm, iittaanniiuumm11, mmeerrcceedd, iittaanniiuumm22, and mmcckkiinnlleeyy.

       --mmiillpp3322
       --mmllpp6644
           Generate code for a 32-bit or 64-bit environment.  The 32-bit
           environment sets int, long and pointer to 32 bits.  The 64-bit
           environment sets int to 32 bits and long and pointer to 64 bits.
           These are HP-UX specific flags.

       --mmnnoo--sscchheedd--bbrr--ddaattaa--ssppeecc
       --mmsscchheedd--bbrr--ddaattaa--ssppeecc
           (Dis/En)able data speculative scheduling before reload.  This
           results in generation of "ld.a" instructions and the corresponding
           check instructions ("ld.c" / "chk.a").  The default setting is
           disabled.

       --mmsscchheedd--aarr--ddaattaa--ssppeecc
       --mmnnoo--sscchheedd--aarr--ddaattaa--ssppeecc
           (En/Dis)able data speculative scheduling after reload.  This
           results in generation of "ld.a" instructions and the corresponding
           check instructions ("ld.c" / "chk.a").  The default setting is
           enabled.

       --mmnnoo--sscchheedd--ccoonnttrrooll--ssppeecc
       --mmsscchheedd--ccoonnttrrooll--ssppeecc
           (Dis/En)able control speculative scheduling.  This feature is
           available only during region scheduling (i.e. before reload).  This
           results in generation of the "ld.s" instructions and the
           corresponding check instructions "chk.s".  The default setting is
           disabled.

       --mmsscchheedd--bbrr--iinn--ddaattaa--ssppeecc
       --mmnnoo--sscchheedd--bbrr--iinn--ddaattaa--ssppeecc
           (En/Dis)able speculative scheduling of the instructions that are
           dependent on the data speculative loads before reload.  This is
           effective only with --mmsscchheedd--bbrr--ddaattaa--ssppeecc enabled.  The default
           setting is enabled.

       --mmsscchheedd--aarr--iinn--ddaattaa--ssppeecc
       --mmnnoo--sscchheedd--aarr--iinn--ddaattaa--ssppeecc
           (En/Dis)able speculative scheduling of the instructions that are
           dependent on the data speculative loads after reload.  This is
           effective only with --mmsscchheedd--aarr--ddaattaa--ssppeecc enabled.  The default
           setting is enabled.

       --mmsscchheedd--iinn--ccoonnttrrooll--ssppeecc
       --mmnnoo--sscchheedd--iinn--ccoonnttrrooll--ssppeecc
           (En/Dis)able speculative scheduling of the instructions that are
           dependent on the control speculative loads.  This is effective only
           with --mmsscchheedd--ccoonnttrrooll--ssppeecc enabled.  The default setting is enabled.

       --mmnnoo--sscchheedd--pprreeffeerr--nnoonn--ddaattaa--ssppeecc--iinnssnnss
       --mmsscchheedd--pprreeffeerr--nnoonn--ddaattaa--ssppeecc--iinnssnnss
           If enabled, data-speculative instructions are chosen for schedule
           only if there are no other choices at the moment.  This makes the
           use of the data speculation much more conservative.  The default
           setting is disabled.

       --mmnnoo--sscchheedd--pprreeffeerr--nnoonn--ccoonnttrrooll--ssppeecc--iinnssnnss
       --mmsscchheedd--pprreeffeerr--nnoonn--ccoonnttrrooll--ssppeecc--iinnssnnss
           If enabled, control-speculative instructions are chosen for
           schedule only if there are no other choices at the moment.  This
           makes the use of the control speculation much more conservative.
           The default setting is disabled.

       --mmnnoo--sscchheedd--ccoouunntt--ssppeecc--iinn--ccrriittiiccaall--ppaatthh
       --mmsscchheedd--ccoouunntt--ssppeecc--iinn--ccrriittiiccaall--ppaatthh
           If enabled, speculative dependencies are considered during
           computation of the instructions priorities.  This makes the use of
           the speculation a bit more conservative.  The default setting is
           disabled.

       --mmsscchheedd--ssppeecc--llddcc
           Use a simple data speculation check.  This option is on by default.

       --mmsscchheedd--ccoonnttrrooll--ssppeecc--llddcc
           Use a simple check for control speculation.  This option is on by
           default.

       --mmsscchheedd--ssttoopp--bbiittss--aafftteerr--eevveerryy--ccyyccllee
           Place a stop bit after every cycle when scheduling.  This option is
           on by default.

       --mmsscchheedd--ffpp--mmeemm--ddeeppss--zzeerroo--ccoosstt
           Assume that floating-point stores and loads are not likely to cause
           a conflict when placed into the same instruction group.  This
           option is disabled by default.

       --mmsseell--sscchheedd--ddoonntt--cchheecckk--ccoonnttrrooll--ssppeecc
           Generate checks for control speculation in selective scheduling.
           This flag is disabled by default.

       --mmsscchheedd--mmaaxx--mmeemmoorryy--iinnssnnss==_m_a_x_-_i_n_s_n_s
           Limit on the number of memory insns per instruction group, giving
           lower priority to subsequent memory insns attempting to schedule in
           the same instruction group. Frequently useful to prevent cache bank
           conflicts.  The default value is 1.

       --mmsscchheedd--mmaaxx--mmeemmoorryy--iinnssnnss--hhaarrdd--lliimmiitt
           Makes the limit specified by mmsscchheedd--mmaaxx--mmeemmoorryy--iinnssnnss a hard limit,
           disallowing more than that number in an instruction group.
           Otherwise, the limit is "soft", meaning that non-memory operations
           are preferred when the limit is reached, but memory operations may
           still be scheduled.

       _L_M_3_2 _O_p_t_i_o_n_s

       These --mm options are defined for the LatticeMico32 architecture:

       --mmbbaarrrreell--sshhiifftt--eennaabblleedd
           Enable barrel-shift instructions.

       --mmddiivviiddee--eennaabblleedd
           Enable divide and modulus instructions.

       --mmmmuullttiippllyy--eennaabblleedd
           Enable multiply instructions.

       --mmssiiggnn--eexxtteenndd--eennaabblleedd
           Enable sign extend instructions.

       --mmuusseerr--eennaabblleedd
           Enable user-defined instructions.

       _M_3_2_C _O_p_t_i_o_n_s

       --mmccppuu==_n_a_m_e
           Select the CPU for which code is generated.  _n_a_m_e may be one of rr88cc
           for the R8C/Tiny series, mm1166cc for the M16C (up to /60) series,
           mm3322ccmm for the M16C/80 series, or mm3322cc for the M32C/80 series.

       --mmssiimm
           Specifies that the program will be run on the simulator.  This
           causes an alternate runtime library to be linked in which supports,
           for example, file I/O.  You must not use this option when
           generating programs that will run on real hardware; you must
           provide your own runtime library for whatever I/O functions are
           needed.

       --mmeemmrreeggss==_n_u_m_b_e_r
           Specifies the number of memory-based pseudo-registers GCC uses
           during code generation.  These pseudo-registers are used like real
           registers, so there is a tradeoff between GCC's ability to fit the
           code into available registers, and the performance penalty of using
           memory instead of registers.  Note that all modules in a program
           must be compiled with the same value for this option.  Because of
           that, you must not use this option with GCC's default runtime
           libraries.

       _M_3_2_R_/_D _O_p_t_i_o_n_s

       These --mm options are defined for Renesas M32R/D architectures:

       --mm3322rr22
           Generate code for the M32R/2.

       --mm3322rrxx
           Generate code for the M32R/X.

       --mm3322rr
           Generate code for the M32R.  This is the default.

       --mmmmooddeell==ssmmaallll
           Assume all objects live in the lower 16MB of memory (so that their
           addresses can be loaded with the "ld24" instruction), and assume
           all subroutines are reachable with the "bl" instruction.  This is
           the default.

           The addressability of a particular object can be set with the
           "model" attribute.

       --mmmmooddeell==mmeeddiiuumm
           Assume objects may be anywhere in the 32-bit address space (the
           compiler generates "seth/add3" instructions to load their
           addresses), and assume all subroutines are reachable with the "bl"
           instruction.

       --mmmmooddeell==llaarrggee
           Assume objects may be anywhere in the 32-bit address space (the
           compiler generates "seth/add3" instructions to load their
           addresses), and assume subroutines may not be reachable with the
           "bl" instruction (the compiler generates the much slower
           "seth/add3/jl" instruction sequence).

       --mmssddaattaa==nnoonnee
           Disable use of the small data area.  Variables are put into one of
           ".data", ".bss", or ".rodata" (unless the "section" attribute has
           been specified).  This is the default.

           The small data area consists of sections ".sdata" and ".sbss".
           Objects may be explicitly put in the small data area with the
           "section" attribute using one of these sections.

       --mmssddaattaa==ssddaattaa
           Put small global and static data in the small data area, but do not
           generate special code to reference them.

       --mmssddaattaa==uussee
           Put small global and static data in the small data area, and
           generate special instructions to reference them.

       --GG _n_u_m
           Put global and static objects less than or equal to _n_u_m bytes into
           the small data or BSS sections instead of the normal data or BSS
           sections.  The default value of _n_u_m is 8.  The --mmssddaattaa option must
           be set to one of ssddaattaa or uussee for this option to have any effect.

           All modules should be compiled with the same --GG _n_u_m value.
           Compiling with different values of _n_u_m may or may not work; if it
           doesn't the linker gives an error message---incorrect code is not
           generated.

       --mmddeebbuugg
           Makes the M32R-specific code in the compiler display some
           statistics that might help in debugging programs.

       --mmaalliiggnn--llooooppss
           Align all loops to a 32-byte boundary.

       --mmnnoo--aalliiggnn--llooooppss
           Do not enforce a 32-byte alignment for loops.  This is the default.

       --mmiissssuuee--rraattee==_n_u_m_b_e_r
           Issue _n_u_m_b_e_r instructions per cycle.  _n_u_m_b_e_r can only be 1 or 2.

       --mmbbrraanncchh--ccoosstt==_n_u_m_b_e_r
           _n_u_m_b_e_r can only be 1 or 2.  If it is 1 then branches are preferred
           over conditional code, if it is 2, then the opposite applies.

       --mmfflluusshh--ttrraapp==_n_u_m_b_e_r
           Specifies the trap number to use to flush the cache.  The default
           is 12.  Valid numbers are between 0 and 15 inclusive.

       --mmnnoo--fflluusshh--ttrraapp
           Specifies that the cache cannot be flushed by using a trap.

       --mmfflluusshh--ffuunncc==_n_a_m_e
           Specifies the name of the operating system function to call to
           flush the cache.  The default is __fflluusshh__ccaacchhee, but a function call
           is only used if a trap is not available.

       --mmnnoo--fflluusshh--ffuunncc
           Indicates that there is no OS function for flushing the cache.

       _M_6_8_0_x_0 _O_p_t_i_o_n_s

       These are the --mm options defined for M680x0 and ColdFire processors.
       The default settings depend on which architecture was selected when the
       compiler was configured; the defaults for the most common choices are
       given below.

       --mmaarrcchh==_a_r_c_h
           Generate code for a specific M680x0 or ColdFire instruction set
           architecture.  Permissible values of _a_r_c_h for M680x0 architectures
           are: 6688000000, 6688001100, 6688002200, 6688003300, 6688004400, 6688006600 and ccppuu3322.  ColdFire
           architectures are selected according to Freescale's ISA
           classification and the permissible values are: iissaaaa, iissaaaapplluuss, iissaabb
           and iissaacc.

           GCC defines a macro "__mcf_a_r_c_h_____" whenever it is generating code
           for a ColdFire target.  The _a_r_c_h in this macro is one of the --mmaarrcchh
           arguments given above.

           When used together, --mmaarrcchh and --mmttuunnee select code that runs on a
           family of similar processors but that is optimized for a particular
           microarchitecture.

       --mmccppuu==_c_p_u
           Generate code for a specific M680x0 or ColdFire processor.  The
           M680x0 _c_p_us are: 6688000000, 6688001100, 6688002200, 6688003300, 6688004400, 6688006600, 6688330022,
           6688333322 and ccppuu3322.  The ColdFire _c_p_us are given by the table below,
           which also classifies the CPUs into families:

           Family : --mmccppuu arguments
           5511 : 5511 5511aacc 5511aagg 5511ccnn 5511eemm 5511jjee 5511jjff 5511jjgg 5511jjmm 5511mmmm 5511qqee 5511qqmm
           55220066 : 55220022 55220044 55220066
           55220066ee : 55220066ee
           55220088 : 55220077 55220088
           55221111aa : 55221100aa 55221111aa
           55221133 : 55221111 55221122 55221133
           55221166 : 55221144 55221166
           5522223355 : 5522223300 5522223311 5522223322 5522223333 5522223344 5522223355
           55222255 : 55222244 55222255
           5522225599 : 5522225522 5522225544 5522225555 5522225566 5522225588 5522225599
           55223355 : 55223322 55223333 55223344 55223355 552233xx
           55224499 : 55224499
           55225500 : 55225500
           55227711 : 55227700 55227711
           55227722 : 55227722
           55227755 : 55227744 55227755
           55228822 : 55228800 55228811 55228822 552288xx
           5533001177 : 5533001111 5533001122 5533001133 5533001144 5533001155 5533001166 5533001177
           55330077 : 55330077
           55332299 : 55332277 55332288 55332299 553322xx
           55337733 : 55337722 55337733 553377xx
           55440077 : 55440077
           55447755 : 55447700 55447711 55447722 55447733 55447744 55447755 554477xx 55448800 55448811 55448822 55448833 55448844
           55448855

           --mmccppuu==_c_p_u overrides --mmaarrcchh==_a_r_c_h if _a_r_c_h is compatible with _c_p_u.
           Other combinations of --mmccppuu and --mmaarrcchh are rejected.

           GCC defines the macro "__mcf_cpu__c_p_u_" when ColdFire target _c_p_u is
           selected.  It also defines "__mcf_family__f_a_m_i_l_y_", where the value
           of _f_a_m_i_l_y is given by the table above.

       --mmttuunnee==_t_u_n_e
           Tune the code for a particular microarchitecture within the
           constraints set by --mmaarrcchh and --mmccppuu.  The M680x0 microarchitectures
           are: 6688000000, 6688001100, 6688002200, 6688003300, 6688004400, 6688006600 and ccppuu3322.  The
           ColdFire microarchitectures are: ccffvv11, ccffvv22, ccffvv33, ccffvv44 and ccffvv44ee.

           You can also use --mmttuunnee==6688002200--4400 for code that needs to run
           relatively well on 68020, 68030 and 68040 targets.  --mmttuunnee==6688002200--6600
           is similar but includes 68060 targets as well.  These two options
           select the same tuning decisions as --mm6688002200--4400 and --mm6688002200--6600
           respectively.

           GCC defines the macros "__mc_a_r_c_h_" and "__mc_a_r_c_h_____" when tuning for
           680x0 architecture _a_r_c_h.  It also defines "mc_a_r_c_h_" unless either
           --aannssii or a non-GNU --ssttdd option is used.  If GCC is tuning for a
           range of architectures, as selected by --mmttuunnee==6688002200--4400 or
           --mmttuunnee==6688002200--6600, it defines the macros for every architecture in
           the range.

           GCC also defines the macro "__m_u_a_r_c_h_____" when tuning for ColdFire
           microarchitecture _u_a_r_c_h, where _u_a_r_c_h is one of the arguments given
           above.

       --mm6688000000
       --mmcc6688000000
           Generate output for a 68000.  This is the default when the compiler
           is configured for 68000-based systems.  It is equivalent to
           --mmaarrcchh==6688000000.

           Use this option for microcontrollers with a 68000 or EC000 core,
           including the 68008, 68302, 68306, 68307, 68322, 68328 and 68356.

       --mm6688001100
           Generate output for a 68010.  This is the default when the compiler
           is configured for 68010-based systems.  It is equivalent to
           --mmaarrcchh==6688001100.

       --mm6688002200
       --mmcc6688002200
           Generate output for a 68020.  This is the default when the compiler
           is configured for 68020-based systems.  It is equivalent to
           --mmaarrcchh==6688002200.

       --mm6688003300
           Generate output for a 68030.  This is the default when the compiler
           is configured for 68030-based systems.  It is equivalent to
           --mmaarrcchh==6688003300.

       --mm6688004400
           Generate output for a 68040.  This is the default when the compiler
           is configured for 68040-based systems.  It is equivalent to
           --mmaarrcchh==6688004400.

           This option inhibits the use of 68881/68882 instructions that have
           to be emulated by software on the 68040.  Use this option if your
           68040 does not have code to emulate those instructions.

       --mm6688006600
           Generate output for a 68060.  This is the default when the compiler
           is configured for 68060-based systems.  It is equivalent to
           --mmaarrcchh==6688006600.

           This option inhibits the use of 68020 and 68881/68882 instructions
           that have to be emulated by software on the 68060.  Use this option
           if your 68060 does not have code to emulate those instructions.

       --mmccppuu3322
           Generate output for a CPU32.  This is the default when the compiler
           is configured for CPU32-based systems.  It is equivalent to
           --mmaarrcchh==ccppuu3322.

           Use this option for microcontrollers with a CPU32 or CPU32+ core,
           including the 68330, 68331, 68332, 68333, 68334, 68336, 68340,
           68341, 68349 and 68360.

       --mm55220000
           Generate output for a 520X ColdFire CPU.  This is the default when
           the compiler is configured for 520X-based systems.  It is
           equivalent to --mmccppuu==55220066, and is now deprecated in favor of that
           option.

           Use this option for microcontroller with a 5200 core, including the
           MCF5202, MCF5203, MCF5204 and MCF5206.

       --mm55220066ee
           Generate output for a 5206e ColdFire CPU.  The option is now
           deprecated in favor of the equivalent --mmccppuu==55220066ee.

       --mm552288xx
           Generate output for a member of the ColdFire 528X family.  The
           option is now deprecated in favor of the equivalent --mmccppuu==552288xx.

       --mm55330077
           Generate output for a ColdFire 5307 CPU.  The option is now
           deprecated in favor of the equivalent --mmccppuu==55330077.

       --mm55440077
           Generate output for a ColdFire 5407 CPU.  The option is now
           deprecated in favor of the equivalent --mmccppuu==55440077.

       --mmccffvv44ee
           Generate output for a ColdFire V4e family CPU (e.g. 547x/548x).
           This includes use of hardware floating-point instructions.  The
           option is equivalent to --mmccppuu==554477xx, and is now deprecated in favor
           of that option.

       --mm6688002200--4400
           Generate output for a 68040, without using any of the new
           instructions.  This results in code that can run relatively
           efficiently on either a 68020/68881 or a 68030 or a 68040.  The
           generated code does use the 68881 instructions that are emulated on
           the 68040.

           The option is equivalent to --mmaarrcchh==6688002200 --mmttuunnee==6688002200--4400.

       --mm6688002200--6600
           Generate output for a 68060, without using any of the new
           instructions.  This results in code that can run relatively
           efficiently on either a 68020/68881 or a 68030 or a 68040.  The
           generated code does use the 68881 instructions that are emulated on
           the 68060.

           The option is equivalent to --mmaarrcchh==6688002200 --mmttuunnee==6688002200--6600.

       --mmhhaarrdd--ffllooaatt
       --mm6688888811
           Generate floating-point instructions.  This is the default for
           68020 and above, and for ColdFire devices that have an FPU.  It
           defines the macro "__HAVE_68881__" on M680x0 targets and
           "__mcffpu__" on ColdFire targets.

       --mmssoofftt--ffllooaatt
           Do not generate floating-point instructions; use library calls
           instead.  This is the default for 68000, 68010, and 68832 targets.
           It is also the default for ColdFire devices that have no FPU.

       --mmddiivv
       --mmnnoo--ddiivv
           Generate (do not generate) ColdFire hardware divide and remainder
           instructions.  If --mmaarrcchh is used without --mmccppuu, the default is "on"
           for ColdFire architectures and "off" for M680x0 architectures.
           Otherwise, the default is taken from the target CPU (either the
           default CPU, or the one specified by --mmccppuu).  For example, the
           default is "off" for --mmccppuu==55220066 and "on" for --mmccppuu==55220066ee.

           GCC defines the macro "__mcfhwdiv__" when this option is enabled.

       --mmsshhoorrtt
           Consider type "int" to be 16 bits wide, like "short int".
           Additionally, parameters passed on the stack are also aligned to a
           16-bit boundary even on targets whose API mandates promotion to
           32-bit.

       --mmnnoo--sshhoorrtt
           Do not consider type "int" to be 16 bits wide.  This is the
           default.

       --mmnnoobbiittffiieelldd
       --mmnnoo--bbiittffiieelldd
           Do not use the bit-field instructions.  The --mm6688000000, --mmccppuu3322 and
           --mm55220000 options imply --mmnnoobbiittffiieelldd.

       --mmbbiittffiieelldd
           Do use the bit-field instructions.  The --mm6688002200 option implies
           --mmbbiittffiieelldd.  This is the default if you use a configuration
           designed for a 68020.

       --mmrrttdd
           Use a different function-calling convention, in which functions
           that take a fixed number of arguments return with the "rtd"
           instruction, which pops their arguments while returning.  This
           saves one instruction in the caller since there is no need to pop
           the arguments there.

           This calling convention is incompatible with the one normally used
           on Unix, so you cannot use it if you need to call libraries
           compiled with the Unix compiler.

           Also, you must provide function prototypes for all functions that
           take variable numbers of arguments (including "printf"); otherwise
           incorrect code is generated for calls to those functions.

           In addition, seriously incorrect code results if you call a
           function with too many arguments.  (Normally, extra arguments are
           harmlessly ignored.)

           The "rtd" instruction is supported by the 68010, 68020, 68030,
           68040, 68060 and CPU32 processors, but not by the 68000 or 5200.

       --mmnnoo--rrttdd
           Do not use the calling conventions selected by --mmrrttdd.  This is the
           default.

       --mmaalliiggnn--iinntt
       --mmnnoo--aalliiggnn--iinntt
           Control whether GCC aligns "int", "long", "long long", "float",
           "double", and "long double" variables on a 32-bit boundary
           (--mmaalliiggnn--iinntt) or a 16-bit boundary (--mmnnoo--aalliiggnn--iinntt).  Aligning
           variables on 32-bit boundaries produces code that runs somewhat
           faster on processors with 32-bit busses at the expense of more
           memory.

           WWaarrnniinngg:: if you use the --mmaalliiggnn--iinntt switch, GCC aligns structures
           containing the above types differently than most published
           application binary interface specifications for the m68k.

       --mmppccrreell
           Use the pc-relative addressing mode of the 68000 directly, instead
           of using a global offset table.  At present, this option implies
           --ffppiicc, allowing at most a 16-bit offset for pc-relative addressing.
           --ffPPIICC is not presently supported with --mmppccrreell, though this could be
           supported for 68020 and higher processors.

       --mmnnoo--ssttrriicctt--aalliiggnn
       --mmssttrriicctt--aalliiggnn
           Do not (do) assume that unaligned memory references are handled by
           the system.

       --mmsseepp--ddaattaa
           Generate code that allows the data segment to be located in a
           different area of memory from the text segment.  This allows for
           execute-in-place in an environment without virtual memory
           management.  This option implies --ffPPIICC.

       --mmnnoo--sseepp--ddaattaa
           Generate code that assumes that the data segment follows the text
           segment.  This is the default.

       --mmiidd--sshhaarreedd--lliibbrraarryy
           Generate code that supports shared libraries via the library ID
           method.  This allows for execute-in-place and shared libraries in
           an environment without virtual memory management.  This option
           implies --ffPPIICC.

       --mmnnoo--iidd--sshhaarreedd--lliibbrraarryy
           Generate code that doesn't assume ID-based shared libraries are
           being used.  This is the default.

       --mmsshhaarreedd--lliibbrraarryy--iidd==nn
           Specifies the identification number of the ID-based shared library
           being compiled.  Specifying a value of 0 generates more compact
           code; specifying other values forces the allocation of that number
           to the current library, but is no more space- or time-efficient
           than omitting this option.

       --mmxxggoott
       --mmnnoo--xxggoott
           When generating position-independent code for ColdFire, generate
           code that works if the GOT has more than 8192 entries.  This code
           is larger and slower than code generated without this option.  On
           M680x0 processors, this option is not needed; --ffPPIICC suffices.

           GCC normally uses a single instruction to load values from the GOT.
           While this is relatively efficient, it only works if the GOT is
           smaller than about 64k.  Anything larger causes the linker to
           report an error such as:

                   relocation truncated to fit: R_68K_GOT16O foobar

           If this happens, you should recompile your code with --mmxxggoott.  It
           should then work with very large GOTs.  However, code generated
           with --mmxxggoott is less efficient, since it takes 4 instructions to
           fetch the value of a global symbol.

           Note that some linkers, including newer versions of the GNU linker,
           can create multiple GOTs and sort GOT entries.  If you have such a
           linker, you should only need to use --mmxxggoott when compiling a single
           object file that accesses more than 8192 GOT entries.  Very few do.

           These options have no effect unless GCC is generating position-
           independent code.

       --mmlloonngg--jjuummpp--ttaabbllee--ooffffsseettss
           Use 32-bit offsets in "switch" tables.  The default is to use
           16-bit offsets.

       _M_C_o_r_e _O_p_t_i_o_n_s

       These are the --mm options defined for the Motorola M*Core processors.

       --mmhhaarrddlliitt
       --mmnnoo--hhaarrddlliitt
           Inline constants into the code stream if it can be done in two
           instructions or less.

       --mmddiivv
       --mmnnoo--ddiivv
           Use the divide instruction.  (Enabled by default).

       --mmrreellaaxx--iimmmmeeddiiaattee
       --mmnnoo--rreellaaxx--iimmmmeeddiiaattee
           Allow arbitrary-sized immediates in bit operations.

       --mmwwiiddee--bbiittffiieellddss
       --mmnnoo--wwiiddee--bbiittffiieellddss
           Always treat bit-fields as "int"-sized.

       --mm44bbyyttee--ffuunnccttiioonnss
       --mmnnoo--44bbyyttee--ffuunnccttiioonnss
           Force all functions to be aligned to a 4-byte boundary.

       --mmccaallllggrraapphh--ddaattaa
       --mmnnoo--ccaallllggrraapphh--ddaattaa
           Emit callgraph information.

       --mmssllooww--bbyytteess
       --mmnnoo--ssllooww--bbyytteess
           Prefer word access when reading byte quantities.

       --mmlliittttllee--eennddiiaann
       --mmbbiigg--eennddiiaann
           Generate code for a little-endian target.

       --mm221100
       --mm334400
           Generate code for the 210 processor.

       --mmnnoo--llssiimm
           Assume that runtime support has been provided and so omit the
           simulator library (_l_i_b_s_i_m_._a_) from the linker command line.

       --mmssttaacckk--iinnccrreemmeenntt==_s_i_z_e
           Set the maximum amount for a single stack increment operation.
           Large values can increase the speed of programs that contain
           functions that need a large amount of stack space, but they can
           also trigger a segmentation fault if the stack is extended too
           much.  The default value is 0x1000.

       _M_e_P _O_p_t_i_o_n_s

       --mmaabbssddiiffff
           Enables the "abs" instruction, which is the absolute difference
           between two registers.

       --mmaallll--ooppttss
           Enables all the optional instructions---average, multiply, divide,
           bit operations, leading zero, absolute difference, min/max, clip,
           and saturation.

       --mmaavveerraaggee
           Enables the "ave" instruction, which computes the average of two
           registers.

       --mmbbaasseedd==_n
           Variables of size _n bytes or smaller are placed in the ".based"
           section by default.  Based variables use the $tp register as a base
           register, and there is a 128-byte limit to the ".based" section.

       --mmbbiittooppss
           Enables the bit operation instructions---bit test ("btstm"), set
           ("bsetm"), clear ("bclrm"), invert ("bnotm"), and test-and-set
           ("tas").

       --mmcc==_n_a_m_e
           Selects which section constant data is placed in.  _n_a_m_e may be
           ttiinnyy, nneeaarr, or ffaarr.

       --mmcclliipp
           Enables the "clip" instruction.  Note that --mmcclliipp is not useful
           unless you also provide --mmmmiinnmmaaxx.

       --mmccoonnffiigg==_n_a_m_e
           Selects one of the built-in core configurations.  Each MeP chip has
           one or more modules in it; each module has a core CPU and a variety
           of coprocessors, optional instructions, and peripherals.  The
           "MeP-Integrator" tool, not part of GCC, provides these
           configurations through this option; using this option is the same
           as using all the corresponding command-line options.  The default
           configuration is ddeeffaauulltt.

       --mmccoopp
           Enables the coprocessor instructions.  By default, this is a 32-bit
           coprocessor.  Note that the coprocessor is normally enabled via the
           --mmccoonnffiigg== option.

       --mmccoopp3322
           Enables the 32-bit coprocessor's instructions.

       --mmccoopp6644
           Enables the 64-bit coprocessor's instructions.

       --mmiivvcc22
           Enables IVC2 scheduling.  IVC2 is a 64-bit VLIW coprocessor.

       --mmddcc
           Causes constant variables to be placed in the ".near" section.

       --mmddiivv
           Enables the "div" and "divu" instructions.

       --mmeebb
           Generate big-endian code.

       --mmeell
           Generate little-endian code.

       --mmiioo--vvoollaattiillee
           Tells the compiler that any variable marked with the "io" attribute
           is to be considered volatile.

       --mmll Causes variables to be assigned to the ".far" section by default.

       --mmlleeaaddzz
           Enables the "leadz" (leading zero) instruction.

       --mmmm Causes variables to be assigned to the ".near" section by default.

       --mmmmiinnmmaaxx
           Enables the "min" and "max" instructions.

       --mmmmuulltt
           Enables the multiplication and multiply-accumulate instructions.

       --mmnnoo--ooppttss
           Disables all the optional instructions enabled by --mmaallll--ooppttss.

       --mmrreeppeeaatt
           Enables the "repeat" and "erepeat" instructions, used for low-
           overhead looping.

       --mmss Causes all variables to default to the ".tiny" section.  Note that
           there is a 65536-byte limit to this section.  Accesses to these
           variables use the %gp base register.

       --mmssaattuurr
           Enables the saturation instructions.  Note that the compiler does
           not currently generate these itself, but this option is included
           for compatibility with other tools, like "as".

       --mmssddrraamm
           Link the SDRAM-based runtime instead of the default ROM-based
           runtime.

       --mmssiimm
           Link the simulator run-time libraries.

       --mmssiimmnnoovveecc
           Link the simulator runtime libraries, excluding built-in support
           for reset and exception vectors and tables.

       --mmttff
           Causes all functions to default to the ".far" section.  Without
           this option, functions default to the ".near" section.

       --mmttiinnyy==_n
           Variables that are _n bytes or smaller are allocated to the ".tiny"
           section.  These variables use the $gp base register.  The default
           for this option is 4, but note that there's a 65536-byte limit to
           the ".tiny" section.

       _M_i_c_r_o_B_l_a_z_e _O_p_t_i_o_n_s

       --mmssoofftt--ffllooaatt
           Use software emulation for floating point (default).

       --mmhhaarrdd--ffllooaatt
           Use hardware floating-point instructions.

       --mmmmeemmccppyy
           Do not optimize block moves, use "memcpy".

       --mmnnoo--cclleeaarrbbssss
           This option is deprecated.  Use --ffnnoo--zzeerroo--iinniittiiaalliizzeedd--iinn--bbssss
           instead.

       --mmccppuu==_c_p_u_-_t_y_p_e
           Use features of, and schedule code for, the given CPU.  Supported
           values are in the format vv_X.._Y_Y.._Z, where _X is a major version, _Y_Y is
           the minor version, and _Z is compatibility code.  Example values are
           vv33..0000..aa, vv44..0000..bb, vv55..0000..aa, vv55..0000..bb, vv66..0000..aa.

       --mmxxll--ssoofftt--mmuull
           Use software multiply emulation (default).

       --mmxxll--ssoofftt--ddiivv
           Use software emulation for divides (default).

       --mmxxll--bbaarrrreell--sshhiifftt
           Use the hardware barrel shifter.

       --mmxxll--ppaatttteerrnn--ccoommppaarree
           Use pattern compare instructions.

       --mmssmmaallll--ddiivviiddeess
           Use table lookup optimization for small signed integer divisions.

       --mmxxll--ssttaacckk--cchheecckk
           This option is deprecated.  Use --ffssttaacckk--cchheecckk instead.

       --mmxxll--ggpp--oopptt
           Use GP-relative ".sdata"/".sbss" sections.

       --mmxxll--mmuullttiippllyy--hhiigghh
           Use multiply high instructions for high part of 32x32 multiply.

       --mmxxll--ffllooaatt--ccoonnvveerrtt
           Use hardware floating-point conversion instructions.

       --mmxxll--ffllooaatt--ssqqrrtt
           Use hardware floating-point square root instruction.

       --mmbbiigg--eennddiiaann
           Generate code for a big-endian target.

       --mmlliittttllee--eennddiiaann
           Generate code for a little-endian target.

       --mmxxll--rreeoorrddeerr
           Use reorder instructions (swap and byte reversed load/store).

       --mmxxll--mmooddee--_a_p_p_-_m_o_d_e_l
           Select application model _a_p_p_-_m_o_d_e_l.  Valid models are

           eexxeeccuuttaabbllee
               normal executable (default), uses startup code _c_r_t_0_._o.

           xxmmddssttuubb
               for use with Xilinx Microprocessor Debugger (XMD) based
               software intrusive debug agent called xmdstub. This uses
               startup file _c_r_t_1_._o and sets the start address of the program
               to 0x800.

           bboooottssttrraapp
               for applications that are loaded using a bootloader.  This
               model uses startup file _c_r_t_2_._o which does not contain a
               processor reset vector handler. This is suitable for
               transferring control on a processor reset to the bootloader
               rather than the application.

           nnoovveeccttoorrss
               for applications that do not require any of the MicroBlaze
               vectors. This option may be useful for applications running
               within a monitoring application. This model uses _c_r_t_3_._o as a
               startup file.

           Option --xxll--mmooddee--_a_p_p_-_m_o_d_e_l is a deprecated alias for --mmxxll--mmooddee--_a_p_p_-
           _m_o_d_e_l.

       _M_I_P_S _O_p_t_i_o_n_s

       --EEBB Generate big-endian code.

       --EELL Generate little-endian code.  This is the default for mmiippss**eell--**--**
           configurations.

       --mmaarrcchh==_a_r_c_h
           Generate code that runs on _a_r_c_h, which can be the name of a generic
           MIPS ISA, or the name of a particular processor.  The ISA names
           are: mmiippss11, mmiippss22, mmiippss33, mmiippss44, mmiippss3322, mmiippss3322rr22, mmiippss3322rr33,
           mmiippss3322rr55, mmiippss3322rr66, mmiippss6644, mmiippss6644rr22, mmiippss6644rr33, mmiippss6644rr55 and
           mmiippss6644rr66.  The processor names are: 44kkcc, 44kkmm, 44kkpp, 44kksscc, 44kkeecc,
           44kkeemm, 44kkeepp, 44kkssdd, 55kkcc, 55kkff, 2200kkcc, 2244kkcc, 2244kkff22__11, 2244kkff11__11, 2244kkeecc,
           2244kkeeff22__11, 2244kkeeff11__11, 3344kkcc, 3344kkff22__11, 3344kkff11__11, 3344kknn, 7744kkcc, 7744kkff22__11,
           7744kkff11__11, 7744kkff33__22, 11000044kkcc, 11000044kkff22__11, 11000044kkff11__11, ii66440000, iinntteerraappttiivv,
           lloooonnggssoonn22ee, lloooonnggssoonn22ff, lloooonnggssoonn33aa, mm44kk, mm1144kk, mm1144kkcc, mm1144kkee,
           mm1144kkeecc, mm55110000, mm55110011, oocctteeoonn, oocctteeoonn++, oocctteeoonn22, oocctteeoonn33, oorriioonn,
           pp55660000, rr22000000, rr33000000, rr33990000, rr44000000, rr44440000, rr44660000, rr44665500, rr44770000,
           rr66000000, rr88000000, rrmm77000000, rrmm99000000, rr1100000000, rr1122000000, rr1144000000, rr1166000000, ssbb11,
           ssrr7711000000, vvrr44110000, vvrr44111111, vvrr44112200, vvrr44113300, vvrr44330000, vvrr55000000, vvrr55440000,
           vvrr55550000, xxllrr and xxllpp.  The special value ffrroomm--aabbii selects the most
           compatible architecture for the selected ABI (that is, mmiippss11 for
           32-bit ABIs and mmiippss33 for 64-bit ABIs).

           The native Linux/GNU toolchain also supports the value nnaattiivvee,
           which selects the best architecture option for the host processor.
           --mmaarrcchh==nnaattiivvee has no effect if GCC does not recognize the
           processor.

           In processor names, a final 000000 can be abbreviated as kk (for
           example, --mmaarrcchh==rr22kk).  Prefixes are optional, and vvrr may be written
           rr.

           Names of the form _nff22__11 refer to processors with FPUs clocked at
           half the rate of the core, names of the form _nff11__11 refer to
           processors with FPUs clocked at the same rate as the core, and
           names of the form _nff33__22 refer to processors with FPUs clocked a
           ratio of 3:2 with respect to the core.  For compatibility reasons,
           _nff is accepted as a synonym for _nff22__11 while _nxx and _bffxx are accepted
           as synonyms for _nff11__11.

           GCC defines two macros based on the value of this option.  The
           first is "_MIPS_ARCH", which gives the name of target architecture,
           as a string.  The second has the form "_MIPS_ARCH__f_o_o_", where _f_o_o
           is the capitalized value of "_MIPS_ARCH".  For example,
           --mmaarrcchh==rr22000000 sets "_MIPS_ARCH" to "r2000" and defines the macro
           "_MIPS_ARCH_R2000".

           Note that the "_MIPS_ARCH" macro uses the processor names given
           above.  In other words, it has the full prefix and does not
           abbreviate 000000 as kk.  In the case of ffrroomm--aabbii, the macro names the
           resolved architecture (either "mips1" or "mips3").  It names the
           default architecture when no --mmaarrcchh option is given.

       --mmttuunnee==_a_r_c_h
           Optimize for _a_r_c_h.  Among other things, this option controls the
           way instructions are scheduled, and the perceived cost of
           arithmetic operations.  The list of _a_r_c_h values is the same as for
           --mmaarrcchh.

           When this option is not used, GCC optimizes for the processor
           specified by --mmaarrcchh.  By using --mmaarrcchh and --mmttuunnee together, it is
           possible to generate code that runs on a family of processors, but
           optimize the code for one particular member of that family.

           --mmttuunnee defines the macros "_MIPS_TUNE" and "_MIPS_TUNE__f_o_o_", which
           work in the same way as the --mmaarrcchh ones described above.

       --mmiippss11
           Equivalent to --mmaarrcchh==mmiippss11.

       --mmiippss22
           Equivalent to --mmaarrcchh==mmiippss22.

       --mmiippss33
           Equivalent to --mmaarrcchh==mmiippss33.

       --mmiippss44
           Equivalent to --mmaarrcchh==mmiippss44.

       --mmiippss3322
           Equivalent to --mmaarrcchh==mmiippss3322.

       --mmiippss3322rr33
           Equivalent to --mmaarrcchh==mmiippss3322rr33.

       --mmiippss3322rr55
           Equivalent to --mmaarrcchh==mmiippss3322rr55.

       --mmiippss3322rr66
           Equivalent to --mmaarrcchh==mmiippss3322rr66.

       --mmiippss6644
           Equivalent to --mmaarrcchh==mmiippss6644.

       --mmiippss6644rr22
           Equivalent to --mmaarrcchh==mmiippss6644rr22.

       --mmiippss6644rr33
           Equivalent to --mmaarrcchh==mmiippss6644rr33.

       --mmiippss6644rr55
           Equivalent to --mmaarrcchh==mmiippss6644rr55.

       --mmiippss6644rr66
           Equivalent to --mmaarrcchh==mmiippss6644rr66.

       --mmiippss1166
       --mmnnoo--mmiippss1166
           Generate (do not generate) MIPS16 code.  If GCC is targeting a
           MIPS32 or MIPS64 architecture, it makes use of the MIPS16e ASE.

           MIPS16 code generation can also be controlled on a per-function
           basis by means of "mips16" and "nomips16" attributes.

       --mmfflliipp--mmiippss1166
           Generate MIPS16 code on alternating functions.  This option is
           provided for regression testing of mixed MIPS16/non-MIPS16 code
           generation, and is not intended for ordinary use in compiling user
           code.

       --mmiinntteerrlliinnkk--ccoommpprreesssseedd
       --mmnnoo--iinntteerrlliinnkk--ccoommpprreesssseedd
           Require (do not require) that code using the standard
           (uncompressed) MIPS ISA be link-compatible with MIPS16 and
           microMIPS code, and vice versa.

           For example, code using the standard ISA encoding cannot jump
           directly to MIPS16 or microMIPS code; it must either use a call or
           an indirect jump.  --mmiinntteerrlliinnkk--ccoommpprreesssseedd therefore disables direct
           jumps unless GCC knows that the target of the jump is not
           compressed.

       --mmiinntteerrlliinnkk--mmiippss1166
       --mmnnoo--iinntteerrlliinnkk--mmiippss1166
           Aliases of --mmiinntteerrlliinnkk--ccoommpprreesssseedd and --mmnnoo--iinntteerrlliinnkk--ccoommpprreesssseedd.
           These options predate the microMIPS ASE and are retained for
           backwards compatibility.

       --mmaabbii==3322
       --mmaabbii==oo6644
       --mmaabbii==nn3322
       --mmaabbii==6644
       --mmaabbii==eeaabbii
           Generate code for the given ABI.

           Note that the EABI has a 32-bit and a 64-bit variant.  GCC normally
           generates 64-bit code when you select a 64-bit architecture, but
           you can use --mmggpp3322 to get 32-bit code instead.

           For information about the O64 ABI, see
           <hhttttpp::////ggcccc..ggnnuu..oorrgg//pprroojjeeccttss//mmiippssoo6644--aabbii..hhttmmll>.

           GCC supports a variant of the o32 ABI in which floating-point
           registers are 64 rather than 32 bits wide.  You can select this
           combination with --mmaabbii==3322 --mmffpp6644.  This ABI relies on the "mthc1"
           and "mfhc1" instructions and is therefore only supported for
           MIPS32R2, MIPS32R3 and MIPS32R5 processors.

           The register assignments for arguments and return values remain the
           same, but each scalar value is passed in a single 64-bit register
           rather than a pair of 32-bit registers.  For example, scalar
           floating-point values are returned in $$ff00 only, not a $$ff00/$$ff11 pair.
           The set of call-saved registers also remains the same in that the
           even-numbered double-precision registers are saved.

           Two additional variants of the o32 ABI are supported to enable a
           transition from 32-bit to 64-bit registers.  These are FPXX
           (--mmffppxxxx) and FP64A (--mmffpp6644 --mmnnoo--oodddd--sspprreegg).  The FPXX extension
           mandates that all code must execute correctly when run using 32-bit
           or 64-bit registers.  The code can be interlinked with either FP32
           or FP64, but not both.  The FP64A extension is similar to the FP64
           extension but forbids the use of odd-numbered single-precision
           registers.  This can be used in conjunction with the "FRE" mode of
           FPUs in MIPS32R5 processors and allows both FP32 and FP64A code to
           interlink and run in the same process without changing FPU modes.

       --mmaabbiiccaallllss
       --mmnnoo--aabbiiccaallllss
           Generate (do not generate) code that is suitable for SVR4-style
           dynamic objects.  --mmaabbiiccaallllss is the default for SVR4-based systems.

       --mmsshhaarreedd
       --mmnnoo--sshhaarreedd
           Generate (do not generate) code that is fully position-independent,
           and that can therefore be linked into shared libraries.  This
           option only affects --mmaabbiiccaallllss.

           All --mmaabbiiccaallllss code has traditionally been position-independent,
           regardless of options like --ffPPIICC and --ffppiicc.  However, as an
           extension, the GNU toolchain allows executables to use absolute
           accesses for locally-binding symbols.  It can also use shorter GP
           initialization sequences and generate direct calls to locally-
           defined functions.  This mode is selected by --mmnnoo--sshhaarreedd.

           --mmnnoo--sshhaarreedd depends on binutils 2.16 or higher and generates
           objects that can only be linked by the GNU linker.  However, the
           option does not affect the ABI of the final executable; it only
           affects the ABI of relocatable objects.  Using --mmnnoo--sshhaarreedd
           generally makes executables both smaller and quicker.

           --mmsshhaarreedd is the default.

       --mmpplltt
       --mmnnoo--pplltt
           Assume (do not assume) that the static and dynamic linkers support
           PLTs and copy relocations.  This option only affects --mmnnoo--sshhaarreedd
           --mmaabbiiccaallllss.  For the n64 ABI, this option has no effect without
           --mmssyymm3322.

           You can make --mmpplltt the default by configuring GCC with
           ----wwiitthh--mmiippss--pplltt.  The default is --mmnnoo--pplltt otherwise.

       --mmxxggoott
       --mmnnoo--xxggoott
           Lift (do not lift) the usual restrictions on the size of the global
           offset table.

           GCC normally uses a single instruction to load values from the GOT.
           While this is relatively efficient, it only works if the GOT is
           smaller than about 64k.  Anything larger causes the linker to
           report an error such as:

                   relocation truncated to fit: R_MIPS_GOT16 foobar

           If this happens, you should recompile your code with --mmxxggoott.  This
           works with very large GOTs, although the code is also less
           efficient, since it takes three instructions to fetch the value of
           a global symbol.

           Note that some linkers can create multiple GOTs.  If you have such
           a linker, you should only need to use --mmxxggoott when a single object
           file accesses more than 64k's worth of GOT entries.  Very few do.

           These options have no effect unless GCC is generating position
           independent code.

       --mmggpp3322
           Assume that general-purpose registers are 32 bits wide.

       --mmggpp6644
           Assume that general-purpose registers are 64 bits wide.

       --mmffpp3322
           Assume that floating-point registers are 32 bits wide.

       --mmffpp6644
           Assume that floating-point registers are 64 bits wide.

       --mmffppxxxx
           Do not assume the width of floating-point registers.

       --mmhhaarrdd--ffllooaatt
           Use floating-point coprocessor instructions.

       --mmssoofftt--ffllooaatt
           Do not use floating-point coprocessor instructions.  Implement
           floating-point calculations using library calls instead.

       --mmnnoo--ffllooaatt
           Equivalent to --mmssoofftt--ffllooaatt, but additionally asserts that the
           program being compiled does not perform any floating-point
           operations.  This option is presently supported only by some bare-
           metal MIPS configurations, where it may select a special set of
           libraries that lack all floating-point support (including, for
           example, the floating-point "printf" formats).  If code compiled
           with --mmnnoo--ffllooaatt accidentally contains floating-point operations, it
           is likely to suffer a link-time or run-time failure.

       --mmssiinnggllee--ffllooaatt
           Assume that the floating-point coprocessor only supports single-
           precision operations.

       --mmddoouubbllee--ffllooaatt
           Assume that the floating-point coprocessor supports double-
           precision operations.  This is the default.

       --mmoodddd--sspprreegg
       --mmnnoo--oodddd--sspprreegg
           Enable the use of odd-numbered single-precision floating-point
           registers for the o32 ABI.  This is the default for processors that
           are known to support these registers.  When using the o32 FPXX ABI,
           --mmnnoo--oodddd--sspprreegg is set by default.

       --mmaabbss==22000088
       --mmaabbss==lleeggaaccyy
           These options control the treatment of the special not-a-number
           (NaN) IEEE 754 floating-point data with the "abs._f_m_t_" and "neg._f_m_t_"
           machine instructions.

           By default or when --mmaabbss==lleeggaaccyy is used the legacy treatment is
           selected.  In this case these instructions are considered
           arithmetic and avoided where correct operation is required and the
           input operand might be a NaN.  A longer sequence of instructions
           that manipulate the sign bit of floating-point datum manually is
           used instead unless the --ffffiinniittee--mmaatthh--oonnllyy option has also been
           specified.

           The --mmaabbss==22000088 option selects the IEEE 754-2008 treatment.  In this
           case these instructions are considered non-arithmetic and therefore
           operating correctly in all cases, including in particular where the
           input operand is a NaN.  These instructions are therefore always
           used for the respective operations.

       --mmnnaann==22000088
       --mmnnaann==lleeggaaccyy
           These options control the encoding of the special not-a-number
           (NaN) IEEE 754 floating-point data.

           The --mmnnaann==lleeggaaccyy option selects the legacy encoding.  In this case
           quiet NaNs (qNaNs) are denoted by the first bit of their trailing
           significand field being 0, whereas signaling NaNs (sNaNs) are
           denoted by the first bit of their trailing significand field being
           1.

           The --mmnnaann==22000088 option selects the IEEE 754-2008 encoding.  In this
           case qNaNs are denoted by the first bit of their trailing
           significand field being 1, whereas sNaNs are denoted by the first
           bit of their trailing significand field being 0.

           The default is --mmnnaann==lleeggaaccyy unless GCC has been configured with
           ----wwiitthh--nnaann==22000088.

       --mmllllsscc
       --mmnnoo--llllsscc
           Use (do not use) llll, sscc, and ssyynncc instructions to implement atomic
           memory built-in functions.  When neither option is specified, GCC
           uses the instructions if the target architecture supports them.

           --mmllllsscc is useful if the runtime environment can emulate the
           instructions and --mmnnoo--llllsscc can be useful when compiling for
           nonstandard ISAs.  You can make either option the default by
           configuring GCC with ----wwiitthh--llllsscc and ----wwiitthhoouutt--llllsscc respectively.
           ----wwiitthh--llllsscc is the default for some configurations; see the
           installation documentation for details.

       --mmddsspp
       --mmnnoo--ddsspp
           Use (do not use) revision 1 of the MIPS DSP ASE.
             This option defines the preprocessor macro "__mips_dsp".  It also
           defines "__mips_dsp_rev" to 1.

       --mmddsspprr22
       --mmnnoo--ddsspprr22
           Use (do not use) revision 2 of the MIPS DSP ASE.
             This option defines the preprocessor macros "__mips_dsp" and
           "__mips_dspr2".  It also defines "__mips_dsp_rev" to 2.

       --mmssmmaarrttmmiippss
       --mmnnoo--ssmmaarrttmmiippss
           Use (do not use) the MIPS SmartMIPS ASE.

       --mmppaaiirreedd--ssiinnggllee
       --mmnnoo--ppaaiirreedd--ssiinnggllee
           Use (do not use) paired-single floating-point instructions.
             This option requires hardware floating-point support to be
           enabled.

       --mmddmmxx
       --mmnnoo--mmddmmxx
           Use (do not use) MIPS Digital Media Extension instructions.  This
           option can only be used when generating 64-bit code and requires
           hardware floating-point support to be enabled.

       --mmiippss33dd
       --mmnnoo--mmiippss33dd
           Use (do not use) the MIPS-3D ASE.  The option --mmiippss33dd implies
           --mmppaaiirreedd--ssiinnggllee.

       --mmmmiiccrroommiippss
       --mmnnoo--mmiiccrroommiippss
           Generate (do not generate) microMIPS code.

           MicroMIPS code generation can also be controlled on a per-function
           basis by means of "micromips" and "nomicromips" attributes.

       --mmmmtt
       --mmnnoo--mmtt
           Use (do not use) MT Multithreading instructions.

       --mmmmccuu
       --mmnnoo--mmccuu
           Use (do not use) the MIPS MCU ASE instructions.

       --mmeevvaa
       --mmnnoo--eevvaa
           Use (do not use) the MIPS Enhanced Virtual Addressing instructions.

       --mmvviirrtt
       --mmnnoo--vviirrtt
           Use (do not use) the MIPS Virtualization (VZ) instructions.

       --mmxxppaa
       --mmnnoo--xxppaa
           Use (do not use) the MIPS eXtended Physical Address (XPA)
           instructions.

       --mmlloonngg6644
           Force "long" types to be 64 bits wide.  See --mmlloonngg3322 for an
           explanation of the default and the way that the pointer size is
           determined.

       --mmlloonngg3322
           Force "long", "int", and pointer types to be 32 bits wide.

           The default size of "int"s, "long"s and pointers depends on the
           ABI.  All the supported ABIs use 32-bit "int"s.  The n64 ABI uses
           64-bit "long"s, as does the 64-bit EABI; the others use 32-bit
           "long"s.  Pointers are the same size as "long"s, or the same size
           as integer registers, whichever is smaller.

       --mmssyymm3322
       --mmnnoo--ssyymm3322
           Assume (do not assume) that all symbols have 32-bit values,
           regardless of the selected ABI.  This option is useful in
           combination with --mmaabbii==6644 and --mmnnoo--aabbiiccaallllss because it allows GCC
           to generate shorter and faster references to symbolic addresses.

       --GG _n_u_m
           Put definitions of externally-visible data in a small data section
           if that data is no bigger than _n_u_m bytes.  GCC can then generate
           more efficient accesses to the data; see --mmggppoopptt for details.

           The default --GG option depends on the configuration.

       --mmllooccaall--ssddaattaa
       --mmnnoo--llooccaall--ssddaattaa
           Extend (do not extend) the --GG behavior to local data too, such as
           to static variables in C.  --mmllooccaall--ssddaattaa is the default for all
           configurations.

           If the linker complains that an application is using too much small
           data, you might want to try rebuilding the less performance-
           critical parts with --mmnnoo--llooccaall--ssddaattaa.  You might also want to build
           large libraries with --mmnnoo--llooccaall--ssddaattaa, so that the libraries leave
           more room for the main program.

       --mmeexxtteerrnn--ssddaattaa
       --mmnnoo--eexxtteerrnn--ssddaattaa
           Assume (do not assume) that externally-defined data is in a small
           data section if the size of that data is within the --GG limit.
           --mmeexxtteerrnn--ssddaattaa is the default for all configurations.

           If you compile a module _M_o_d with --mmeexxtteerrnn--ssddaattaa --GG _n_u_m --mmggppoopptt, and
           _M_o_d references a variable _V_a_r that is no bigger than _n_u_m bytes, you
           must make sure that _V_a_r is placed in a small data section.  If _V_a_r
           is defined by another module, you must either compile that module
           with a high-enough --GG setting or attach a "section" attribute to
           _V_a_r's definition.  If _V_a_r is common, you must link the application
           with a high-enough --GG setting.

           The easiest way of satisfying these restrictions is to compile and
           link every module with the same --GG option.  However, you may wish
           to build a library that supports several different small data
           limits.  You can do this by compiling the library with the highest
           supported --GG setting and additionally using --mmnnoo--eexxtteerrnn--ssddaattaa to
           stop the library from making assumptions about externally-defined
           data.

       --mmggppoopptt
       --mmnnoo--ggppoopptt
           Use (do not use) GP-relative accesses for symbols that are known to
           be in a small data section; see --GG, --mmllooccaall--ssddaattaa and
           --mmeexxtteerrnn--ssddaattaa.  --mmggppoopptt is the default for all configurations.

           --mmnnoo--ggppoopptt is useful for cases where the $gp register might not
           hold the value of "_gp".  For example, if the code is part of a
           library that might be used in a boot monitor, programs that call
           boot monitor routines pass an unknown value in $gp.  (In such
           situations, the boot monitor itself is usually compiled with --GG00.)

           --mmnnoo--ggppoopptt implies --mmnnoo--llooccaall--ssddaattaa and --mmnnoo--eexxtteerrnn--ssddaattaa.

       --mmeemmbbeeddddeedd--ddaattaa
       --mmnnoo--eemmbbeeddddeedd--ddaattaa
           Allocate variables to the read-only data section first if possible,
           then next in the small data section if possible, otherwise in data.
           This gives slightly slower code than the default, but reduces the
           amount of RAM required when executing, and thus may be preferred
           for some embedded systems.

       --mmuunniinniitt--ccoonnsstt--iinn--rrooddaattaa
       --mmnnoo--uunniinniitt--ccoonnsstt--iinn--rrooddaattaa
           Put uninitialized "const" variables in the read-only data section.
           This option is only meaningful in conjunction with --mmeemmbbeeddddeedd--ddaattaa.

       --mmccooddee--rreeaaddaabbllee==_s_e_t_t_i_n_g
           Specify whether GCC may generate code that reads from executable
           sections.  There are three possible settings:

           --mmccooddee--rreeaaddaabbllee==yyeess
               Instructions may freely access executable sections.  This is
               the default setting.

           --mmccooddee--rreeaaddaabbllee==ppccrreell
               MIPS16 PC-relative load instructions can access executable
               sections, but other instructions must not do so.  This option
               is useful on 4KSc and 4KSd processors when the code TLBs have
               the Read Inhibit bit set.  It is also useful on processors that
               can be configured to have a dual instruction/data SRAM
               interface and that, like the M4K, automatically redirect PC-
               relative loads to the instruction RAM.

           --mmccooddee--rreeaaddaabbllee==nnoo
               Instructions must not access executable sections.  This option
               can be useful on targets that are configured to have a dual
               instruction/data SRAM interface but that (unlike the M4K) do
               not automatically redirect PC-relative loads to the instruction
               RAM.

       --mmsspplliitt--aaddddrreesssseess
       --mmnnoo--sspplliitt--aaddddrreesssseess
           Enable (disable) use of the "%hi()" and "%lo()" assembler
           relocation operators.  This option has been superseded by
           --mmeexxpplliicciitt--rreellooccss but is retained for backwards compatibility.

       --mmeexxpplliicciitt--rreellooccss
       --mmnnoo--eexxpplliicciitt--rreellooccss
           Use (do not use) assembler relocation operators when dealing with
           symbolic addresses.  The alternative, selected by
           --mmnnoo--eexxpplliicciitt--rreellooccss, is to use assembler macros instead.

           --mmeexxpplliicciitt--rreellooccss is the default if GCC was configured to use an
           assembler that supports relocation operators.

       --mmcchheecckk--zzeerroo--ddiivviissiioonn
       --mmnnoo--cchheecckk--zzeerroo--ddiivviissiioonn
           Trap (do not trap) on integer division by zero.

           The default is --mmcchheecckk--zzeerroo--ddiivviissiioonn.

       --mmddiivviiddee--ttrraappss
       --mmddiivviiddee--bbrreeaakkss
           MIPS systems check for division by zero by generating either a
           conditional trap or a break instruction.  Using traps results in
           smaller code, but is only supported on MIPS II and later.  Also,
           some versions of the Linux kernel have a bug that prevents trap
           from generating the proper signal ("SIGFPE").  Use --mmddiivviiddee--ttrraappss
           to allow conditional traps on architectures that support them and
           --mmddiivviiddee--bbrreeaakkss to force the use of breaks.

           The default is usually --mmddiivviiddee--ttrraappss, but this can be overridden
           at configure time using ----wwiitthh--ddiivviiddee==bbrreeaakkss.  Divide-by-zero
           checks can be completely disabled using --mmnnoo--cchheecckk--zzeerroo--ddiivviissiioonn.

       --mmllooaadd--ssttoorree--ppaaiirrss
       --mmnnoo--llooaadd--ssttoorree--ppaaiirrss
           Enable (disable) an optimization that pairs consecutive load or
           store instructions to enable load/store bonding.  This option is
           enabled by default but only takes effect when the selected
           architecture is known to support bonding.

       --mmmmeemmccppyy
       --mmnnoo--mmeemmccppyy
           Force (do not force) the use of "memcpy" for non-trivial block
           moves.  The default is --mmnnoo--mmeemmccppyy, which allows GCC to inline most
           constant-sized copies.

       --mmlloonngg--ccaallllss
       --mmnnoo--lloonngg--ccaallllss
           Disable (do not disable) use of the "jal" instruction.  Calling
           functions using "jal" is more efficient but requires the caller and
           callee to be in the same 256 megabyte segment.

           This option has no effect on abicalls code.  The default is
           --mmnnoo--lloonngg--ccaallllss.

       --mmmmaadd
       --mmnnoo--mmaadd
           Enable (disable) use of the "mad", "madu" and "mul" instructions,
           as provided by the R4650 ISA.

       --mmiimmaadddd
       --mmnnoo--iimmaadddd
           Enable (disable) use of the "madd" and "msub" integer instructions.
           The default is --mmiimmaadddd on architectures that support "madd" and
           "msub" except for the 74k architecture where it was found to
           generate slower code.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Enable (disable) use of the floating-point multiply-accumulate
           instructions, when they are available.  The default is
           --mmffuusseedd--mmaadddd.

           On the R8000 CPU when multiply-accumulate instructions are used,
           the intermediate product is calculated to infinite precision and is
           not subject to the FCSR Flush to Zero bit.  This may be undesirable
           in some circumstances.  On other processors the result is
           numerically identical to the equivalent computation using separate
           multiply, add, subtract and negate instructions.

       --nnooccpppp
           Tell the MIPS assembler to not run its preprocessor over user
           assembler files (with a ..ss suffix) when assembling them.

       --mmffiixx--2244kk
       --mmnnoo--ffiixx--2244kk
           Work around the 24K E48 (lost data on stores during refill) errata.
           The workarounds are implemented by the assembler rather than by
           GCC.

       --mmffiixx--rr44000000
       --mmnnoo--ffiixx--rr44000000
           Work around certain R4000 CPU errata:

           -   A double-word or a variable shift may give an incorrect result
               if executed immediately after starting an integer division.

           -   A double-word or a variable shift may give an incorrect result
               if executed while an integer multiplication is in progress.

           -   An integer division may give an incorrect result if started in
               a delay slot of a taken branch or a jump.

       --mmffiixx--rr44440000
       --mmnnoo--ffiixx--rr44440000
           Work around certain R4400 CPU errata:

           -   A double-word or a variable shift may give an incorrect result
               if executed immediately after starting an integer division.

       --mmffiixx--rr1100000000
       --mmnnoo--ffiixx--rr1100000000
           Work around certain R10000 errata:

           -   "ll"/"sc" sequences may not behave atomically on revisions
               prior to 3.0.  They may deadlock on revisions 2.6 and earlier.

           This option can only be used if the target architecture supports
           branch-likely instructions.  --mmffiixx--rr1100000000 is the default when
           --mmaarrcchh==rr1100000000 is used; --mmnnoo--ffiixx--rr1100000000 is the default otherwise.

       --mmffiixx--rrmm77000000
       --mmnnoo--ffiixx--rrmm77000000
           Work around the RM7000 "dmult"/"dmultu" errata.  The workarounds
           are implemented by the assembler rather than by GCC.

       --mmffiixx--vvrr44112200
       --mmnnoo--ffiixx--vvrr44112200
           Work around certain VR4120 errata:

           -   "dmultu" does not always produce the correct result.

           -   "div" and "ddiv" do not always produce the correct result if
               one of the operands is negative.

           The workarounds for the division errata rely on special functions
           in _l_i_b_g_c_c_._a.  At present, these functions are only provided by the
           "mips64vr*-elf" configurations.

           Other VR4120 errata require a NOP to be inserted between certain
           pairs of instructions.  These errata are handled by the assembler,
           not by GCC itself.

       --mmffiixx--vvrr44113300
           Work around the VR4130 "mflo"/"mfhi" errata.  The workarounds are
           implemented by the assembler rather than by GCC, although GCC
           avoids using "mflo" and "mfhi" if the VR4130 "macc", "macchi",
           "dmacc" and "dmacchi" instructions are available instead.

       --mmffiixx--ssbb11
       --mmnnoo--ffiixx--ssbb11
           Work around certain SB-1 CPU core errata.  (This flag currently
           works around the SB-1 revision 2 "F1" and "F2" floating-point
           errata.)

       --mmrr1100kk--ccaacchhee--bbaarrrriieerr==_s_e_t_t_i_n_g
           Specify whether GCC should insert cache barriers to avoid the side
           effects of speculation on R10K processors.

           In common with many processors, the R10K tries to predict the
           outcome of a conditional branch and speculatively executes
           instructions from the "taken" branch.  It later aborts these
           instructions if the predicted outcome is wrong.  However, on the
           R10K, even aborted instructions can have side effects.

           This problem only affects kernel stores and, depending on the
           system, kernel loads.  As an example, a speculatively-executed
           store may load the target memory into cache and mark the cache line
           as dirty, even if the store itself is later aborted.  If a DMA
           operation writes to the same area of memory before the "dirty" line
           is flushed, the cached data overwrites the DMA-ed data.  See the
           R10K processor manual for a full description, including other
           potential problems.

           One workaround is to insert cache barrier instructions before every
           memory access that might be speculatively executed and that might
           have side effects even if aborted.  --mmrr1100kk--ccaacchhee--bbaarrrriieerr==_s_e_t_t_i_n_g
           controls GCC's implementation of this workaround.  It assumes that
           aborted accesses to any byte in the following regions does not have
           side effects:

           1.  the memory occupied by the current function's stack frame;

           2.  the memory occupied by an incoming stack argument;

           3.  the memory occupied by an object with a link-time-constant
               address.

           It is the kernel's responsibility to ensure that speculative
           accesses to these regions are indeed safe.

           If the input program contains a function declaration such as:

                   void foo (void);

           then the implementation of "foo" must allow "j foo" and "jal foo"
           to be executed speculatively.  GCC honors this restriction for
           functions it compiles itself.  It expects non-GCC functions (such
           as hand-written assembly code) to do the same.

           The option has three forms:

           --mmrr1100kk--ccaacchhee--bbaarrrriieerr==llooaadd--ssttoorree
               Insert a cache barrier before a load or store that might be
               speculatively executed and that might have side effects even if
               aborted.

           --mmrr1100kk--ccaacchhee--bbaarrrriieerr==ssttoorree
               Insert a cache barrier before a store that might be
               speculatively executed and that might have side effects even if
               aborted.

           --mmrr1100kk--ccaacchhee--bbaarrrriieerr==nnoonnee
               Disable the insertion of cache barriers.  This is the default
               setting.

       --mmfflluusshh--ffuunncc==_f_u_n_c
       --mmnnoo--fflluusshh--ffuunncc
           Specifies the function to call to flush the I and D caches, or to
           not call any such function.  If called, the function must take the
           same arguments as the common "_flush_func", that is, the address of
           the memory range for which the cache is being flushed, the size of
           the memory range, and the number 3 (to flush both caches).  The
           default depends on the target GCC was configured for, but commonly
           is either "_flush_func" or "__cpu_flush".

       mmbbrraanncchh--ccoosstt==_n_u_m
           Set the cost of branches to roughly _n_u_m "simple" instructions.
           This cost is only a heuristic and is not guaranteed to produce
           consistent results across releases.  A zero cost redundantly
           selects the default, which is based on the --mmttuunnee setting.

       --mmbbrraanncchh--lliikkeellyy
       --mmnnoo--bbrraanncchh--lliikkeellyy
           Enable or disable use of Branch Likely instructions, regardless of
           the default for the selected architecture.  By default, Branch
           Likely instructions may be generated if they are supported by the
           selected architecture.  An exception is for the MIPS32 and MIPS64
           architectures and processors that implement those architectures;
           for those, Branch Likely instructions are not be generated by
           default because the MIPS32 and MIPS64 architectures specifically
           deprecate their use.

       --mmccoommppaacctt--bbrraanncchheess==nneevveerr
       --mmccoommppaacctt--bbrraanncchheess==ooppttiimmaall
       --mmccoommppaacctt--bbrraanncchheess==aallwwaayyss
           These options control which form of branches will be generated.
           The default is --mmccoommppaacctt--bbrraanncchheess==ooppttiimmaall.

           The --mmccoommppaacctt--bbrraanncchheess==nneevveerr option ensures that compact branch
           instructions will never be generated.

           The --mmccoommppaacctt--bbrraanncchheess==aallwwaayyss option ensures that a compact branch
           instruction will be generated if available.  If a compact branch
           instruction is not available, a delay slot form of the branch will
           be used instead.

           This option is supported from MIPS Release 6 onwards.

           The --mmccoommppaacctt--bbrraanncchheess==ooppttiimmaall option will cause a delay slot
           branch to be used if one is available in the current ISA and the
           delay slot is successfully filled.  If the delay slot is not
           filled, a compact branch will be chosen if one is available.

       --mmffpp--eexxcceeppttiioonnss
       --mmnnoo--ffpp--eexxcceeppttiioonnss
           Specifies whether FP exceptions are enabled.  This affects how FP
           instructions are scheduled for some processors.  The default is
           that FP exceptions are enabled.

           For instance, on the SB-1, if FP exceptions are disabled, and we
           are emitting 64-bit code, then we can use both FP pipes.
           Otherwise, we can only use one FP pipe.

       --mmvvrr44113300--aalliiggnn
       --mmnnoo--vvrr44113300--aalliiggnn
           The VR4130 pipeline is two-way superscalar, but can only issue two
           instructions together if the first one is 8-byte aligned.  When
           this option is enabled, GCC aligns pairs of instructions that it
           thinks should execute in parallel.

           This option only has an effect when optimizing for the VR4130.  It
           normally makes code faster, but at the expense of making it bigger.
           It is enabled by default at optimization level --OO33.

       --mmssyynnccii
       --mmnnoo--ssyynnccii
           Enable (disable) generation of "synci" instructions on
           architectures that support it.  The "synci" instructions (if
           enabled) are generated when "__builtin___clear_cache" is compiled.

           This option defaults to --mmnnoo--ssyynnccii, but the default can be
           overridden by configuring GCC with ----wwiitthh--ssyynnccii.

           When compiling code for single processor systems, it is generally
           safe to use "synci".  However, on many multi-core (SMP) systems, it
           does not invalidate the instruction caches on all cores and may
           lead to undefined behavior.

       --mmrreellaaxx--ppiicc--ccaallllss
       --mmnnoo--rreellaaxx--ppiicc--ccaallllss
           Try to turn PIC calls that are normally dispatched via register $25
           into direct calls.  This is only possible if the linker can resolve
           the destination at link time and if the destination is within range
           for a direct call.

           --mmrreellaaxx--ppiicc--ccaallllss is the default if GCC was configured to use an
           assembler and a linker that support the ".reloc" assembly directive
           and --mmeexxpplliicciitt--rreellooccss is in effect.  With --mmnnoo--eexxpplliicciitt--rreellooccss,
           this optimization can be performed by the assembler and the linker
           alone without help from the compiler.

       --mmmmccoouunntt--rraa--aaddddrreessss
       --mmnnoo--mmccoouunntt--rraa--aaddddrreessss
           Emit (do not emit) code that allows "_mcount" to modify the calling
           function's return address.  When enabled, this option extends the
           usual "_mcount" interface with a new _r_a_-_a_d_d_r_e_s_s parameter, which
           has type "intptr_t *" and is passed in register $12.  "_mcount" can
           then modify the return address by doing both of the following:

           *   Returning the new address in register $31.

           *   Storing the new address in "*_r_a_-_a_d_d_r_e_s_s_", if _r_a_-_a_d_d_r_e_s_s is
               nonnull.

           The default is --mmnnoo--mmccoouunntt--rraa--aaddddrreessss.

       --mmffrraammee--hheeaaddeerr--oopptt
       --mmnnoo--ffrraammee--hheeaaddeerr--oopptt
           Enable (disable) frame header optimization in the o32 ABI.  When
           using the o32 ABI, calling functions will allocate 16 bytes on the
           stack for the called function to write out register arguments.
           When enabled, this optimization will suppress the allocation of the
           frame header if it can be determined that it is unused.

           This optimization is off by default at all optimization levels.

       --mmllxxcc11--ssxxcc11
       --mmnnoo--llxxcc11--ssxxcc11
           When applicable, enable (disable) the generation of "lwxc1",
           "swxc1", "ldxc1", "sdxc1" instructions.  Enabled by default.

       --mmmmaadddd44
       --mmnnoo--mmaadddd44
           When applicable, enable (disable) the generation of 4-operand
           "madd.s", "madd.d" and related instructions.  Enabled by default.

       _M_M_I_X _O_p_t_i_o_n_s

       These options are defined for the MMIX:

       --mmlliibbffuunnccss
       --mmnnoo--lliibbffuunnccss
           Specify that intrinsic library functions are being compiled,
           passing all values in registers, no matter the size.

       --mmeeppssiilloonn
       --mmnnoo--eeppssiilloonn
           Generate floating-point comparison instructions that compare with
           respect to the "rE" epsilon register.

       --mmaabbii==mmmmiixxwwaarree
       --mmaabbii==ggnnuu
           Generate code that passes function parameters and return values
           that (in the called function) are seen as registers $0 and up, as
           opposed to the GNU ABI which uses global registers $231 and up.

       --mmzzeerroo--eexxtteenndd
       --mmnnoo--zzeerroo--eexxtteenndd
           When reading data from memory in sizes shorter than 64 bits, use
           (do not use) zero-extending load instructions by default, rather
           than sign-extending ones.

       --mmkknnuutthhddiivv
       --mmnnoo--kknnuutthhddiivv
           Make the result of a division yielding a remainder have the same
           sign as the divisor.  With the default, --mmnnoo--kknnuutthhddiivv, the sign of
           the remainder follows the sign of the dividend.  Both methods are
           arithmetically valid, the latter being almost exclusively used.

       --mmttoopplleevveell--ssyymmbboollss
       --mmnnoo--ttoopplleevveell--ssyymmbboollss
           Prepend (do not prepend) a :: to all global symbols, so the assembly
           code can be used with the "PREFIX" assembly directive.

       --mmeellff
           Generate an executable in the ELF format, rather than the default
           mmmmoo format used by the mmmmiixx simulator.

       --mmbbrraanncchh--pprreeddiicctt
       --mmnnoo--bbrraanncchh--pprreeddiicctt
           Use (do not use) the probable-branch instructions, when static
           branch prediction indicates a probable branch.

       --mmbbaassee--aaddddrreesssseess
       --mmnnoo--bbaassee--aaddddrreesssseess
           Generate (do not generate) code that uses _b_a_s_e _a_d_d_r_e_s_s_e_s.  Using a
           base address automatically generates a request (handled by the
           assembler and the linker) for a constant to be set up in a global
           register.  The register is used for one or more base address
           requests within the range 0 to 255 from the value held in the
           register.  The generally leads to short and fast code, but the
           number of different data items that can be addressed is limited.
           This means that a program that uses lots of static data may require
           --mmnnoo--bbaassee--aaddddrreesssseess.

       --mmssiinnggllee--eexxiitt
       --mmnnoo--ssiinnggllee--eexxiitt
           Force (do not force) generated code to have a single exit point in
           each function.

       _M_N_1_0_3_0_0 _O_p_t_i_o_n_s

       These --mm options are defined for Matsushita MN10300 architectures:

       --mmmmuulltt--bbuugg
           Generate code to avoid bugs in the multiply instructions for the
           MN10300 processors.  This is the default.

       --mmnnoo--mmuulltt--bbuugg
           Do not generate code to avoid bugs in the multiply instructions for
           the MN10300 processors.

       --mmaamm3333
           Generate code using features specific to the AM33 processor.

       --mmnnoo--aamm3333
           Do not generate code using features specific to the AM33 processor.
           This is the default.

       --mmaamm3333--22
           Generate code using features specific to the AM33/2.0 processor.

       --mmaamm3344
           Generate code using features specific to the AM34 processor.

       --mmttuunnee==_c_p_u_-_t_y_p_e
           Use the timing characteristics of the indicated CPU type when
           scheduling instructions.  This does not change the targeted
           processor type.  The CPU type must be one of mmnn1100330000, aamm3333, aamm3333--22
           or aamm3344.

       --mmrreettuurrnn--ppooiinntteerr--oonn--dd00
           When generating a function that returns a pointer, return the
           pointer in both "a0" and "d0".  Otherwise, the pointer is returned
           only in "a0", and attempts to call such functions without a
           prototype result in errors.  Note that this option is on by
           default; use --mmnnoo--rreettuurrnn--ppooiinntteerr--oonn--dd00 to disable it.

       --mmnnoo--ccrrtt00
           Do not link in the C run-time initialization object file.

       --mmrreellaaxx
           Indicate to the linker that it should perform a relaxation
           optimization pass to shorten branches, calls and absolute memory
           addresses.  This option only has an effect when used on the command
           line for the final link step.

           This option makes symbolic debugging impossible.

       --mmlliiww
           Allow the compiler to generate _L_o_n_g _I_n_s_t_r_u_c_t_i_o_n _W_o_r_d instructions
           if the target is the AAMM3333 or later.  This is the default.  This
           option defines the preprocessor macro "__LIW__".

       --mmnnoolliiww
           Do not allow the compiler to generate _L_o_n_g _I_n_s_t_r_u_c_t_i_o_n _W_o_r_d
           instructions.  This option defines the preprocessor macro
           "__NO_LIW__".

       --mmsseettllbb
           Allow the compiler to generate the _S_E_T_L_B and _L_c_c instructions if
           the target is the AAMM3333 or later.  This is the default.  This option
           defines the preprocessor macro "__SETLB__".

       --mmnnoosseettllbb
           Do not allow the compiler to generate _S_E_T_L_B or _L_c_c instructions.
           This option defines the preprocessor macro "__NO_SETLB__".

       _M_o_x_i_e _O_p_t_i_o_n_s

       --mmeebb
           Generate big-endian code.  This is the default for mmooxxiiee--**--**
           configurations.

       --mmeell
           Generate little-endian code.

       --mmmmuull..xx
           Generate mul.x and umul.x instructions.  This is the default for
           mmooxxiieebbooxx--**--** configurations.

       --mmnnoo--ccrrtt00
           Do not link in the C run-time initialization object file.

       _M_S_P_4_3_0 _O_p_t_i_o_n_s

       These options are defined for the MSP430:

       --mmaassmm--hheexx
           Force assembly output to always use hex constants.  Normally such
           constants are signed decimals, but this option is available for
           testsuite and/or aesthetic purposes.

       --mmmmccuu==
           Select the MCU to target.  This is used to create a C preprocessor
           symbol based upon the MCU name, converted to upper case and pre-
           and post-fixed with ____.  This in turn is used by the _m_s_p_4_3_0_._h
           header file to select an MCU-specific supplementary header file.

           The option also sets the ISA to use.  If the MCU name is one that
           is known to only support the 430 ISA then that is selected,
           otherwise the 430X ISA is selected.  A generic MCU name of mmsspp443300
           can also be used to select the 430 ISA.  Similarly the generic
           mmsspp443300xx MCU name selects the 430X ISA.

           In addition an MCU-specific linker script is added to the linker
           command line.  The script's name is the name of the MCU with _._l_d
           appended.  Thus specifying --mmmmccuu==xxxxxx on the ggcccc command line
           defines the C preprocessor symbol "__XXX__" and cause the linker to
           search for a script called _x_x_x_._l_d.

           This option is also passed on to the assembler.

       --mmwwaarrnn--mmccuu
       --mmnnoo--wwaarrnn--mmccuu
           This option enables or disables warnings about conflicts between
           the MCU name specified by the --mmmmccuu option and the ISA set by the
           --mmccppuu option and/or the hardware multiply support set by the
           --mmhhwwmmuulltt option.  It also toggles warnings about unrecognized MCU
           names.  This option is on by default.

       --mmccppuu==
           Specifies the ISA to use.  Accepted values are mmsspp443300, mmsspp443300xx and
           mmsspp443300xxvv22.  This option is deprecated.  The --mmmmccuu== option should be
           used to select the ISA.

       --mmssiimm
           Link to the simulator runtime libraries and linker script.
           Overrides any scripts that would be selected by the --mmmmccuu== option.

       --mmllaarrggee
           Use large-model addressing (20-bit pointers, 32-bit "size_t").

       --mmssmmaallll
           Use small-model addressing (16-bit pointers, 16-bit "size_t").

       --mmrreellaaxx
           This option is passed to the assembler and linker, and allows the
           linker to perform certain optimizations that cannot be done until
           the final link.

       mmhhwwmmuulltt==
           Describes the type of hardware multiply supported by the target.
           Accepted values are nnoonnee for no hardware multiply, 1166bbiitt for the
           original 16-bit-only multiply supported by early MCUs.  3322bbiitt for
           the 16/32-bit multiply supported by later MCUs and ff55sseerriieess for the
           16/32-bit multiply supported by F5-series MCUs.  A value of aauuttoo
           can also be given.  This tells GCC to deduce the hardware multiply
           support based upon the MCU name provided by the --mmmmccuu option.  If
           no --mmmmccuu option is specified or if the MCU name is not recognized
           then no hardware multiply support is assumed.  "auto" is the
           default setting.

           Hardware multiplies are normally performed by calling a library
           routine.  This saves space in the generated code.  When compiling
           at --OO33 or higher however the hardware multiplier is invoked inline.
           This makes for bigger, but faster code.

           The hardware multiply routines disable interrupts whilst running
           and restore the previous interrupt state when they finish.  This
           makes them safe to use inside interrupt handlers as well as in
           normal code.

       --mmiinnrrtt
           Enable the use of a minimum runtime environment - no static
           initializers or constructors.  This is intended for memory-
           constrained devices.  The compiler includes special symbols in some
           objects that tell the linker and runtime which code fragments are
           required.

       --mmccooddee--rreeggiioonn==
       --mmddaattaa--rreeggiioonn==
           These options tell the compiler where to place functions and data
           that do not have one of the "lower", "upper", "either" or "section"
           attributes.  Possible values are "lower", "upper", "either" or
           "any".  The first three behave like the corresponding attribute.
           The fourth possible value - "any" - is the default.  It leaves
           placement entirely up to the linker script and how it assigns the
           standard sections (".text", ".data", etc) to the memory regions.

       --mmssiilliiccoonn--eerrrraattaa==
           This option passes on a request to assembler to enable the fixes
           for the named silicon errata.

       --mmssiilliiccoonn--eerrrraattaa--wwaarrnn==
           This option passes on a request to the assembler to enable warning
           messages when a silicon errata might need to be applied.

       _N_D_S_3_2 _O_p_t_i_o_n_s

       These options are defined for NDS32 implementations:

       --mmbbiigg--eennddiiaann
           Generate code in big-endian mode.

       --mmlliittttllee--eennddiiaann
           Generate code in little-endian mode.

       --mmrreedduucceedd--rreeggss
           Use reduced-set registers for register allocation.

       --mmffuullll--rreeggss
           Use full-set registers for register allocation.

       --mmccmmoovv
           Generate conditional move instructions.

       --mmnnoo--ccmmoovv
           Do not generate conditional move instructions.

       --mmeexxtt--ppeerrff
           Generate performance extension instructions.

       --mmnnoo--eexxtt--ppeerrff
           Do not generate performance extension instructions.

       --mmeexxtt--ppeerrff22
           Generate performance extension 2 instructions.

       --mmnnoo--eexxtt--ppeerrff22
           Do not generate performance extension 2 instructions.

       --mmeexxtt--ssttrriinngg
           Generate string extension instructions.

       --mmnnoo--eexxtt--ssttrriinngg
           Do not generate string extension instructions.

       --mmvv33ppuusshh
           Generate v3 push25/pop25 instructions.

       --mmnnoo--vv33ppuusshh
           Do not generate v3 push25/pop25 instructions.

       --mm1166--bbiitt
           Generate 16-bit instructions.

       --mmnnoo--1166--bbiitt
           Do not generate 16-bit instructions.

       --mmiissrr--vveeccttoorr--ssiizzee==_n_u_m
           Specify the size of each interrupt vector, which must be 4 or 16.

       --mmccaacchhee--bblloocckk--ssiizzee==_n_u_m
           Specify the size of each cache block, which must be a power of 2
           between 4 and 512.

       --mmaarrcchh==_a_r_c_h
           Specify the name of the target architecture.

       --mmccmmooddeell==_c_o_d_e_-_m_o_d_e_l
           Set the code model to one of

           ssmmaallll
               All the data and read-only data segments must be within 512KB
               addressing space.  The text segment must be within 16MB
               addressing space.

           mmeeddiiuumm
               The data segment must be within 512KB while the read-only data
               segment can be within 4GB addressing space.  The text segment
               should be still within 16MB addressing space.

           llaarrggee
               All the text and data segments can be within 4GB addressing
               space.

       --mmccttoorr--ddttoorr
           Enable constructor/destructor feature.

       --mmrreellaaxx
           Guide linker to relax instructions.

       _N_i_o_s _I_I _O_p_t_i_o_n_s

       These are the options defined for the Altera Nios II processor.

       --GG _n_u_m
           Put global and static objects less than or equal to _n_u_m bytes into
           the small data or BSS sections instead of the normal data or BSS
           sections.  The default value of _n_u_m is 8.

       --mmggppoopptt==_o_p_t_i_o_n
       --mmggppoopptt
       --mmnnoo--ggppoopptt
           Generate (do not generate) GP-relative accesses.  The following
           _o_p_t_i_o_n names are recognized:

           nnoonnee
               Do not generate GP-relative accesses.

           llooccaall
               Generate GP-relative accesses for small data objects that are
               not external, weak, or uninitialized common symbols.  Also use
               GP-relative addressing for objects that have been explicitly
               placed in a small data section via a "section" attribute.

           gglloobbaall
               As for llooccaall, but also generate GP-relative accesses for small
               data objects that are external, weak, or common.  If you use
               this option, you must ensure that all parts of your program
               (including libraries) are compiled with the same --GG setting.

           ddaattaa
               Generate GP-relative accesses for all data objects in the
               program.  If you use this option, the entire data and BSS
               segments of your program must fit in 64K of memory and you must
               use an appropriate linker script to allocate them within the
               addressable range of the global pointer.

           aallll Generate GP-relative addresses for function pointers as well as
               data pointers.  If you use this option, the entire text, data,
               and BSS segments of your program must fit in 64K of memory and
               you must use an appropriate linker script to allocate them
               within the addressable range of the global pointer.

           --mmggppoopptt is equivalent to --mmggppoopptt==llooccaall, and --mmnnoo--ggppoopptt is
           equivalent to --mmggppoopptt==nnoonnee.

           The default is --mmggppoopptt except when --ffppiicc or --ffPPIICC is specified to
           generate position-independent code.  Note that the Nios II ABI does
           not permit GP-relative accesses from shared libraries.

           You may need to specify --mmnnoo--ggppoopptt explicitly when building
           programs that include large amounts of small data, including large
           GOT data sections.  In this case, the 16-bit offset for GP-relative
           addressing may not be large enough to allow access to the entire
           small data section.

       --mmggpprreell--sseecc==_r_e_g_e_x_p
           This option specifies additional section names that can be accessed
           via GP-relative addressing.  It is most useful in conjunction with
           "section" attributes on variable declarations and a custom linker
           script.  The _r_e_g_e_x_p is a POSIX Extended Regular Expression.

           This option does not affect the behavior of the --GG option, and the
           specified sections are in addition to the standard ".sdata" and
           ".sbss" small-data sections that are recognized by --mmggppoopptt.

       --mmrr00rreell--sseecc==_r_e_g_e_x_p
           This option specifies names of sections that can be accessed via a
           16-bit offset from "r0"; that is, in the low 32K or high 32K of the
           32-bit address space.  It is most useful in conjunction with
           "section" attributes on variable declarations and a custom linker
           script.  The _r_e_g_e_x_p is a POSIX Extended Regular Expression.

           In contrast to the use of GP-relative addressing for small data,
           zero-based addressing is never generated by default and there are
           no conventional section names used in standard linker scripts for
           sections in the low or high areas of memory.

       --mmeell
       --mmeebb
           Generate little-endian (default) or big-endian (experimental) code,
           respectively.

       --mmaarrcchh==_a_r_c_h
           This specifies the name of the target Nios II architecture.  GCC
           uses this name to determine what kind of instructions it can emit
           when generating assembly code.  Permissible names are: rr11, rr22.

           The preprocessor macro "__nios2_arch__" is available to programs,
           with value 1 or 2, indicating the targeted ISA level.

       --mmbbyyppaassss--ccaacchhee
       --mmnnoo--bbyyppaassss--ccaacchhee
           Force all load and store instructions to always bypass cache by
           using I/O variants of the instructions. The default is not to
           bypass the cache.

       --mmnnoo--ccaacchhee--vvoollaattiillee
       --mmccaacchhee--vvoollaattiillee
           Volatile memory access bypass the cache using the I/O variants of
           the load and store instructions. The default is not to bypass the
           cache.

       --mmnnoo--ffaasstt--ssww--ddiivv
       --mmffaasstt--ssww--ddiivv
           Do not use table-based fast divide for small numbers. The default
           is to use the fast divide at --OO33 and above.

       --mmnnoo--hhww--mmuull
       --mmhhww--mmuull
       --mmnnoo--hhww--mmuullxx
       --mmhhww--mmuullxx
       --mmnnoo--hhww--ddiivv
       --mmhhww--ddiivv
           Enable or disable emitting "mul", "mulx" and "div" family of
           instructions by the compiler. The default is to emit "mul" and not
           emit "div" and "mulx".

       --mmbbmmxx
       --mmnnoo--bbmmxx
       --mmccddxx
       --mmnnoo--ccddxx
           Enable or disable generation of Nios II R2 BMX (bit manipulation)
           and CDX (code density) instructions.  Enabling these instructions
           also requires --mmaarrcchh==rr22.  Since these instructions are optional
           extensions to the R2 architecture, the default is not to emit them.

       --mmccuussttoomm--_i_n_s_n==_N
       --mmnnoo--ccuussttoomm--_i_n_s_n
           Each --mmccuussttoomm--_i_n_s_n==_N option enables use of a custom instruction
           with encoding _N when generating code that uses _i_n_s_n.  For example,
           --mmccuussttoomm--ffaaddddss==225533 generates custom instruction 253 for single-
           precision floating-point add operations instead of the default
           behavior of using a library call.

           The following values of _i_n_s_n are supported.  Except as otherwise
           noted, floating-point operations are expected to be implemented
           with normal IEEE 754 semantics and correspond directly to the C
           operators or the equivalent GCC built-in functions.

           Single-precision floating point:

           ffaaddddss, ffssuubbss, ffddiivvss, ffmmuullss
               Binary arithmetic operations.

           ffnneeggss
               Unary negation.

           ffaabbssss
               Unary absolute value.

           ffccmmppeeqqss, ffccmmppggeess, ffccmmppggttss, ffccmmpplleess, ffccmmppllttss, ffccmmppnneess
               Comparison operations.

           ffmmiinnss, ffmmaaxxss
               Floating-point minimum and maximum.  These instructions are
               only generated if --ffffiinniittee--mmaatthh--oonnllyy is specified.

           ffssqqrrttss
               Unary square root operation.

           ffccoossss, ffssiinnss, ffttaannss, ffaattaannss, ffeexxppss, ffllooggss
               Floating-point trigonometric and exponential functions.  These
               instructions are only generated if --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss
               is also specified.

           Double-precision floating point:

           ffaadddddd, ffssuubbdd, ffddiivvdd, ffmmuulldd
               Binary arithmetic operations.

           ffnneeggdd
               Unary negation.

           ffaabbssdd
               Unary absolute value.

           ffccmmppeeqqdd, ffccmmppggeedd, ffccmmppggttdd, ffccmmpplleedd, ffccmmppllttdd, ffccmmppnneedd
               Comparison operations.

           ffmmiinndd, ffmmaaxxdd
               Double-precision minimum and maximum.  These instructions are
               only generated if --ffffiinniittee--mmaatthh--oonnllyy is specified.

           ffssqqrrttdd
               Unary square root operation.

           ffccoossdd, ffssiinndd, ffttaanndd, ffaattaanndd, ffeexxppdd, ffllooggdd
               Double-precision trigonometric and exponential functions.
               These instructions are only generated if
               --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss is also specified.

           Conversions:

           ffeexxttssdd
               Conversion from single precision to double precision.

           ffttrruunnccddss
               Conversion from double precision to single precision.

           ffiixxssii, ffiixxssuu, ffiixxddii, ffiixxdduu
               Conversion from floating point to signed or unsigned integer
               types, with truncation towards zero.

           rroouunndd
               Conversion from single-precision floating point to signed
               integer, rounding to the nearest integer and ties away from
               zero.  This corresponds to the "__builtin_lroundf" function
               when --ffnnoo--mmaatthh--eerrrrnnoo is used.

           ffllooaattiiss, ffllooaattuuss, ffllooaattiidd, ffllooaattuudd
               Conversion from signed or unsigned integer types to floating-
               point types.

           In addition, all of the following transfer instructions for
           internal registers X and Y must be provided to use any of the
           double-precision floating-point instructions.  Custom instructions
           taking two double-precision source operands expect the first
           operand in the 64-bit register X.  The other operand (or only
           operand of a unary operation) is given to the custom arithmetic
           instruction with the least significant half in source register _s_r_c_1
           and the most significant half in _s_r_c_2.  A custom instruction that
           returns a double-precision result returns the most significant 32
           bits in the destination register and the other half in 32-bit
           register Y.  GCC automatically generates the necessary code
           sequences to write register X and/or read register Y when double-
           precision floating-point instructions are used.

           ffwwrrxx
               Write _s_r_c_1 into the least significant half of X and _s_r_c_2 into
               the most significant half of X.

           ffwwrryy
               Write _s_r_c_1 into Y.

           ffrrddxxhhii, ffrrddxxlloo
               Read the most or least (respectively) significant half of X and
               store it in _d_e_s_t.

           ffrrddyy
               Read the value of Y and store it into _d_e_s_t.

           Note that you can gain more local control over generation of Nios
           II custom instructions by using the "target("custom-_i_n_s_n_=_N_"_)_" and
           "target("no-custom-_i_n_s_n_"_)_" function attributes or pragmas.

       --mmccuussttoomm--ffppuu--ccffgg==_n_a_m_e
           This option enables a predefined, named set of custom instruction
           encodings (see --mmccuussttoomm--_i_n_s_n above).  Currently, the following sets
           are defined:

           --mmccuussttoomm--ffppuu--ccffgg==6600--11 is equivalent to: --mmccuussttoomm--ffmmuullss==225522
           --mmccuussttoomm--ffaaddddss==225533 --mmccuussttoomm--ffssuubbss==225544 --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt

           --mmccuussttoomm--ffppuu--ccffgg==6600--22 is equivalent to: --mmccuussttoomm--ffmmuullss==225522
           --mmccuussttoomm--ffaaddddss==225533 --mmccuussttoomm--ffssuubbss==225544 --mmccuussttoomm--ffddiivvss==225555
           --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt

           --mmccuussttoomm--ffppuu--ccffgg==7722--33 is equivalent to: --mmccuussttoomm--ffllooaattuuss==224433
           --mmccuussttoomm--ffiixxssii==224444 --mmccuussttoomm--ffllooaattiiss==224455 --mmccuussttoomm--ffccmmppggttss==224466
           --mmccuussttoomm--ffccmmpplleess==224499 --mmccuussttoomm--ffccmmppeeqqss==225500 --mmccuussttoomm--ffccmmppnneess==225511
           --mmccuussttoomm--ffmmuullss==225522 --mmccuussttoomm--ffaaddddss==225533 --mmccuussttoomm--ffssuubbss==225544
           --mmccuussttoomm--ffddiivvss==225555 --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt

           Custom instruction assignments given by individual --mmccuussttoomm--_i_n_s_n==
           options override those given by --mmccuussttoomm--ffppuu--ccffgg==, regardless of
           the order of the options on the command line.

           Note that you can gain more local control over selection of a FPU
           configuration by using the "target("custom-fpu-cfg=_n_a_m_e_"_)_" function
           attribute or pragma.

       These additional --mm options are available for the Altera Nios II ELF
       (bare-metal) target:

       --mmhhaall
           Link with HAL BSP.  This suppresses linking with the GCC-provided C
           runtime startup and termination code, and is typically used in
           conjunction with --mmssyyss--ccrrtt00== to specify the location of the
           alternate startup code provided by the HAL BSP.

       --mmssmmaallllcc
           Link with a limited version of the C library, --llssmmaallllcc, rather than
           Newlib.

       --mmssyyss--ccrrtt00==_s_t_a_r_t_f_i_l_e
           _s_t_a_r_t_f_i_l_e is the file name of the startfile (crt0) to use when
           linking.  This option is only useful in conjunction with --mmhhaall.

       --mmssyyss--lliibb==_s_y_s_t_e_m_l_i_b
           _s_y_s_t_e_m_l_i_b is the library name of the library that provides low-
           level system calls required by the C library, e.g. "read" and
           "write".  This option is typically used to link with a library
           provided by a HAL BSP.

       _N_v_i_d_i_a _P_T_X _O_p_t_i_o_n_s

       These options are defined for Nvidia PTX:

       --mm3322
       --mm6644
           Generate code for 32-bit or 64-bit ABI.

       --mmmmaaiinnkkeerrnneell
           Link in code for a __main kernel.  This is for stand-alone instead
           of offloading execution.

       --mmooppttiimmiizzee
           Apply partitioned execution optimizations.  This is the default
           when any level of optimization is selected.

       --mmssoofftt--ssttaacckk
           Generate code that does not use ".local" memory directly for stack
           storage. Instead, a per-warp stack pointer is maintained
           explicitly. This enables variable-length stack allocation (with
           variable-length arrays or "alloca"), and when global memory is used
           for underlying storage, makes it possible to access automatic
           variables from other threads, or with atomic instructions. This
           code generation variant is used for OpenMP offloading, but the
           option is exposed on its own for the purpose of testing the
           compiler; to generate code suitable for linking into programs using
           OpenMP offloading, use option --mmggoommpp.

       --mmuunniiffoorrmm--ssiimmtt
           Switch to code generation variant that allows to execute all
           threads in each warp, while maintaining memory state and side
           effects as if only one thread in each warp was active outside of
           OpenMP SIMD regions.  All atomic operations and calls to runtime
           (malloc, free, vprintf) are conditionally executed (iff current
           lane index equals the master lane index), and the register being
           assigned is copied via a shuffle instruction from the master lane.
           Outside of SIMD regions lane 0 is the master; inside, each thread
           sees itself as the master.  Shared memory array "int __nvptx_uni[]"
           stores all-zeros or all-ones bitmasks for each warp, indicating
           current mode (0 outside of SIMD regions).  Each thread can bitwise-
           and the bitmask at position "tid.y" with current lane index to
           compute the master lane index.

       --mmggoommpp
           Generate code for use in OpenMP offloading: enables --mmssoofftt--ssttaacckk
           and --mmuunniiffoorrmm--ssiimmtt options, and selects corresponding multilib
           variant.

       _P_D_P_-_1_1 _O_p_t_i_o_n_s

       These options are defined for the PDP-11:

       --mmffppuu
           Use hardware FPP floating point.  This is the default.  (FIS
           floating point on the PDP-11/40 is not supported.)

       --mmssoofftt--ffllooaatt
           Do not use hardware floating point.

       --mmaacc00
           Return floating-point results in ac0 (fr0 in Unix assembler
           syntax).

       --mmnnoo--aacc00
           Return floating-point results in memory.  This is the default.

       --mm4400
           Generate code for a PDP-11/40.

       --mm4455
           Generate code for a PDP-11/45.  This is the default.

       --mm1100
           Generate code for a PDP-11/10.

       --mmbbccooppyy--bbuuiillttiinn
           Use inline "movmemhi" patterns for copying memory.  This is the
           default.

       --mmbbccooppyy
           Do not use inline "movmemhi" patterns for copying memory.

       --mmiinntt1166
       --mmnnoo--iinntt3322
           Use 16-bit "int".  This is the default.

       --mmiinntt3322
       --mmnnoo--iinntt1166
           Use 32-bit "int".

       --mmffllooaatt6644
       --mmnnoo--ffllooaatt3322
           Use 64-bit "float".  This is the default.

       --mmffllooaatt3322
       --mmnnoo--ffllooaatt6644
           Use 32-bit "float".

       --mmaabbsshhii
           Use "abshi2" pattern.  This is the default.

       --mmnnoo--aabbsshhii
           Do not use "abshi2" pattern.

       --mmbbrraanncchh--eexxppeennssiivvee
           Pretend that branches are expensive.  This is for experimenting
           with code generation only.

       --mmbbrraanncchh--cchheeaapp
           Do not pretend that branches are expensive.  This is the default.

       --mmuunniixx--aassmm
           Use Unix assembler syntax.  This is the default when configured for
           ppddpp1111--**--bbssdd.

       --mmddeecc--aassmm
           Use DEC assembler syntax.  This is the default when configured for
           any PDP-11 target other than ppddpp1111--**--bbssdd.

       _p_i_c_o_C_h_i_p _O_p_t_i_o_n_s

       These --mm options are defined for picoChip implementations:

       --mmaaee==_a_e___t_y_p_e
           Set the instruction set, register set, and instruction scheduling
           parameters for array element type _a_e___t_y_p_e.  Supported values for
           _a_e___t_y_p_e are AANNYY, MMUULL, and MMAACC.

           --mmaaee==AANNYY selects a completely generic AE type.  Code generated with
           this option runs on any of the other AE types.  The code is not as
           efficient as it would be if compiled for a specific AE type, and
           some types of operation (e.g., multiplication) do not work properly
           on all types of AE.

           --mmaaee==MMUULL selects a MUL AE type.  This is the most useful AE type
           for compiled code, and is the default.

           --mmaaee==MMAACC selects a DSP-style MAC AE.  Code compiled with this
           option may suffer from poor performance of byte (char)
           manipulation, since the DSP AE does not provide hardware support
           for byte load/stores.

       --mmssyymmbbooll--aass--aaddddrreessss
           Enable the compiler to directly use a symbol name as an address in
           a load/store instruction, without first loading it into a register.
           Typically, the use of this option generates larger programs, which
           run faster than when the option isn't used.  However, the results
           vary from program to program, so it is left as a user option,
           rather than being permanently enabled.

       --mmnnoo--iinneeffffiicciieenntt--wwaarrnniinnggss
           Disables warnings about the generation of inefficient code.  These
           warnings can be generated, for example, when compiling code that
           performs byte-level memory operations on the MAC AE type.  The MAC
           AE has no hardware support for byte-level memory operations, so all
           byte load/stores must be synthesized from word load/store
           operations.  This is inefficient and a warning is generated to
           indicate that you should rewrite the code to avoid byte operations,
           or to target an AE type that has the necessary hardware support.
           This option disables these warnings.

       _P_o_w_e_r_P_C _O_p_t_i_o_n_s

       These are listed under

       _P_o_w_e_r_P_C _S_P_E _O_p_t_i_o_n_s

       These --mm options are defined for PowerPC SPE:

       --mmmmffccrrff
       --mmnnoo--mmffccrrff
       --mmppooppccnnttbb
       --mmnnoo--ppooppccnnttbb
           You use these options to specify which instructions are available
           on the processor you are using.  The default value of these options
           is determined when configuring GCC.  Specifying the --mmccppuu==_c_p_u___t_y_p_e
           overrides the specification of these options.  We recommend you use
           the --mmccppuu==_c_p_u___t_y_p_e option rather than the options listed above.

           The --mmmmffccrrff option allows GCC to generate the move from condition
           register field instruction implemented on the POWER4 processor and
           other processors that support the PowerPC V2.01 architecture.  The
           --mmppooppccnnttbb option allows GCC to generate the popcount and double-
           precision FP reciprocal estimate instruction implemented on the
           POWER5 processor and other processors that support the PowerPC
           V2.02 architecture.

       --mmccppuu==_c_p_u___t_y_p_e
           Set architecture type, register usage, and instruction scheduling
           parameters for machine type _c_p_u___t_y_p_e.  Supported values for
           _c_p_u___t_y_p_e are 88554400, 88554488, and nnaattiivvee.

           --mmccppuu==ppoowweerrppcc specifies pure 32-bit PowerPC (either endian), with
           an appropriate, generic processor model assumed for scheduling
           purposes.

           Specifying nnaattiivvee as cpu type detects and selects the architecture
           option that corresponds to the host processor of the system
           performing the compilation.  --mmccppuu==nnaattiivvee has no effect if GCC does
           not recognize the processor.

           The other options specify a specific processor.  Code generated
           under those options runs best on that processor, and may not run at
           all on others.

           The --mmccppuu options automatically enable or disable the following
           options:

           --mmhhaarrdd--ffllooaatt  --mmmmffccrrff  --mmmmuullttiippllee --mmppooppccnnttbb --mmppooppccnnttdd
           --mmssiinnggllee--ffllooaatt --mmddoouubbllee--ffllooaatt --mmffllooaatt112288

           The particular options set for any particular CPU varies between
           compiler versions, depending on what setting seems to produce
           optimal code for that CPU; it doesn't necessarily reflect the
           actual hardware's capabilities.  If you wish to set an individual
           option to a particular value, you may specify it after the --mmccppuu
           option, like --mmccppuu==88554488.

       --mmttuunnee==_c_p_u___t_y_p_e
           Set the instruction scheduling parameters for machine type
           _c_p_u___t_y_p_e, but do not set the architecture type or register usage,
           as --mmccppuu==_c_p_u___t_y_p_e does.  The same values for _c_p_u___t_y_p_e are used for
           --mmttuunnee as for --mmccppuu.  If both are specified, the code generated
           uses the architecture and registers set by --mmccppuu, but the
           scheduling parameters set by --mmttuunnee.

       --mmsseeccuurree--pplltt
           Generate code that allows lldd and lldd..ssoo to build executables and
           shared libraries with non-executable ".plt" and ".got" sections.
           This is a PowerPC 32-bit SYSV ABI option.

       --mmbbssss--pplltt
           Generate code that uses a BSS ".plt" section that lldd..ssoo fills in,
           and requires ".plt" and ".got" sections that are both writable and
           executable.  This is a PowerPC 32-bit SYSV ABI option.

       --mmiisseell
       --mmnnoo--iisseell
           This switch enables or disables the generation of ISEL
           instructions.

       --mmiisseell==_y_e_s_/_n_o
           This switch has been deprecated.  Use --mmiisseell and --mmnnoo--iisseell instead.

       --mmssppee
       --mmnnoo--ssppee
           This switch enables or disables the generation of SPE simd
           instructions.

       --mmssppee==_y_e_s_/_n_o
           This option has been deprecated.  Use --mmssppee and --mmnnoo--ssppee instead.

       --mmffllooaatt112288
       --mmnnoo--ffllooaatt112288
           Enable/disable the _____f_l_o_a_t_1_2_8 keyword for IEEE 128-bit floating
           point and use either software emulation for IEEE 128-bit floating
           point or hardware instructions.

       --mmffllooaatt--ggpprrss==_y_e_s_/_s_i_n_g_l_e_/_d_o_u_b_l_e_/_n_o
       --mmffllooaatt--ggpprrss
           This switch enables or disables the generation of floating-point
           operations on the general-purpose registers for architectures that
           support it.

           The argument yyeess or ssiinnggllee enables the use of single-precision
           floating-point operations.

           The argument ddoouubbllee enables the use of single and double-precision
           floating-point operations.

           The argument nnoo disables floating-point operations on the general-
           purpose registers.

           This option is currently only available on the MPC854x.

       --mmffuullll--ttoocc
       --mmnnoo--ffpp--iinn--ttoocc
       --mmnnoo--ssuumm--iinn--ttoocc
       --mmmmiinniimmaall--ttoocc
           Modify generation of the TOC (Table Of Contents), which is created
           for every executable file.  The --mmffuullll--ttoocc option is selected by
           default.  In that case, GCC allocates at least one TOC entry for
           each unique non-automatic variable reference in your program.  GCC
           also places floating-point constants in the TOC.  However, only
           16,384 entries are available in the TOC.

           If you receive a linker error message that saying you have
           overflowed the available TOC space, you can reduce the amount of
           TOC space used with the --mmnnoo--ffpp--iinn--ttoocc and --mmnnoo--ssuumm--iinn--ttoocc options.
           --mmnnoo--ffpp--iinn--ttoocc prevents GCC from putting floating-point constants
           in the TOC and --mmnnoo--ssuumm--iinn--ttoocc forces GCC to generate code to
           calculate the sum of an address and a constant at run time instead
           of putting that sum into the TOC.  You may specify one or both of
           these options.  Each causes GCC to produce very slightly slower and
           larger code at the expense of conserving TOC space.

           If you still run out of space in the TOC even when you specify both
           of these options, specify --mmmmiinniimmaall--ttoocc instead.  This option
           causes GCC to make only one TOC entry for every file.  When you
           specify this option, GCC produces code that is slower and larger
           but which uses extremely little TOC space.  You may wish to use
           this option only on files that contain less frequently-executed
           code.

       --mmaaiixx3322
           Disables the 64-bit ABI.  GCC defaults to --mmaaiixx3322.

       --mmxxll--ccoommppaatt
       --mmnnoo--xxll--ccoommppaatt
           Produce code that conforms more closely to IBM XL compiler
           semantics when using AIX-compatible ABI.  Pass floating-point
           arguments to prototyped functions beyond the register save area
           (RSA) on the stack in addition to argument FPRs.  Do not assume
           that most significant double in 128-bit long double value is
           properly rounded when comparing values and converting to double.
           Use XL symbol names for long double support routines.

           The AIX calling convention was extended but not initially
           documented to handle an obscure K&R C case of calling a function
           that takes the address of its arguments with fewer arguments than
           declared.  IBM XL compilers access floating-point arguments that do
           not fit in the RSA from the stack when a subroutine is compiled
           without optimization.  Because always storing floating-point
           arguments on the stack is inefficient and rarely needed, this
           option is not enabled by default and only is necessary when calling
           subroutines compiled by IBM XL compilers without optimization.

       --mmaalliiggnn--nnaattuurraall
       --mmaalliiggnn--ppoowweerr
           On AIX, 32-bit Darwin, and 64-bit PowerPC GNU/Linux, the option
           --mmaalliiggnn--nnaattuurraall overrides the ABI-defined alignment of larger
           types, such as floating-point doubles, on their natural size-based
           boundary.  The option --mmaalliiggnn--ppoowweerr instructs GCC to follow the
           ABI-specified alignment rules.  GCC defaults to the standard
           alignment defined in the ABI.

           On 64-bit Darwin, natural alignment is the default, and
           --mmaalliiggnn--ppoowweerr is not supported.

       --mmssoofftt--ffllooaatt
       --mmhhaarrdd--ffllooaatt
           Generate code that does not use (uses) the floating-point register
           set.  Software floating-point emulation is provided if you use the
           --mmssoofftt--ffllooaatt option, and pass the option to GCC when linking.

       --mmssiinnggllee--ffllooaatt
       --mmddoouubbllee--ffllooaatt
           Generate code for single- or double-precision floating-point
           operations.  --mmddoouubbllee--ffllooaatt implies --mmssiinnggllee--ffllooaatt.

       --mmmmuullttiippllee
       --mmnnoo--mmuullttiippllee
           Generate code that uses (does not use) the load multiple word
           instructions and the store multiple word instructions.  These
           instructions are generated by default on POWER systems, and not
           generated on PowerPC systems.  Do not use --mmmmuullttiippllee on little-
           endian PowerPC systems, since those instructions do not work when
           the processor is in little-endian mode.  The exceptions are PPC740
           and PPC750 which permit these instructions in little-endian mode.

       --mmuuppddaattee
       --mmnnoo--uuppddaattee
           Generate code that uses (does not use) the load or store
           instructions that update the base register to the address of the
           calculated memory location.  These instructions are generated by
           default.  If you use --mmnnoo--uuppddaattee, there is a small window between
           the time that the stack pointer is updated and the address of the
           previous frame is stored, which means code that walks the stack
           frame across interrupts or signals may get corrupted data.

       --mmaavvooiidd--iinnddeexxeedd--aaddddrreesssseess
       --mmnnoo--aavvooiidd--iinnddeexxeedd--aaddddrreesssseess
           Generate code that tries to avoid (not avoid) the use of indexed
           load or store instructions. These instructions can incur a
           performance penalty on Power6 processors in certain situations,
           such as when stepping through large arrays that cross a 16M
           boundary.  This option is enabled by default when targeting Power6
           and disabled otherwise.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Generate code that uses (does not use) the floating-point multiply
           and accumulate instructions.  These instructions are generated by
           default if hardware floating point is used.  The machine-dependent
           --mmffuusseedd--mmaadddd option is now mapped to the machine-independent
           --ffffpp--ccoonnttrraacctt==ffaasstt option, and --mmnnoo--ffuusseedd--mmaadddd is mapped to
           --ffffpp--ccoonnttrraacctt==ooffff.

       --mmnnoo--ssttrriicctt--aalliiggnn
       --mmssttrriicctt--aalliiggnn
           On System V.4 and embedded PowerPC systems do not (do) assume that
           unaligned memory references are handled by the system.

       --mmrreellooccaattaabbllee
       --mmnnoo--rreellooccaattaabbllee
           Generate code that allows (does not allow) a static executable to
           be relocated to a different address at run time.  A simple embedded
           PowerPC system loader should relocate the entire contents of
           ".got2" and 4-byte locations listed in the ".fixup" section, a
           table of 32-bit addresses generated by this option.  For this to
           work, all objects linked together must be compiled with
           --mmrreellooccaattaabbllee or --mmrreellooccaattaabbllee--lliibb.  --mmrreellooccaattaabbllee code aligns the
           stack to an 8-byte boundary.

       --mmrreellooccaattaabbllee--lliibb
       --mmnnoo--rreellooccaattaabbllee--lliibb
           Like --mmrreellooccaattaabbllee, --mmrreellooccaattaabbllee--lliibb generates a ".fixup" section
           to allow static executables to be relocated at run time, but
           --mmrreellooccaattaabbllee--lliibb does not use the smaller stack alignment of
           --mmrreellooccaattaabbllee.  Objects compiled with --mmrreellooccaattaabbllee--lliibb may be
           linked with objects compiled with any combination of the
           --mmrreellooccaattaabbllee options.

       --mmnnoo--ttoocc
       --mmttoocc
           On System V.4 and embedded PowerPC systems do not (do) assume that
           register 2 contains a pointer to a global area pointing to the
           addresses used in the program.

       --mmlliittttllee
       --mmlliittttllee--eennddiiaann
           On System V.4 and embedded PowerPC systems compile code for the
           processor in little-endian mode.  The --mmlliittttllee--eennddiiaann option is the
           same as --mmlliittttllee.

       --mmbbiigg
       --mmbbiigg--eennddiiaann
           On System V.4 and embedded PowerPC systems compile code for the
           processor in big-endian mode.  The --mmbbiigg--eennddiiaann option is the same
           as --mmbbiigg.

       --mmddyynnaammiicc--nnoo--ppiicc
           On Darwin and Mac OS X systems, compile code so that it is not
           relocatable, but that its external references are relocatable.  The
           resulting code is suitable for applications, but not shared
           libraries.

       --mmssiinnggllee--ppiicc--bbaassee
           Treat the register used for PIC addressing as read-only, rather
           than loading it in the prologue for each function.  The runtime
           system is responsible for initializing this register with an
           appropriate value before execution begins.

       --mmpprriioorriittiizzee--rreessttrriicctteedd--iinnssnnss==_p_r_i_o_r_i_t_y
           This option controls the priority that is assigned to dispatch-slot
           restricted instructions during the second scheduling pass.  The
           argument _p_r_i_o_r_i_t_y takes the value 00, 11, or 22 to assign no, highest,
           or second-highest (respectively) priority to dispatch-slot
           restricted instructions.

       --mmsscchheedd--ccoossttllyy--ddeepp==_d_e_p_e_n_d_e_n_c_e___t_y_p_e
           This option controls which dependences are considered costly by the
           target during instruction scheduling.  The argument _d_e_p_e_n_d_e_n_c_e___t_y_p_e
           takes one of the following values:

           nnoo  No dependence is costly.

           aallll All dependences are costly.

           ttrruuee__ssttoorree__ttoo__llooaadd
               A true dependence from store to load is costly.

           ssttoorree__ttoo__llooaadd
               Any dependence from store to load is costly.

           _n_u_m_b_e_r
               Any dependence for which the latency is greater than or equal
               to _n_u_m_b_e_r is costly.

       --mmiinnsseerrtt--sscchheedd--nnooppss==_s_c_h_e_m_e
           This option controls which NOP insertion scheme is used during the
           second scheduling pass.  The argument _s_c_h_e_m_e takes one of the
           following values:

           nnoo  Don't insert NOPs.

           ppaadd Pad with NOPs any dispatch group that has vacant issue slots,
               according to the scheduler's grouping.

           rreeggrroouupp__eexxaacctt
               Insert NOPs to force costly dependent insns into separate
               groups.  Insert exactly as many NOPs as needed to force an insn
               to a new group, according to the estimated processor grouping.

           _n_u_m_b_e_r
               Insert NOPs to force costly dependent insns into separate
               groups.  Insert _n_u_m_b_e_r NOPs to force an insn to a new group.

       --mmccaallll--ssyyssvv
           On System V.4 and embedded PowerPC systems compile code using
           calling conventions that adhere to the March 1995 draft of the
           System V Application Binary Interface, PowerPC processor
           supplement.  This is the default unless you configured GCC using
           ppoowweerrppcc--**--eeaabbiiaaiixx.

       --mmccaallll--ssyyssvv--eeaabbii
       --mmccaallll--eeaabbii
           Specify both --mmccaallll--ssyyssvv and --mmeeaabbii options.

       --mmccaallll--ssyyssvv--nnooeeaabbii
           Specify both --mmccaallll--ssyyssvv and --mmnnoo--eeaabbii options.

       --mmccaallll--aaiixxddeesscc
           On System V.4 and embedded PowerPC systems compile code for the AIX
           operating system.

       --mmccaallll--lliinnuuxx
           On System V.4 and embedded PowerPC systems compile code for the
           Linux-based GNU system.

       --mmccaallll--ffrreeeebbssdd
           On System V.4 and embedded PowerPC systems compile code for the
           FreeBSD operating system.

       --mmccaallll--nneettbbssdd
           On System V.4 and embedded PowerPC systems compile code for the
           NetBSD operating system.

       --mmccaallll--ooppeennbbssdd
           On System V.4 and embedded PowerPC systems compile code for the
           OpenBSD operating system.

       --mmaaiixx--ssttrruucctt--rreettuurrnn
           Return all structures in memory (as specified by the AIX ABI).

       --mmssvvrr44--ssttrruucctt--rreettuurrnn
           Return structures smaller than 8 bytes in registers (as specified
           by the SVR4 ABI).

       --mmaabbii==_a_b_i_-_t_y_p_e
           Extend the current ABI with a particular extension, or remove such
           extension.  Valid values are aallttiivveecc, nnoo--aallttiivveecc, ssppee, nnoo--ssppee,
           iibbmmlloonnggddoouubbllee, iieeeeeelloonnggddoouubbllee, eellffvv11, eellffvv22.

       --mmaabbii==ssppee
           Extend the current ABI with SPE ABI extensions.  This does not
           change the default ABI, instead it adds the SPE ABI extensions to
           the current ABI.

       --mmaabbii==nnoo--ssppee
           Disable Book-E SPE ABI extensions for the current ABI.

       --mmaabbii==iibbmmlloonnggddoouubbllee
           Change the current ABI to use IBM extended-precision long double.
           This is not likely to work if your system defaults to using IEEE
           extended-precision long double.  If you change the long double type
           from IEEE extended-precision, the compiler will issue a warning
           unless you use the --WWnnoo--ppssaabbii option.  Requires --mmlloonngg--ddoouubbllee--112288
           to be enabled.

       --mmaabbii==iieeeeeelloonnggddoouubbllee
           Change the current ABI to use IEEE extended-precision long double.
           This is not likely to work if your system defaults to using IBM
           extended-precision long double.  If you change the long double type
           from IBM extended-precision, the compiler will issue a warning
           unless you use the --WWnnoo--ppssaabbii option.  Requires --mmlloonngg--ddoouubbllee--112288
           to be enabled.

       --mmaabbii==eellffvv11
           Change the current ABI to use the ELFv1 ABI.  This is the default
           ABI for big-endian PowerPC 64-bit Linux.  Overriding the default
           ABI requires special system support and is likely to fail in
           spectacular ways.

       --mmaabbii==eellffvv22
           Change the current ABI to use the ELFv2 ABI.  This is the default
           ABI for little-endian PowerPC 64-bit Linux.  Overriding the default
           ABI requires special system support and is likely to fail in
           spectacular ways.

       --mmggnnuu--aattttrriibbuuttee
       --mmnnoo--ggnnuu--aattttrriibbuuttee
           Emit .gnu_attribute assembly directives to set tag/value pairs in a
           .gnu.attributes section that specify ABI variations in function
           parameters or return values.

       --mmpprroottoottyyppee
       --mmnnoo--pprroottoottyyppee
           On System V.4 and embedded PowerPC systems assume that all calls to
           variable argument functions are properly prototyped.  Otherwise,
           the compiler must insert an instruction before every non-prototyped
           call to set or clear bit 6 of the condition code register ("CR") to
           indicate whether floating-point values are passed in the floating-
           point registers in case the function takes variable arguments.
           With --mmpprroottoottyyppee, only calls to prototyped variable argument
           functions set or clear the bit.

       --mmssiimm
           On embedded PowerPC systems, assume that the startup module is
           called _s_i_m_-_c_r_t_0_._o and that the standard C libraries are _l_i_b_s_i_m_._a
           and _l_i_b_c_._a.  This is the default for ppoowweerrppcc--**--eeaabbiissiimm
           configurations.

       --mmmmvvmmee
           On embedded PowerPC systems, assume that the startup module is
           called _c_r_t_0_._o and the standard C libraries are _l_i_b_m_v_m_e_._a and
           _l_i_b_c_._a.

       --mmaaddss
           On embedded PowerPC systems, assume that the startup module is
           called _c_r_t_0_._o and the standard C libraries are _l_i_b_a_d_s_._a and _l_i_b_c_._a.

       --mmyyeelllloowwkknniiffee
           On embedded PowerPC systems, assume that the startup module is
           called _c_r_t_0_._o and the standard C libraries are _l_i_b_y_k_._a and _l_i_b_c_._a.

       --mmvvxxwwoorrkkss
           On System V.4 and embedded PowerPC systems, specify that you are
           compiling for a VxWorks system.

       --mmeemmbb
           On embedded PowerPC systems, set the "PPC_EMB" bit in the ELF flags
           header to indicate that eeaabbii extended relocations are used.

       --mmeeaabbii
       --mmnnoo--eeaabbii
           On System V.4 and embedded PowerPC systems do (do not) adhere to
           the Embedded Applications Binary Interface (EABI), which is a set
           of modifications to the System V.4 specifications.  Selecting
           --mmeeaabbii means that the stack is aligned to an 8-byte boundary, a
           function "__eabi" is called from "main" to set up the EABI
           environment, and the --mmssddaattaa option can use both "r2" and "r13" to
           point to two separate small data areas.  Selecting --mmnnoo--eeaabbii means
           that the stack is aligned to a 16-byte boundary, no EABI
           initialization function is called from "main", and the --mmssddaattaa
           option only uses "r13" to point to a single small data area.  The
           --mmeeaabbii option is on by default if you configured GCC using one of
           the ppoowweerrppcc**--**--eeaabbii** options.

       --mmssddaattaa==eeaabbii
           On System V.4 and embedded PowerPC systems, put small initialized
           "const" global and static data in the ".sdata2" section, which is
           pointed to by register "r2".  Put small initialized non-"const"
           global and static data in the ".sdata" section, which is pointed to
           by register "r13".  Put small uninitialized global and static data
           in the ".sbss" section, which is adjacent to the ".sdata" section.
           The --mmssddaattaa==eeaabbii option is incompatible with the --mmrreellooccaattaabbllee
           option.  The --mmssddaattaa==eeaabbii option also sets the --mmeemmbb option.

       --mmssddaattaa==ssyyssvv
           On System V.4 and embedded PowerPC systems, put small global and
           static data in the ".sdata" section, which is pointed to by
           register "r13".  Put small uninitialized global and static data in
           the ".sbss" section, which is adjacent to the ".sdata" section.
           The --mmssddaattaa==ssyyssvv option is incompatible with the --mmrreellooccaattaabbllee
           option.

       --mmssddaattaa==ddeeffaauulltt
       --mmssddaattaa
           On System V.4 and embedded PowerPC systems, if --mmeeaabbii is used,
           compile code the same as --mmssddaattaa==eeaabbii, otherwise compile code the
           same as --mmssddaattaa==ssyyssvv.

       --mmssddaattaa==ddaattaa
           On System V.4 and embedded PowerPC systems, put small global data
           in the ".sdata" section.  Put small uninitialized global data in
           the ".sbss" section.  Do not use register "r13" to address small
           data however.  This is the default behavior unless other --mmssddaattaa
           options are used.

       --mmssddaattaa==nnoonnee
       --mmnnoo--ssddaattaa
           On embedded PowerPC systems, put all initialized global and static
           data in the ".data" section, and all uninitialized data in the
           ".bss" section.

       --mmbblloocckk--mmoovvee--iinnlliinnee--lliimmiitt==_n_u_m
           Inline all block moves (such as calls to "memcpy" or structure
           copies) less than or equal to _n_u_m bytes.  The minimum value for _n_u_m
           is 32 bytes on 32-bit targets and 64 bytes on 64-bit targets.  The
           default value is target-specific.

       --GG _n_u_m
           On embedded PowerPC systems, put global and static items less than
           or equal to _n_u_m bytes into the small data or BSS sections instead
           of the normal data or BSS section.  By default, _n_u_m is 8.  The --GG
           _n_u_m switch is also passed to the linker.  All modules should be
           compiled with the same --GG _n_u_m value.

       --mmrreeggnnaammeess
       --mmnnoo--rreeggnnaammeess
           On System V.4 and embedded PowerPC systems do (do not) emit
           register names in the assembly language output using symbolic
           forms.

       --mmlloonnggccaallll
       --mmnnoo--lloonnggccaallll
           By default assume that all calls are far away so that a longer and
           more expensive calling sequence is required.  This is required for
           calls farther than 32 megabytes (33,554,432 bytes) from the current
           location.  A short call is generated if the compiler knows the call
           cannot be that far away.  This setting can be overridden by the
           "shortcall" function attribute, or by "#pragma longcall(0)".

           Some linkers are capable of detecting out-of-range calls and
           generating glue code on the fly.  On these systems, long calls are
           unnecessary and generate slower code.  As of this writing, the AIX
           linker can do this, as can the GNU linker for PowerPC/64.  It is
           planned to add this feature to the GNU linker for 32-bit PowerPC
           systems as well.

           In the future, GCC may ignore all longcall specifications when the
           linker is known to generate glue.

       --mmttllss--mmaarrkkeerrss
       --mmnnoo--ttllss--mmaarrkkeerrss
           Mark (do not mark) calls to "__tls_get_addr" with a relocation
           specifying the function argument.  The relocation allows the linker
           to reliably associate function call with argument setup
           instructions for TLS optimization, which in turn allows GCC to
           better schedule the sequence.

       --mmrreecciipp
       --mmnnoo--rreecciipp
           This option enables use of the reciprocal estimate and reciprocal
           square root estimate instructions with additional Newton-Raphson
           steps to increase precision instead of doing a divide or square
           root and divide for floating-point arguments.  You should use the
           --ffffaasstt--mmaatthh option when using --mmrreecciipp (or at least
           --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss, --ffffiinniittee--mmaatthh--oonnllyy, --ffrreecciipprrooccaall--mmaatthh
           and --ffnnoo--ttrraappppiinngg--mmaatthh).  Note that while the throughput of the
           sequence is generally higher than the throughput of the non-
           reciprocal instruction, the precision of the sequence can be
           decreased by up to 2 ulp (i.e. the inverse of 1.0 equals
           0.99999994) for reciprocal square roots.

       --mmrreecciipp==_o_p_t
           This option controls which reciprocal estimate instructions may be
           used.  _o_p_t is a comma-separated list of options, which may be
           preceded by a "!" to invert the option:

           aallll Enable all estimate instructions.

           ddeeffaauulltt
               Enable the default instructions, equivalent to --mmrreecciipp.

           nnoonnee
               Disable all estimate instructions, equivalent to --mmnnoo--rreecciipp.

           ddiivv Enable the reciprocal approximation instructions for both
               single and double precision.

           ddiivvff
               Enable the single-precision reciprocal approximation
               instructions.

           ddiivvdd
               Enable the double-precision reciprocal approximation
               instructions.

           rrssqqrrtt
               Enable the reciprocal square root approximation instructions
               for both single and double precision.

           rrssqqrrttff
               Enable the single-precision reciprocal square root
               approximation instructions.

           rrssqqrrttdd
               Enable the double-precision reciprocal square root
               approximation instructions.

           So, for example, --mmrreecciipp==aallll,,!!rrssqqrrttdd enables all of the reciprocal
           estimate instructions, except for the "FRSQRTE", "XSRSQRTEDP", and
           "XVRSQRTEDP" instructions which handle the double-precision
           reciprocal square root calculations.

       --mmrreecciipp--pprreecciissiioonn
       --mmnnoo--rreecciipp--pprreecciissiioonn
           Assume (do not assume) that the reciprocal estimate instructions
           provide higher-precision estimates than is mandated by the PowerPC
           ABI.  Selecting --mmccppuu==ppoowweerr66, --mmccppuu==ppoowweerr77 or --mmccppuu==ppoowweerr88
           automatically selects --mmrreecciipp--pprreecciissiioonn.  The double-precision
           square root estimate instructions are not generated by default on
           low-precision machines, since they do not provide an estimate that
           converges after three steps.

       --mmppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss
       --mmnnoo--ppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss
           Generate (do not generate) code to load up the static chain
           register ("r11") when calling through a pointer on AIX and 64-bit
           Linux systems where a function pointer points to a 3-word
           descriptor giving the function address, TOC value to be loaded in
           register "r2", and static chain value to be loaded in register
           "r11".  The --mmppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss is on by default.  You
           cannot call through pointers to nested functions or pointers to
           functions compiled in other languages that use the static chain if
           you use --mmnnoo--ppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss.

       --mmssaavvee--ttoocc--iinnddiirreecctt
       --mmnnoo--ssaavvee--ttoocc--iinnddiirreecctt
           Generate (do not generate) code to save the TOC value in the
           reserved stack location in the function prologue if the function
           calls through a pointer on AIX and 64-bit Linux systems.  If the
           TOC value is not saved in the prologue, it is saved just before the
           call through the pointer.  The --mmnnoo--ssaavvee--ttoocc--iinnddiirreecctt option is the
           default.

       --mmccoommppaatt--aalliiggnn--ppaarrmm
       --mmnnoo--ccoommppaatt--aalliiggnn--ppaarrmm
           Generate (do not generate) code to pass structure parameters with a
           maximum alignment of 64 bits, for compatibility with older versions
           of GCC.

           Older versions of GCC (prior to 4.9.0) incorrectly did not align a
           structure parameter on a 128-bit boundary when that structure
           contained a member requiring 128-bit alignment.  This is corrected
           in more recent versions of GCC.  This option may be used to
           generate code that is compatible with functions compiled with older
           versions of GCC.

           The --mmnnoo--ccoommppaatt--aalliiggnn--ppaarrmm option is the default.

       --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd==_g_u_a_r_d
       --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--rreegg==_r_e_g
       --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--ooffffsseett==_o_f_f_s_e_t
       --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--ssyymmbbooll==_s_y_m_b_o_l
           Generate stack protection code using canary at _g_u_a_r_d.  Supported
           locations are gglloobbaall for global canary or ttllss for per-thread canary
           in the TLS block (the default with GNU libc version 2.4 or later).

           With the latter choice the options --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--rreegg==_r_e_g
           and --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--ooffffsseett==_o_f_f_s_e_t furthermore specify which
           register to use as base register for reading the canary, and from
           what offset from that base register. The default for those is as
           specified in the relevant ABI.
           --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--ssyymmbbooll==_s_y_m_b_o_l overrides the offset with a
           symbol reference to a canary in the TLS block.

       _R_I_S_C_-_V _O_p_t_i_o_n_s

       These command-line options are defined for RISC-V targets:

       --mmbbrraanncchh--ccoosstt==_n
           Set the cost of branches to roughly _n instructions.

       --mmpplltt
       --mmnnoo--pplltt
           When generating PIC code, do or don't allow the use of PLTs.
           Ignored for non-PIC.  The default is --mmpplltt.

       --mmaabbii==_A_B_I_-_s_t_r_i_n_g
           Specify integer and floating-point calling convention.  _A_B_I_-_s_t_r_i_n_g
           contains two parts: the size of integer types and the registers
           used for floating-point types.  For example --mmaarrcchh==rrvv6644iiffdd
           --mmaabbii==llpp6644dd means that lloonngg and pointers are 64-bit (implicitly
           defining iinntt to be 32-bit), and that floating-point values up to 64
           bits wide are passed in F registers.  Contrast this with
           --mmaarrcchh==rrvv6644iiffdd --mmaabbii==llpp6644ff, which still allows the compiler to
           generate code that uses the F and D extensions but only allows
           floating-point values up to 32 bits long to be passed in registers;
           or --mmaarrcchh==rrvv6644iiffdd --mmaabbii==llpp6644, in which no floating-point arguments
           will be passed in registers.

           The default for this argument is system dependent, users who want a
           specific calling convention should specify one explicitly.  The
           valid calling conventions are: iillpp3322, iillpp3322ff, iillpp3322dd, llpp6644, llpp6644ff,
           and llpp6644dd.  Some calling conventions are impossible to implement on
           some ISAs: for example, --mmaarrcchh==rrvv3322iiff --mmaabbii==iillpp3322dd is invalid
           because the ABI requires 64-bit values be passed in F registers,
           but F registers are only 32 bits wide.

       --mmffddiivv
       --mmnnoo--ffddiivv
           Do or don't use hardware floating-point divide and square root
           instructions.  This requires the F or D extensions for floating-
           point registers.  The default is to use them if the specified
           architecture has these instructions.

       --mmddiivv
       --mmnnoo--ddiivv
           Do or don't use hardware instructions for integer division.  This
           requires the M extension.  The default is to use them if the
           specified architecture has these instructions.

       --mmaarrcchh==_I_S_A_-_s_t_r_i_n_g
           Generate code for given RISC-V ISA (e.g. rrvv6644iimm).  ISA strings must
           be lower-case.  Examples include rrvv6644ii, rrvv3322gg, and rrvv3322iimmaaff.

       --mmttuunnee==_p_r_o_c_e_s_s_o_r_-_s_t_r_i_n_g
           Optimize the output for the given processor, specified by
           microarchitecture name.

       --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==_n_u_m
           Attempt to keep the stack boundary aligned to a 2 raised to _n_u_m
           byte boundary.  If --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy is not specified, the
           default is 4 (16 bytes or 128-bits).

           WWaarrnniinngg:: If you use this switch, then you must build all modules
           with the same value, including any libraries.  This includes the
           system libraries and startup modules.

       --mmssmmaallll--ddaattaa--lliimmiitt==_n
           Put global and static data smaller than _n bytes into a special
           section (on some targets).

       --mmssaavvee--rreessttoorree
       --mmnnoo--ssaavvee--rreessttoorree
           Do or don't use smaller but slower prologue and epilogue code that
           uses library function calls.  The default is to use fast inline
           prologues and epilogues.

       --mmssttrriicctt--aalliiggnn
       --mmnnoo--ssttrriicctt--aalliiggnn
           Do not or do generate unaligned memory accesses.  The default is
           set depending on whether the processor we are optimizing for
           supports fast unaligned access or not.

       --mmccmmooddeell==mmeeddllooww
           Generate code for the medium-low code model. The program and its
           statically defined symbols must lie within a single 2 GiB address
           range and must lie between absolute addresses -2 GiB and +2 GiB.
           Programs can be statically or dynamically linked. This is the
           default code model.

       --mmccmmooddeell==mmeeddaannyy
           Generate code for the medium-any code model. The program and its
           statically defined symbols must be within any single 2 GiB address
           range. Programs can be statically or dynamically linked.

       --mmeexxpplliicciitt--rreellooccss
       --mmnnoo--eexxlliicciitt--rreellooccss
           Use or do not use assembler relocation operators when dealing with
           symbolic addresses.  The alternative is to use assembler macros
           instead, which may limit optimization.

       --mmrreellaaxx
       --mmnnoo--rreellaaxx
           Take advantage of linker relaxations to reduce the number of
           instructions required to materialize symbol addresses. The default
           is to take advantage of linker relaxations.

       _R_L_7_8 _O_p_t_i_o_n_s

       --mmssiimm
           Links in additional target libraries to support operation within a
           simulator.

       --mmmmuull==nnoonnee
       --mmmmuull==gg1100
       --mmmmuull==gg1133
       --mmmmuull==gg1144
       --mmmmuull==rrll7788
           Specifies the type of hardware multiplication and division support
           to be used.  The simplest is "none", which uses software for both
           multiplication and division.  This is the default.  The "g13" value
           is for the hardware multiply/divide peripheral found on the
           RL78/G13 (S2 core) targets.  The "g14" value selects the use of the
           multiplication and division instructions supported by the RL78/G14
           (S3 core) parts.  The value "rl78" is an alias for "g14" and the
           value "mg10" is an alias for "none".

           In addition a C preprocessor macro is defined, based upon the
           setting of this option.  Possible values are: "__RL78_MUL_NONE__",
           "__RL78_MUL_G13__" or "__RL78_MUL_G14__".

       --mmccppuu==gg1100
       --mmccppuu==gg1133
       --mmccppuu==gg1144
       --mmccppuu==rrll7788
           Specifies the RL78 core to target.  The default is the G14 core,
           also known as an S3 core or just RL78.  The G13 or S2 core does not
           have multiply or divide instructions, instead it uses a hardware
           peripheral for these operations.  The G10 or S1 core does not have
           register banks, so it uses a different calling convention.

           If this option is set it also selects the type of hardware multiply
           support to use, unless this is overridden by an explicit --mmmmuull==nnoonnee
           option on the command line.  Thus specifying --mmccppuu==gg1133 enables the
           use of the G13 hardware multiply peripheral and specifying
           --mmccppuu==gg1100 disables the use of hardware multiplications altogether.

           Note, although the RL78/G14 core is the default target, specifying
           --mmccppuu==gg1144 or --mmccppuu==rrll7788 on the command line does change the
           behavior of the toolchain since it also enables G14 hardware
           multiply support.  If these options are not specified on the
           command line then software multiplication routines will be used
           even though the code targets the RL78 core.  This is for backwards
           compatibility with older toolchains which did not have hardware
           multiply and divide support.

           In addition a C preprocessor macro is defined, based upon the
           setting of this option.  Possible values are: "__RL78_G10__",
           "__RL78_G13__" or "__RL78_G14__".

       --mmgg1100
       --mmgg1133
       --mmgg1144
       --mmrrll7788
           These are aliases for the corresponding --mmccppuu== option.  They are
           provided for backwards compatibility.

       --mmaallllrreeggss
           Allow the compiler to use all of the available registers.  By
           default registers "r24..r31" are reserved for use in interrupt
           handlers.  With this option enabled these registers can be used in
           ordinary functions as well.

       --mm6644bbiitt--ddoouubblleess
       --mm3322bbiitt--ddoouubblleess
           Make the "double" data type be 64 bits (--mm6644bbiitt--ddoouubblleess) or 32 bits
           (--mm3322bbiitt--ddoouubblleess) in size.  The default is --mm3322bbiitt--ddoouubblleess.

       --mmssaavvee--mmdduucc--iinn--iinntteerrrruuppttss
       --mmnnoo--ssaavvee--mmdduucc--iinn--iinntteerrrruuppttss
           Specifies that interrupt handler functions should preserve the MDUC
           registers.  This is only necessary if normal code might use the
           MDUC registers, for example because it performs multiplication and
           division operations.  The default is to ignore the MDUC registers
           as this makes the interrupt handlers faster.  The target option
           -mg13 needs to be passed for this to work as this feature is only
           available on the G13 target (S2 core).  The MDUC registers will
           only be saved if the interrupt handler performs a multiplication or
           division operation or it calls another function.

       _I_B_M _R_S_/_6_0_0_0 _a_n_d _P_o_w_e_r_P_C _O_p_t_i_o_n_s

       These --mm options are defined for the IBM RS/6000 and PowerPC:

       --mmppoowweerrppcc--ggppoopptt
       --mmnnoo--ppoowweerrppcc--ggppoopptt
       --mmppoowweerrppcc--ggffxxoopptt
       --mmnnoo--ppoowweerrppcc--ggffxxoopptt
       --mmppoowweerrppcc6644
       --mmnnoo--ppoowweerrppcc6644
       --mmmmffccrrff
       --mmnnoo--mmffccrrff
       --mmppooppccnnttbb
       --mmnnoo--ppooppccnnttbb
       --mmppooppccnnttdd
       --mmnnoo--ppooppccnnttdd
       --mmffpprrnndd
       --mmnnoo--ffpprrnndd
       --mmccmmppbb
       --mmnnoo--ccmmppbb
       --mmmmffppggpprr
       --mmnnoo--mmffppggpprr
       --mmhhaarrdd--ddffpp
       --mmnnoo--hhaarrdd--ddffpp
           You use these options to specify which instructions are available
           on the processor you are using.  The default value of these options
           is determined when configuring GCC.  Specifying the --mmccppuu==_c_p_u___t_y_p_e
           overrides the specification of these options.  We recommend you use
           the --mmccppuu==_c_p_u___t_y_p_e option rather than the options listed above.

           Specifying --mmppoowweerrppcc--ggppoopptt allows GCC to use the optional PowerPC
           architecture instructions in the General Purpose group, including
           floating-point square root.  Specifying --mmppoowweerrppcc--ggffxxoopptt allows GCC
           to use the optional PowerPC architecture instructions in the
           Graphics group, including floating-point select.

           The --mmmmffccrrff option allows GCC to generate the move from condition
           register field instruction implemented on the POWER4 processor and
           other processors that support the PowerPC V2.01 architecture.  The
           --mmppooppccnnttbb option allows GCC to generate the popcount and double-
           precision FP reciprocal estimate instruction implemented on the
           POWER5 processor and other processors that support the PowerPC
           V2.02 architecture.  The --mmppooppccnnttdd option allows GCC to generate
           the popcount instruction implemented on the POWER7 processor and
           other processors that support the PowerPC V2.06 architecture.  The
           --mmffpprrnndd option allows GCC to generate the FP round to integer
           instructions implemented on the POWER5+ processor and other
           processors that support the PowerPC V2.03 architecture.  The --mmccmmppbb
           option allows GCC to generate the compare bytes instruction
           implemented on the POWER6 processor and other processors that
           support the PowerPC V2.05 architecture.  The --mmmmffppggpprr option allows
           GCC to generate the FP move to/from general-purpose register
           instructions implemented on the POWER6X processor and other
           processors that support the extended PowerPC V2.05 architecture.
           The --mmhhaarrdd--ddffpp option allows GCC to generate the decimal floating-
           point instructions implemented on some POWER processors.

           The --mmppoowweerrppcc6644 option allows GCC to generate the additional 64-bit
           instructions that are found in the full PowerPC64 architecture and
           to treat GPRs as 64-bit, doubleword quantities.  GCC defaults to
           --mmnnoo--ppoowweerrppcc6644.

       --mmccppuu==_c_p_u___t_y_p_e
           Set architecture type, register usage, and instruction scheduling
           parameters for machine type _c_p_u___t_y_p_e.  Supported values for
           _c_p_u___t_y_p_e are 440011, 440033, 440055, 440055ffpp, 444400, 444400ffpp, 446644, 446644ffpp, 447766,
           447766ffpp, 550055, 660011, 660022, 660033, 660033ee, 660044, 660044ee, 662200, 663300, 774400, 77440000,
           77445500, 775500, 880011, 882211, 882233, 886600, 997700, 88554400, aa22, ee330000cc22, ee330000cc33,
           ee550000mmcc, ee550000mmcc6644, ee55550000, ee66550000, eecc660033ee, GG33, GG44, GG55, ttiittaann, ppoowweerr33,
           ppoowweerr44, ppoowweerr55, ppoowweerr55++, ppoowweerr66, ppoowweerr66xx, ppoowweerr77, ppoowweerr88, ppoowweerr99,
           ppoowweerrppcc, ppoowweerrppcc6644, ppoowweerrppcc6644llee, rrss6644, and nnaattiivvee.

           --mmccppuu==ppoowweerrppcc, --mmccppuu==ppoowweerrppcc6644, and --mmccppuu==ppoowweerrppcc6644llee specify pure
           32-bit PowerPC (either endian), 64-bit big endian PowerPC and
           64-bit little endian PowerPC architecture machine types, with an
           appropriate, generic processor model assumed for scheduling
           purposes.

           Specifying nnaattiivvee as cpu type detects and selects the architecture
           option that corresponds to the host processor of the system
           performing the compilation.  --mmccppuu==nnaattiivvee has no effect if GCC does
           not recognize the processor.

           The other options specify a specific processor.  Code generated
           under those options runs best on that processor, and may not run at
           all on others.

           The --mmccppuu options automatically enable or disable the following
           options:

           --mmaallttiivveecc  --mmffpprrnndd  --mmhhaarrdd--ffllooaatt  --mmmmffccrrff  --mmmmuullttiippllee --mmppooppccnnttbb
           --mmppooppccnnttdd  --mmppoowweerrppcc6644 --mmppoowweerrppcc--ggppoopptt  --mmppoowweerrppcc--ggffxxoopptt
           --mmssiinnggllee--ffllooaatt --mmddoouubbllee--ffllooaatt --mmssiimmppllee--ffppuu  --mmmmuullhhww  --mmddllmmzzbb
           --mmmmffppggpprr --mmvvssxx --mmccrryyppttoo --mmhhttmm --mmppoowweerr88--ffuussiioonn --mmppoowweerr88--vveeccttoorr
           --mmqquuaadd--mmeemmoorryy --mmqquuaadd--mmeemmoorryy--aattoommiicc --mmffllooaatt112288 --mmffllooaatt112288--hhaarrddwwaarree

           The particular options set for any particular CPU varies between
           compiler versions, depending on what setting seems to produce
           optimal code for that CPU; it doesn't necessarily reflect the
           actual hardware's capabilities.  If you wish to set an individual
           option to a particular value, you may specify it after the --mmccppuu
           option, like --mmccppuu==997700 --mmnnoo--aallttiivveecc.

           On AIX, the --mmaallttiivveecc and --mmppoowweerrppcc6644 options are not enabled or
           disabled by the --mmccppuu option at present because AIX does not have
           full support for these options.  You may still enable or disable
           them individually if you're sure it'll work in your environment.

       --mmttuunnee==_c_p_u___t_y_p_e
           Set the instruction scheduling parameters for machine type
           _c_p_u___t_y_p_e, but do not set the architecture type or register usage,
           as --mmccppuu==_c_p_u___t_y_p_e does.  The same values for _c_p_u___t_y_p_e are used for
           --mmttuunnee as for --mmccppuu.  If both are specified, the code generated
           uses the architecture and registers set by --mmccppuu, but the
           scheduling parameters set by --mmttuunnee.

       --mmccmmooddeell==ssmmaallll
           Generate PowerPC64 code for the small model: The TOC is limited to
           64k.

       --mmccmmooddeell==mmeeddiiuumm
           Generate PowerPC64 code for the medium model: The TOC and other
           static data may be up to a total of 4G in size.  This is the
           default for 64-bit Linux.

       --mmccmmooddeell==llaarrggee
           Generate PowerPC64 code for the large model: The TOC may be up to
           4G in size.  Other data and code is only limited by the 64-bit
           address space.

       --mmaallttiivveecc
       --mmnnoo--aallttiivveecc
           Generate code that uses (does not use) AltiVec instructions, and
           also enable the use of built-in functions that allow more direct
           access to the AltiVec instruction set.  You may also need to set
           --mmaabbii==aallttiivveecc to adjust the current ABI with AltiVec ABI
           enhancements.

           When --mmaallttiivveecc is used, rather than --mmaallttiivveecc==llee or --mmaallttiivveecc==bbee,
           the element order for AltiVec intrinsics such as "vec_splat",
           "vec_extract", and "vec_insert" match array element order
           corresponding to the endianness of the target.  That is, element
           zero identifies the leftmost element in a vector register when
           targeting a big-endian platform, and identifies the rightmost
           element in a vector register when targeting a little-endian
           platform.

       --mmaallttiivveecc==bbee
           Generate AltiVec instructions using big-endian element order,
           regardless of whether the target is big- or little-endian.  This is
           the default when targeting a big-endian platform.  Using this
           option is currently deprecated.  Support for this feature will be
           removed in GCC 9.

           The element order is used to interpret element numbers in AltiVec
           intrinsics such as "vec_splat", "vec_extract", and "vec_insert".
           By default, these match array element order corresponding to the
           endianness for the target.

       --mmaallttiivveecc==llee
           Generate AltiVec instructions using little-endian element order,
           regardless of whether the target is big- or little-endian.  This is
           the default when targeting a little-endian platform.  This option
           is currently ignored when targeting a big-endian platform.

           The element order is used to interpret element numbers in AltiVec
           intrinsics such as "vec_splat", "vec_extract", and "vec_insert".
           By default, these match array element order corresponding to the
           endianness for the target.

       --mmvvrrssaavvee
       --mmnnoo--vvrrssaavvee
           Generate VRSAVE instructions when generating AltiVec code.

       --mmsseeccuurree--pplltt
           Generate code that allows lldd and lldd..ssoo to build executables and
           shared libraries with non-executable ".plt" and ".got" sections.
           This is a PowerPC 32-bit SYSV ABI option.

       --mmbbssss--pplltt
           Generate code that uses a BSS ".plt" section that lldd..ssoo fills in,
           and requires ".plt" and ".got" sections that are both writable and
           executable.  This is a PowerPC 32-bit SYSV ABI option.

       --mmiisseell
       --mmnnoo--iisseell
           This switch enables or disables the generation of ISEL
           instructions.

       --mmiisseell==_y_e_s_/_n_o
           This switch has been deprecated.  Use --mmiisseell and --mmnnoo--iisseell instead.

       --mmppaaiirreedd
       --mmnnoo--ppaaiirreedd
           This switch enables or disables the generation of PAIRED simd
           instructions.

       --mmvvssxx
       --mmnnoo--vvssxx
           Generate code that uses (does not use) vector/scalar (VSX)
           instructions, and also enable the use of built-in functions that
           allow more direct access to the VSX instruction set.

       --mmccrryyppttoo
       --mmnnoo--ccrryyppttoo
           Enable the use (disable) of the built-in functions that allow
           direct access to the cryptographic instructions that were added in
           version 2.07 of the PowerPC ISA.

       --mmhhttmm
       --mmnnoo--hhttmm
           Enable (disable) the use of the built-in functions that allow
           direct access to the Hardware Transactional Memory (HTM)
           instructions that were added in version 2.07 of the PowerPC ISA.

       --mmppoowweerr88--ffuussiioonn
       --mmnnoo--ppoowweerr88--ffuussiioonn
           Generate code that keeps (does not keeps) some integer operations
           adjacent so that the instructions can be fused together on power8
           and later processors.

       --mmppoowweerr88--vveeccttoorr
       --mmnnoo--ppoowweerr88--vveeccttoorr
           Generate code that uses (does not use) the vector and scalar
           instructions that were added in version 2.07 of the PowerPC ISA.
           Also enable the use of built-in functions that allow more direct
           access to the vector instructions.

       --mmqquuaadd--mmeemmoorryy
       --mmnnoo--qquuaadd--mmeemmoorryy
           Generate code that uses (does not use) the non-atomic quad word
           memory instructions.  The --mmqquuaadd--mmeemmoorryy option requires use of
           64-bit mode.

       --mmqquuaadd--mmeemmoorryy--aattoommiicc
       --mmnnoo--qquuaadd--mmeemmoorryy--aattoommiicc
           Generate code that uses (does not use) the atomic quad word memory
           instructions.  The --mmqquuaadd--mmeemmoorryy--aattoommiicc option requires use of
           64-bit mode.

       --mmffllooaatt112288
       --mmnnoo--ffllooaatt112288
           Enable/disable the _____f_l_o_a_t_1_2_8 keyword for IEEE 128-bit floating
           point and use either software emulation for IEEE 128-bit floating
           point or hardware instructions.

           The VSX instruction set (--mmvvssxx, --mmccppuu==ppoowweerr77, --mmccppuu==ppoowweerr88), or
           --mmccppuu==ppoowweerr99 must be enabled to use the IEEE 128-bit floating point
           support.  The IEEE 128-bit floating point support only works on
           PowerPC Linux systems.

           The default for --mmffllooaatt112288 is enabled on PowerPC Linux systems
           using the VSX instruction set, and disabled on other systems.

           If you use the ISA 3.0 instruction set (--mmppoowweerr99--vveeccttoorr or
           --mmccppuu==ppoowweerr99) on a 64-bit system, the IEEE 128-bit floating point
           support will also enable the generation of ISA 3.0 IEEE 128-bit
           floating point instructions.  Otherwise, if you do not specify to
           generate ISA 3.0 instructions or you are targeting a 32-bit big
           endian system, IEEE 128-bit floating point will be done with
           software emulation.

       --mmffllooaatt112288--hhaarrddwwaarree
       --mmnnoo--ffllooaatt112288--hhaarrddwwaarree
           Enable/disable using ISA 3.0 hardware instructions to support the
           _____f_l_o_a_t_1_2_8 data type.

           The default for --mmffllooaatt112288--hhaarrddwwaarree is enabled on PowerPC Linux
           systems using the ISA 3.0 instruction set, and disabled on other
           systems.

       --mm3322
       --mm6644
           Generate code for 32-bit or 64-bit environments of Darwin and SVR4
           targets (including GNU/Linux).  The 32-bit environment sets int,
           long and pointer to 32 bits and generates code that runs on any
           PowerPC variant.  The 64-bit environment sets int to 32 bits and
           long and pointer to 64 bits, and generates code for PowerPC64, as
           for --mmppoowweerrppcc6644.

       --mmffuullll--ttoocc
       --mmnnoo--ffpp--iinn--ttoocc
       --mmnnoo--ssuumm--iinn--ttoocc
       --mmmmiinniimmaall--ttoocc
           Modify generation of the TOC (Table Of Contents), which is created
           for every executable file.  The --mmffuullll--ttoocc option is selected by
           default.  In that case, GCC allocates at least one TOC entry for
           each unique non-automatic variable reference in your program.  GCC
           also places floating-point constants in the TOC.  However, only
           16,384 entries are available in the TOC.

           If you receive a linker error message that saying you have
           overflowed the available TOC space, you can reduce the amount of
           TOC space used with the --mmnnoo--ffpp--iinn--ttoocc and --mmnnoo--ssuumm--iinn--ttoocc options.
           --mmnnoo--ffpp--iinn--ttoocc prevents GCC from putting floating-point constants
           in the TOC and --mmnnoo--ssuumm--iinn--ttoocc forces GCC to generate code to
           calculate the sum of an address and a constant at run time instead
           of putting that sum into the TOC.  You may specify one or both of
           these options.  Each causes GCC to produce very slightly slower and
           larger code at the expense of conserving TOC space.

           If you still run out of space in the TOC even when you specify both
           of these options, specify --mmmmiinniimmaall--ttoocc instead.  This option
           causes GCC to make only one TOC entry for every file.  When you
           specify this option, GCC produces code that is slower and larger
           but which uses extremely little TOC space.  You may wish to use
           this option only on files that contain less frequently-executed
           code.

       --mmaaiixx6644
       --mmaaiixx3322
           Enable 64-bit AIX ABI and calling convention: 64-bit pointers,
           64-bit "long" type, and the infrastructure needed to support them.
           Specifying --mmaaiixx6644 implies --mmppoowweerrppcc6644, while --mmaaiixx3322 disables the
           64-bit ABI and implies --mmnnoo--ppoowweerrppcc6644.  GCC defaults to --mmaaiixx3322.

       --mmxxll--ccoommppaatt
       --mmnnoo--xxll--ccoommppaatt
           Produce code that conforms more closely to IBM XL compiler
           semantics when using AIX-compatible ABI.  Pass floating-point
           arguments to prototyped functions beyond the register save area
           (RSA) on the stack in addition to argument FPRs.  Do not assume
           that most significant double in 128-bit long double value is
           properly rounded when comparing values and converting to double.
           Use XL symbol names for long double support routines.

           The AIX calling convention was extended but not initially
           documented to handle an obscure K&R C case of calling a function
           that takes the address of its arguments with fewer arguments than
           declared.  IBM XL compilers access floating-point arguments that do
           not fit in the RSA from the stack when a subroutine is compiled
           without optimization.  Because always storing floating-point
           arguments on the stack is inefficient and rarely needed, this
           option is not enabled by default and only is necessary when calling
           subroutines compiled by IBM XL compilers without optimization.

       --mmppee
           Support _I_B_M _R_S_/_6_0_0_0 _S_P _P_a_r_a_l_l_e_l _E_n_v_i_r_o_n_m_e_n_t (PE).  Link an
           application written to use message passing with special startup
           code to enable the application to run.  The system must have PE
           installed in the standard location (_/_u_s_r_/_l_p_p_/_p_p_e_._p_o_e_/), or the
           _s_p_e_c_s file must be overridden with the --ssppeeccss== option to specify
           the appropriate directory location.  The Parallel Environment does
           not support threads, so the --mmppee option and the --pptthhrreeaadd option are
           incompatible.

       --mmaalliiggnn--nnaattuurraall
       --mmaalliiggnn--ppoowweerr
           On AIX, 32-bit Darwin, and 64-bit PowerPC GNU/Linux, the option
           --mmaalliiggnn--nnaattuurraall overrides the ABI-defined alignment of larger
           types, such as floating-point doubles, on their natural size-based
           boundary.  The option --mmaalliiggnn--ppoowweerr instructs GCC to follow the
           ABI-specified alignment rules.  GCC defaults to the standard
           alignment defined in the ABI.

           On 64-bit Darwin, natural alignment is the default, and
           --mmaalliiggnn--ppoowweerr is not supported.

       --mmssoofftt--ffllooaatt
       --mmhhaarrdd--ffllooaatt
           Generate code that does not use (uses) the floating-point register
           set.  Software floating-point emulation is provided if you use the
           --mmssoofftt--ffllooaatt option, and pass the option to GCC when linking.

       --mmssiinnggllee--ffllooaatt
       --mmddoouubbllee--ffllooaatt
           Generate code for single- or double-precision floating-point
           operations.  --mmddoouubbllee--ffllooaatt implies --mmssiinnggllee--ffllooaatt.

       --mmssiimmppllee--ffppuu
           Do not generate "sqrt" and "div" instructions for hardware
           floating-point unit.

       --mmffppuu==_n_a_m_e
           Specify type of floating-point unit.  Valid values for _n_a_m_e are
           sspp__lliittee (equivalent to --mmssiinnggllee--ffllooaatt --mmssiimmppllee--ffppuu), ddpp__lliittee
           (equivalent to --mmddoouubbllee--ffllooaatt --mmssiimmppllee--ffppuu), sspp__ffuullll (equivalent to
           --mmssiinnggllee--ffllooaatt), and ddpp__ffuullll (equivalent to --mmddoouubbllee--ffllooaatt).

       --mmxxiilliinnxx--ffppuu
           Perform optimizations for the floating-point unit on Xilinx PPC
           405/440.

       --mmmmuullttiippllee
       --mmnnoo--mmuullttiippllee
           Generate code that uses (does not use) the load multiple word
           instructions and the store multiple word instructions.  These
           instructions are generated by default on POWER systems, and not
           generated on PowerPC systems.  Do not use --mmmmuullttiippllee on little-
           endian PowerPC systems, since those instructions do not work when
           the processor is in little-endian mode.  The exceptions are PPC740
           and PPC750 which permit these instructions in little-endian mode.

       --mmuuppddaattee
       --mmnnoo--uuppddaattee
           Generate code that uses (does not use) the load or store
           instructions that update the base register to the address of the
           calculated memory location.  These instructions are generated by
           default.  If you use --mmnnoo--uuppddaattee, there is a small window between
           the time that the stack pointer is updated and the address of the
           previous frame is stored, which means code that walks the stack
           frame across interrupts or signals may get corrupted data.

       --mmaavvooiidd--iinnddeexxeedd--aaddddrreesssseess
       --mmnnoo--aavvooiidd--iinnddeexxeedd--aaddddrreesssseess
           Generate code that tries to avoid (not avoid) the use of indexed
           load or store instructions. These instructions can incur a
           performance penalty on Power6 processors in certain situations,
           such as when stepping through large arrays that cross a 16M
           boundary.  This option is enabled by default when targeting Power6
           and disabled otherwise.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Generate code that uses (does not use) the floating-point multiply
           and accumulate instructions.  These instructions are generated by
           default if hardware floating point is used.  The machine-dependent
           --mmffuusseedd--mmaadddd option is now mapped to the machine-independent
           --ffffpp--ccoonnttrraacctt==ffaasstt option, and --mmnnoo--ffuusseedd--mmaadddd is mapped to
           --ffffpp--ccoonnttrraacctt==ooffff.

       --mmmmuullhhww
       --mmnnoo--mmuullhhww
           Generate code that uses (does not use) the half-word multiply and
           multiply-accumulate instructions on the IBM 405, 440, 464 and 476
           processors.  These instructions are generated by default when
           targeting those processors.

       --mmddllmmzzbb
       --mmnnoo--ddllmmzzbb
           Generate code that uses (does not use) the string-search ddllmmzzbb
           instruction on the IBM 405, 440, 464 and 476 processors.  This
           instruction is generated by default when targeting those
           processors.

       --mmnnoo--bbiitt--aalliiggnn
       --mmbbiitt--aalliiggnn
           On System V.4 and embedded PowerPC systems do not (do) force
           structures and unions that contain bit-fields to be aligned to the
           base type of the bit-field.

           For example, by default a structure containing nothing but 8
           "unsigned" bit-fields of length 1 is aligned to a 4-byte boundary
           and has a size of 4 bytes.  By using --mmnnoo--bbiitt--aalliiggnn, the structure
           is aligned to a 1-byte boundary and is 1 byte in size.

       --mmnnoo--ssttrriicctt--aalliiggnn
       --mmssttrriicctt--aalliiggnn
           On System V.4 and embedded PowerPC systems do not (do) assume that
           unaligned memory references are handled by the system.

       --mmrreellooccaattaabbllee
       --mmnnoo--rreellooccaattaabbllee
           Generate code that allows (does not allow) a static executable to
           be relocated to a different address at run time.  A simple embedded
           PowerPC system loader should relocate the entire contents of
           ".got2" and 4-byte locations listed in the ".fixup" section, a
           table of 32-bit addresses generated by this option.  For this to
           work, all objects linked together must be compiled with
           --mmrreellooccaattaabbllee or --mmrreellooccaattaabbllee--lliibb.  --mmrreellooccaattaabbllee code aligns the
           stack to an 8-byte boundary.

       --mmrreellooccaattaabbllee--lliibb
       --mmnnoo--rreellooccaattaabbllee--lliibb
           Like --mmrreellooccaattaabbllee, --mmrreellooccaattaabbllee--lliibb generates a ".fixup" section
           to allow static executables to be relocated at run time, but
           --mmrreellooccaattaabbllee--lliibb does not use the smaller stack alignment of
           --mmrreellooccaattaabbllee.  Objects compiled with --mmrreellooccaattaabbllee--lliibb may be
           linked with objects compiled with any combination of the
           --mmrreellooccaattaabbllee options.

       --mmnnoo--ttoocc
       --mmttoocc
           On System V.4 and embedded PowerPC systems do not (do) assume that
           register 2 contains a pointer to a global area pointing to the
           addresses used in the program.

       --mmlliittttllee
       --mmlliittttllee--eennddiiaann
           On System V.4 and embedded PowerPC systems compile code for the
           processor in little-endian mode.  The --mmlliittttllee--eennddiiaann option is the
           same as --mmlliittttllee.

       --mmbbiigg
       --mmbbiigg--eennddiiaann
           On System V.4 and embedded PowerPC systems compile code for the
           processor in big-endian mode.  The --mmbbiigg--eennddiiaann option is the same
           as --mmbbiigg.

       --mmddyynnaammiicc--nnoo--ppiicc
           On Darwin and Mac OS X systems, compile code so that it is not
           relocatable, but that its external references are relocatable.  The
           resulting code is suitable for applications, but not shared
           libraries.

       --mmssiinnggllee--ppiicc--bbaassee
           Treat the register used for PIC addressing as read-only, rather
           than loading it in the prologue for each function.  The runtime
           system is responsible for initializing this register with an
           appropriate value before execution begins.

       --mmpprriioorriittiizzee--rreessttrriicctteedd--iinnssnnss==_p_r_i_o_r_i_t_y
           This option controls the priority that is assigned to dispatch-slot
           restricted instructions during the second scheduling pass.  The
           argument _p_r_i_o_r_i_t_y takes the value 00, 11, or 22 to assign no, highest,
           or second-highest (respectively) priority to dispatch-slot
           restricted instructions.

       --mmsscchheedd--ccoossttllyy--ddeepp==_d_e_p_e_n_d_e_n_c_e___t_y_p_e
           This option controls which dependences are considered costly by the
           target during instruction scheduling.  The argument _d_e_p_e_n_d_e_n_c_e___t_y_p_e
           takes one of the following values:

           nnoo  No dependence is costly.

           aallll All dependences are costly.

           ttrruuee__ssttoorree__ttoo__llooaadd
               A true dependence from store to load is costly.

           ssttoorree__ttoo__llooaadd
               Any dependence from store to load is costly.

           _n_u_m_b_e_r
               Any dependence for which the latency is greater than or equal
               to _n_u_m_b_e_r is costly.

       --mmiinnsseerrtt--sscchheedd--nnooppss==_s_c_h_e_m_e
           This option controls which NOP insertion scheme is used during the
           second scheduling pass.  The argument _s_c_h_e_m_e takes one of the
           following values:

           nnoo  Don't insert NOPs.

           ppaadd Pad with NOPs any dispatch group that has vacant issue slots,
               according to the scheduler's grouping.

           rreeggrroouupp__eexxaacctt
               Insert NOPs to force costly dependent insns into separate
               groups.  Insert exactly as many NOPs as needed to force an insn
               to a new group, according to the estimated processor grouping.

           _n_u_m_b_e_r
               Insert NOPs to force costly dependent insns into separate
               groups.  Insert _n_u_m_b_e_r NOPs to force an insn to a new group.

       --mmccaallll--ssyyssvv
           On System V.4 and embedded PowerPC systems compile code using
           calling conventions that adhere to the March 1995 draft of the
           System V Application Binary Interface, PowerPC processor
           supplement.  This is the default unless you configured GCC using
           ppoowweerrppcc--**--eeaabbiiaaiixx.

       --mmccaallll--ssyyssvv--eeaabbii
       --mmccaallll--eeaabbii
           Specify both --mmccaallll--ssyyssvv and --mmeeaabbii options.

       --mmccaallll--ssyyssvv--nnooeeaabbii
           Specify both --mmccaallll--ssyyssvv and --mmnnoo--eeaabbii options.

       --mmccaallll--aaiixxddeesscc
           On System V.4 and embedded PowerPC systems compile code for the AIX
           operating system.

       --mmccaallll--lliinnuuxx
           On System V.4 and embedded PowerPC systems compile code for the
           Linux-based GNU system.

       --mmccaallll--ffrreeeebbssdd
           On System V.4 and embedded PowerPC systems compile code for the
           FreeBSD operating system.

       --mmccaallll--nneettbbssdd
           On System V.4 and embedded PowerPC systems compile code for the
           NetBSD operating system.

       --mmccaallll--ooppeennbbssdd
           On System V.4 and embedded PowerPC systems compile code for the
           OpenBSD operating system.

       --mmttrraacceebbaacckk==_t_r_a_c_e_b_a_c_k___t_y_p_e
           Select the type of traceback table. Valid values for _t_r_a_c_e_b_a_c_k___t_y_p_e
           are ffuullll, ppaarrtt, and nnoo.

       --mmaaiixx--ssttrruucctt--rreettuurrnn
           Return all structures in memory (as specified by the AIX ABI).

       --mmssvvrr44--ssttrruucctt--rreettuurrnn
           Return structures smaller than 8 bytes in registers (as specified
           by the SVR4 ABI).

       --mmaabbii==_a_b_i_-_t_y_p_e
           Extend the current ABI with a particular extension, or remove such
           extension.  Valid values are aallttiivveecc, nnoo--aallttiivveecc, ssppee, nnoo--ssppee,
           iibbmmlloonnggddoouubbllee, iieeeeeelloonnggddoouubbllee, eellffvv11, eellffvv22.

       --mmaabbii==iibbmmlloonnggddoouubbllee
           Change the current ABI to use IBM extended-precision long double.
           This is not likely to work if your system defaults to using IEEE
           extended-precision long double.  If you change the long double type
           from IEEE extended-precision, the compiler will issue a warning
           unless you use the --WWnnoo--ppssaabbii option.  Requires --mmlloonngg--ddoouubbllee--112288
           to be enabled.

       --mmaabbii==iieeeeeelloonnggddoouubbllee
           Change the current ABI to use IEEE extended-precision long double.
           This is not likely to work if your system defaults to using IBM
           extended-precision long double.  If you change the long double type
           from IBM extended-precision, the compiler will issue a warning
           unless you use the --WWnnoo--ppssaabbii option.  Requires --mmlloonngg--ddoouubbllee--112288
           to be enabled.

       --mmaabbii==eellffvv11
           Change the current ABI to use the ELFv1 ABI.  This is the default
           ABI for big-endian PowerPC 64-bit Linux.  Overriding the default
           ABI requires special system support and is likely to fail in
           spectacular ways.

       --mmaabbii==eellffvv22
           Change the current ABI to use the ELFv2 ABI.  This is the default
           ABI for little-endian PowerPC 64-bit Linux.  Overriding the default
           ABI requires special system support and is likely to fail in
           spectacular ways.

       --mmggnnuu--aattttrriibbuuttee
       --mmnnoo--ggnnuu--aattttrriibbuuttee
           Emit .gnu_attribute assembly directives to set tag/value pairs in a
           .gnu.attributes section that specify ABI variations in function
           parameters or return values.

       --mmpprroottoottyyppee
       --mmnnoo--pprroottoottyyppee
           On System V.4 and embedded PowerPC systems assume that all calls to
           variable argument functions are properly prototyped.  Otherwise,
           the compiler must insert an instruction before every non-prototyped
           call to set or clear bit 6 of the condition code register ("CR") to
           indicate whether floating-point values are passed in the floating-
           point registers in case the function takes variable arguments.
           With --mmpprroottoottyyppee, only calls to prototyped variable argument
           functions set or clear the bit.

       --mmssiimm
           On embedded PowerPC systems, assume that the startup module is
           called _s_i_m_-_c_r_t_0_._o and that the standard C libraries are _l_i_b_s_i_m_._a
           and _l_i_b_c_._a.  This is the default for ppoowweerrppcc--**--eeaabbiissiimm
           configurations.

       --mmmmvvmmee
           On embedded PowerPC systems, assume that the startup module is
           called _c_r_t_0_._o and the standard C libraries are _l_i_b_m_v_m_e_._a and
           _l_i_b_c_._a.

       --mmaaddss
           On embedded PowerPC systems, assume that the startup module is
           called _c_r_t_0_._o and the standard C libraries are _l_i_b_a_d_s_._a and _l_i_b_c_._a.

       --mmyyeelllloowwkknniiffee
           On embedded PowerPC systems, assume that the startup module is
           called _c_r_t_0_._o and the standard C libraries are _l_i_b_y_k_._a and _l_i_b_c_._a.

       --mmvvxxwwoorrkkss
           On System V.4 and embedded PowerPC systems, specify that you are
           compiling for a VxWorks system.

       --mmeemmbb
           On embedded PowerPC systems, set the "PPC_EMB" bit in the ELF flags
           header to indicate that eeaabbii extended relocations are used.

       --mmeeaabbii
       --mmnnoo--eeaabbii
           On System V.4 and embedded PowerPC systems do (do not) adhere to
           the Embedded Applications Binary Interface (EABI), which is a set
           of modifications to the System V.4 specifications.  Selecting
           --mmeeaabbii means that the stack is aligned to an 8-byte boundary, a
           function "__eabi" is called from "main" to set up the EABI
           environment, and the --mmssddaattaa option can use both "r2" and "r13" to
           point to two separate small data areas.  Selecting --mmnnoo--eeaabbii means
           that the stack is aligned to a 16-byte boundary, no EABI
           initialization function is called from "main", and the --mmssddaattaa
           option only uses "r13" to point to a single small data area.  The
           --mmeeaabbii option is on by default if you configured GCC using one of
           the ppoowweerrppcc**--**--eeaabbii** options.

       --mmssddaattaa==eeaabbii
           On System V.4 and embedded PowerPC systems, put small initialized
           "const" global and static data in the ".sdata2" section, which is
           pointed to by register "r2".  Put small initialized non-"const"
           global and static data in the ".sdata" section, which is pointed to
           by register "r13".  Put small uninitialized global and static data
           in the ".sbss" section, which is adjacent to the ".sdata" section.
           The --mmssddaattaa==eeaabbii option is incompatible with the --mmrreellooccaattaabbllee
           option.  The --mmssddaattaa==eeaabbii option also sets the --mmeemmbb option.

       --mmssddaattaa==ssyyssvv
           On System V.4 and embedded PowerPC systems, put small global and
           static data in the ".sdata" section, which is pointed to by
           register "r13".  Put small uninitialized global and static data in
           the ".sbss" section, which is adjacent to the ".sdata" section.
           The --mmssddaattaa==ssyyssvv option is incompatible with the --mmrreellooccaattaabbllee
           option.

       --mmssddaattaa==ddeeffaauulltt
       --mmssddaattaa
           On System V.4 and embedded PowerPC systems, if --mmeeaabbii is used,
           compile code the same as --mmssddaattaa==eeaabbii, otherwise compile code the
           same as --mmssddaattaa==ssyyssvv.

       --mmssddaattaa==ddaattaa
           On System V.4 and embedded PowerPC systems, put small global data
           in the ".sdata" section.  Put small uninitialized global data in
           the ".sbss" section.  Do not use register "r13" to address small
           data however.  This is the default behavior unless other --mmssddaattaa
           options are used.

       --mmssddaattaa==nnoonnee
       --mmnnoo--ssddaattaa
           On embedded PowerPC systems, put all initialized global and static
           data in the ".data" section, and all uninitialized data in the
           ".bss" section.

       --mmrreeaaddoonnllyy--iinn--ssddaattaa
       --mmrreeaaddoonnllyy--iinn--ssddaattaa
           Put read-only objects in the ".sdata" section as well.  This is the
           default.

       --mmbblloocckk--mmoovvee--iinnlliinnee--lliimmiitt==_n_u_m
           Inline all block moves (such as calls to "memcpy" or structure
           copies) less than or equal to _n_u_m bytes.  The minimum value for _n_u_m
           is 32 bytes on 32-bit targets and 64 bytes on 64-bit targets.  The
           default value is target-specific.

       --mmbblloocckk--ccoommppaarree--iinnlliinnee--lliimmiitt==_n_u_m
           Generate non-looping inline code for all block compares (such as
           calls to "memcmp" or structure compares) less than or equal to _n_u_m
           bytes. If _n_u_m is 0, all inline expansion (non-loop and loop) of
           block compare is disabled. The default value is target-specific.

       --mmbblloocckk--ccoommppaarree--iinnlliinnee--lloooopp--lliimmiitt==_n_u_m
           Generate an inline expansion using loop code for all block compares
           that are less than or equal to _n_u_m bytes, but greater than the
           limit for non-loop inline block compare expansion. If the block
           length is not constant, at most _n_u_m bytes will be compared before
           "memcmp" is called to compare the remainder of the block. The
           default value is target-specific.

       --mmssttrriinngg--ccoommppaarree--iinnlliinnee--lliimmiitt==_n_u_m
           Generate at most _n_u_m pairs of load instructions to compare the
           string inline. If the difference or end of string is not found at
           the end of the inline compare a call to "strcmp" or "strncmp" will
           take care of the rest of the comparison. The default is 8 pairs of
           loads, which will compare 64 bytes on a 64-bit target and 32 bytes
           on a 32-bit target.

       --GG _n_u_m
           On embedded PowerPC systems, put global and static items less than
           or equal to _n_u_m bytes into the small data or BSS sections instead
           of the normal data or BSS section.  By default, _n_u_m is 8.  The --GG
           _n_u_m switch is also passed to the linker.  All modules should be
           compiled with the same --GG _n_u_m value.

       --mmrreeggnnaammeess
       --mmnnoo--rreeggnnaammeess
           On System V.4 and embedded PowerPC systems do (do not) emit
           register names in the assembly language output using symbolic
           forms.

       --mmlloonnggccaallll
       --mmnnoo--lloonnggccaallll
           By default assume that all calls are far away so that a longer and
           more expensive calling sequence is required.  This is required for
           calls farther than 32 megabytes (33,554,432 bytes) from the current
           location.  A short call is generated if the compiler knows the call
           cannot be that far away.  This setting can be overridden by the
           "shortcall" function attribute, or by "#pragma longcall(0)".

           Some linkers are capable of detecting out-of-range calls and
           generating glue code on the fly.  On these systems, long calls are
           unnecessary and generate slower code.  As of this writing, the AIX
           linker can do this, as can the GNU linker for PowerPC/64.  It is
           planned to add this feature to the GNU linker for 32-bit PowerPC
           systems as well.

           On Darwin/PPC systems, "#pragma longcall" generates "jbsr callee,
           L42", plus a _b_r_a_n_c_h _i_s_l_a_n_d (glue code).  The two target addresses
           represent the callee and the branch island.  The Darwin/PPC linker
           prefers the first address and generates a "bl callee" if the PPC
           "bl" instruction reaches the callee directly; otherwise, the linker
           generates "bl L42" to call the branch island.  The branch island is
           appended to the body of the calling function; it computes the full
           32-bit address of the callee and jumps to it.

           On Mach-O (Darwin) systems, this option directs the compiler emit
           to the glue for every direct call, and the Darwin linker decides
           whether to use or discard it.

           In the future, GCC may ignore all longcall specifications when the
           linker is known to generate glue.

       --mmttllss--mmaarrkkeerrss
       --mmnnoo--ttllss--mmaarrkkeerrss
           Mark (do not mark) calls to "__tls_get_addr" with a relocation
           specifying the function argument.  The relocation allows the linker
           to reliably associate function call with argument setup
           instructions for TLS optimization, which in turn allows GCC to
           better schedule the sequence.

       --mmrreecciipp
       --mmnnoo--rreecciipp
           This option enables use of the reciprocal estimate and reciprocal
           square root estimate instructions with additional Newton-Raphson
           steps to increase precision instead of doing a divide or square
           root and divide for floating-point arguments.  You should use the
           --ffffaasstt--mmaatthh option when using --mmrreecciipp (or at least
           --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss, --ffffiinniittee--mmaatthh--oonnllyy, --ffrreecciipprrooccaall--mmaatthh
           and --ffnnoo--ttrraappppiinngg--mmaatthh).  Note that while the throughput of the
           sequence is generally higher than the throughput of the non-
           reciprocal instruction, the precision of the sequence can be
           decreased by up to 2 ulp (i.e. the inverse of 1.0 equals
           0.99999994) for reciprocal square roots.

       --mmrreecciipp==_o_p_t
           This option controls which reciprocal estimate instructions may be
           used.  _o_p_t is a comma-separated list of options, which may be
           preceded by a "!" to invert the option:

           aallll Enable all estimate instructions.

           ddeeffaauulltt
               Enable the default instructions, equivalent to --mmrreecciipp.

           nnoonnee
               Disable all estimate instructions, equivalent to --mmnnoo--rreecciipp.

           ddiivv Enable the reciprocal approximation instructions for both
               single and double precision.

           ddiivvff
               Enable the single-precision reciprocal approximation
               instructions.

           ddiivvdd
               Enable the double-precision reciprocal approximation
               instructions.

           rrssqqrrtt
               Enable the reciprocal square root approximation instructions
               for both single and double precision.

           rrssqqrrttff
               Enable the single-precision reciprocal square root
               approximation instructions.

           rrssqqrrttdd
               Enable the double-precision reciprocal square root
               approximation instructions.

           So, for example, --mmrreecciipp==aallll,,!!rrssqqrrttdd enables all of the reciprocal
           estimate instructions, except for the "FRSQRTE", "XSRSQRTEDP", and
           "XVRSQRTEDP" instructions which handle the double-precision
           reciprocal square root calculations.

       --mmrreecciipp--pprreecciissiioonn
       --mmnnoo--rreecciipp--pprreecciissiioonn
           Assume (do not assume) that the reciprocal estimate instructions
           provide higher-precision estimates than is mandated by the PowerPC
           ABI.  Selecting --mmccppuu==ppoowweerr66, --mmccppuu==ppoowweerr77 or --mmccppuu==ppoowweerr88
           automatically selects --mmrreecciipp--pprreecciissiioonn.  The double-precision
           square root estimate instructions are not generated by default on
           low-precision machines, since they do not provide an estimate that
           converges after three steps.

       --mmvveecclliibbaabbii==_t_y_p_e
           Specifies the ABI type to use for vectorizing intrinsics using an
           external library.  The only type supported at present is mmaassss,
           which specifies to use IBM's Mathematical Acceleration Subsystem
           (MASS) libraries for vectorizing intrinsics using external
           libraries.  GCC currently emits calls to "acosd2", "acosf4",
           "acoshd2", "acoshf4", "asind2", "asinf4", "asinhd2", "asinhf4",
           "atan2d2", "atan2f4", "atand2", "atanf4", "atanhd2", "atanhf4",
           "cbrtd2", "cbrtf4", "cosd2", "cosf4", "coshd2", "coshf4", "erfcd2",
           "erfcf4", "erfd2", "erff4", "exp2d2", "exp2f4", "expd2", "expf4",
           "expm1d2", "expm1f4", "hypotd2", "hypotf4", "lgammad2", "lgammaf4",
           "log10d2", "log10f4", "log1pd2", "log1pf4", "log2d2", "log2f4",
           "logd2", "logf4", "powd2", "powf4", "sind2", "sinf4", "sinhd2",
           "sinhf4", "sqrtd2", "sqrtf4", "tand2", "tanf4", "tanhd2", and
           "tanhf4" when generating code for power7.  Both --ffttrreeee--vveeccttoorriizzee
           and --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss must also be enabled.  The MASS
           libraries must be specified at link time.

       --mmffrriizz
       --mmnnoo--ffrriizz
           Generate (do not generate) the "friz" instruction when the
           --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss option is used to optimize rounding of
           floating-point values to 64-bit integer and back to floating point.
           The "friz" instruction does not return the same value if the
           floating-point number is too large to fit in an integer.

       --mmppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss
       --mmnnoo--ppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss
           Generate (do not generate) code to load up the static chain
           register ("r11") when calling through a pointer on AIX and 64-bit
           Linux systems where a function pointer points to a 3-word
           descriptor giving the function address, TOC value to be loaded in
           register "r2", and static chain value to be loaded in register
           "r11".  The --mmppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss is on by default.  You
           cannot call through pointers to nested functions or pointers to
           functions compiled in other languages that use the static chain if
           you use --mmnnoo--ppooiinntteerrss--ttoo--nneesstteedd--ffuunnccttiioonnss.

       --mmssaavvee--ttoocc--iinnddiirreecctt
       --mmnnoo--ssaavvee--ttoocc--iinnddiirreecctt
           Generate (do not generate) code to save the TOC value in the
           reserved stack location in the function prologue if the function
           calls through a pointer on AIX and 64-bit Linux systems.  If the
           TOC value is not saved in the prologue, it is saved just before the
           call through the pointer.  The --mmnnoo--ssaavvee--ttoocc--iinnddiirreecctt option is the
           default.

       --mmccoommppaatt--aalliiggnn--ppaarrmm
       --mmnnoo--ccoommppaatt--aalliiggnn--ppaarrmm
           Generate (do not generate) code to pass structure parameters with a
           maximum alignment of 64 bits, for compatibility with older versions
           of GCC.

           Older versions of GCC (prior to 4.9.0) incorrectly did not align a
           structure parameter on a 128-bit boundary when that structure
           contained a member requiring 128-bit alignment.  This is corrected
           in more recent versions of GCC.  This option may be used to
           generate code that is compatible with functions compiled with older
           versions of GCC.

           The --mmnnoo--ccoommppaatt--aalliiggnn--ppaarrmm option is the default.

       --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd==_g_u_a_r_d
       --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--rreegg==_r_e_g
       --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--ooffffsseett==_o_f_f_s_e_t
       --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--ssyymmbbooll==_s_y_m_b_o_l
           Generate stack protection code using canary at _g_u_a_r_d.  Supported
           locations are gglloobbaall for global canary or ttllss for per-thread canary
           in the TLS block (the default with GNU libc version 2.4 or later).

           With the latter choice the options --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--rreegg==_r_e_g
           and --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--ooffffsseett==_o_f_f_s_e_t furthermore specify which
           register to use as base register for reading the canary, and from
           what offset from that base register. The default for those is as
           specified in the relevant ABI.
           --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--ssyymmbbooll==_s_y_m_b_o_l overrides the offset with a
           symbol reference to a canary in the TLS block.

       _R_X _O_p_t_i_o_n_s

       These command-line options are defined for RX targets:

       --mm6644bbiitt--ddoouubblleess
       --mm3322bbiitt--ddoouubblleess
           Make the "double" data type be 64 bits (--mm6644bbiitt--ddoouubblleess) or 32 bits
           (--mm3322bbiitt--ddoouubblleess) in size.  The default is --mm3322bbiitt--ddoouubblleess.  _N_o_t_e
           RX floating-point hardware only works on 32-bit values, which is
           why the default is --mm3322bbiitt--ddoouubblleess.

       --ffppuu
       --nnooffppuu
           Enables (--ffppuu) or disables (--nnooffppuu) the use of RX floating-point
           hardware.  The default is enabled for the RX600 series and disabled
           for the RX200 series.

           Floating-point instructions are only generated for 32-bit floating-
           point values, however, so the FPU hardware is not used for doubles
           if the --mm6644bbiitt--ddoouubblleess option is used.

           _N_o_t_e If the --ffppuu option is enabled then --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss
           is also enabled automatically.  This is because the RX FPU
           instructions are themselves unsafe.

       --mmccppuu==_n_a_m_e
           Selects the type of RX CPU to be targeted.  Currently three types
           are supported, the generic RRXX660000 and RRXX220000 series hardware and the
           specific RRXX661100 CPU.  The default is RRXX660000.

           The only difference between RRXX660000 and RRXX661100 is that the RRXX661100 does
           not support the "MVTIPL" instruction.

           The RRXX220000 series does not have a hardware floating-point unit and
           so --nnooffppuu is enabled by default when this type is selected.

       --mmbbiigg--eennddiiaann--ddaattaa
       --mmlliittttllee--eennddiiaann--ddaattaa
           Store data (but not code) in the big-endian format.  The default is
           --mmlliittttllee--eennddiiaann--ddaattaa, i.e. to store data in the little-endian
           format.

       --mmssmmaallll--ddaattaa--lliimmiitt==_N
           Specifies the maximum size in bytes of global and static variables
           which can be placed into the small data area.  Using the small data
           area can lead to smaller and faster code, but the size of area is
           limited and it is up to the programmer to ensure that the area does
           not overflow.  Also when the small data area is used one of the
           RX's registers (usually "r13") is reserved for use pointing to this
           area, so it is no longer available for use by the compiler.  This
           could result in slower and/or larger code if variables are pushed
           onto the stack instead of being held in this register.

           Note, common variables (variables that have not been initialized)
           and constants are not placed into the small data area as they are
           assigned to other sections in the output executable.

           The default value is zero, which disables this feature.  Note, this
           feature is not enabled by default with higher optimization levels
           (--OO22 etc) because of the potentially detrimental effects of
           reserving a register.  It is up to the programmer to experiment and
           discover whether this feature is of benefit to their program.  See
           the description of the --mmppiidd option for a description of how the
           actual register to hold the small data area pointer is chosen.

       --mmssiimm
       --mmnnoo--ssiimm
           Use the simulator runtime.  The default is to use the libgloss
           board-specific runtime.

       --mmaass110000--ssyynnttaaxx
       --mmnnoo--aass110000--ssyynnttaaxx
           When generating assembler output use a syntax that is compatible
           with Renesas's AS100 assembler.  This syntax can also be handled by
           the GAS assembler, but it has some restrictions so it is not
           generated by default.

       --mmmmaaxx--ccoonnssttaanntt--ssiizzee==_N
           Specifies the maximum size, in bytes, of a constant that can be
           used as an operand in a RX instruction.  Although the RX
           instruction set does allow constants of up to 4 bytes in length to
           be used in instructions, a longer value equates to a longer
           instruction.  Thus in some circumstances it can be beneficial to
           restrict the size of constants that are used in instructions.
           Constants that are too big are instead placed into a constant pool
           and referenced via register indirection.

           The value _N can be between 0 and 4.  A value of 0 (the default) or
           4 means that constants of any size are allowed.

       --mmrreellaaxx
           Enable linker relaxation.  Linker relaxation is a process whereby
           the linker attempts to reduce the size of a program by finding
           shorter versions of various instructions.  Disabled by default.

       --mmiinntt--rreeggiisstteerr==_N
           Specify the number of registers to reserve for fast interrupt
           handler functions.  The value _N can be between 0 and 4.  A value of
           1 means that register "r13" is reserved for the exclusive use of
           fast interrupt handlers.  A value of 2 reserves "r13" and "r12".  A
           value of 3 reserves "r13", "r12" and "r11", and a value of 4
           reserves "r13" through "r10".  A value of 0, the default, does not
           reserve any registers.

       --mmssaavvee--aacccc--iinn--iinntteerrrruuppttss
           Specifies that interrupt handler functions should preserve the
           accumulator register.  This is only necessary if normal code might
           use the accumulator register, for example because it performs
           64-bit multiplications.  The default is to ignore the accumulator
           as this makes the interrupt handlers faster.

       --mmppiidd
       --mmnnoo--ppiidd
           Enables the generation of position independent data.  When enabled
           any access to constant data is done via an offset from a base
           address held in a register.  This allows the location of constant
           data to be determined at run time without requiring the executable
           to be relocated, which is a benefit to embedded applications with
           tight memory constraints.  Data that can be modified is not
           affected by this option.

           Note, using this feature reserves a register, usually "r13", for
           the constant data base address.  This can result in slower and/or
           larger code, especially in complicated functions.

           The actual register chosen to hold the constant data base address
           depends upon whether the --mmssmmaallll--ddaattaa--lliimmiitt and/or the
           --mmiinntt--rreeggiisstteerr command-line options are enabled.  Starting with
           register "r13" and proceeding downwards, registers are allocated
           first to satisfy the requirements of --mmiinntt--rreeggiisstteerr, then --mmppiidd and
           finally --mmssmmaallll--ddaattaa--lliimmiitt.  Thus it is possible for the small data
           area register to be "r8" if both --mmiinntt--rreeggiisstteerr==44 and --mmppiidd are
           specified on the command line.

           By default this feature is not enabled.  The default can be
           restored via the --mmnnoo--ppiidd command-line option.

       --mmnnoo--wwaarrnn--mmuullttiippllee--ffaasstt--iinntteerrrruuppttss
       --mmwwaarrnn--mmuullttiippllee--ffaasstt--iinntteerrrruuppttss
           Prevents GCC from issuing a warning message if it finds more than
           one fast interrupt handler when it is compiling a file.  The
           default is to issue a warning for each extra fast interrupt handler
           found, as the RX only supports one such interrupt.

       --mmaallllooww--ssttrriinngg--iinnssnnss
       --mmnnoo--aallllooww--ssttrriinngg--iinnssnnss
           Enables or disables the use of the string manipulation instructions
           "SMOVF", "SCMPU", "SMOVB", "SMOVU", "SUNTIL" "SWHILE" and also the
           "RMPA" instruction.  These instructions may prefetch data, which is
           not safe to do if accessing an I/O register.  (See section 12.2.7
           of the RX62N Group User's Manual for more information).

           The default is to allow these instructions, but it is not possible
           for GCC to reliably detect all circumstances where a string
           instruction might be used to access an I/O register, so their use
           cannot be disabled automatically.  Instead it is reliant upon the
           programmer to use the --mmnnoo--aallllooww--ssttrriinngg--iinnssnnss option if their
           program accesses I/O space.

           When the instructions are enabled GCC defines the C preprocessor
           symbol "__RX_ALLOW_STRING_INSNS__", otherwise it defines the symbol
           "__RX_DISALLOW_STRING_INSNS__".

       --mmjjssrr
       --mmnnoo--jjssrr
           Use only (or not only) "JSR" instructions to access functions.
           This option can be used when code size exceeds the range of "BSR"
           instructions.  Note that --mmnnoo--jjssrr does not mean to not use "JSR"
           but instead means that any type of branch may be used.

       _N_o_t_e_: The generic GCC command-line option --ffffiixxeedd--_r_e_g has special
       significance to the RX port when used with the "interrupt" function
       attribute.  This attribute indicates a function intended to process
       fast interrupts.  GCC ensures that it only uses the registers "r10",
       "r11", "r12" and/or "r13" and only provided that the normal use of the
       corresponding registers have been restricted via the --ffffiixxeedd--_r_e_g or
       --mmiinntt--rreeggiisstteerr command-line options.

       _S_/_3_9_0 _a_n_d _z_S_e_r_i_e_s _O_p_t_i_o_n_s

       These are the --mm options defined for the S/390 and zSeries
       architecture.

       --mmhhaarrdd--ffllooaatt
       --mmssoofftt--ffllooaatt
           Use (do not use) the hardware floating-point instructions and
           registers for floating-point operations.  When --mmssoofftt--ffllooaatt is
           specified, functions in _l_i_b_g_c_c_._a are used to perform floating-point
           operations.  When --mmhhaarrdd--ffllooaatt is specified, the compiler generates
           IEEE floating-point instructions.  This is the default.

       --mmhhaarrdd--ddffpp
       --mmnnoo--hhaarrdd--ddffpp
           Use (do not use) the hardware decimal-floating-point instructions
           for decimal-floating-point operations.  When --mmnnoo--hhaarrdd--ddffpp is
           specified, functions in _l_i_b_g_c_c_._a are used to perform decimal-
           floating-point operations.  When --mmhhaarrdd--ddffpp is specified, the
           compiler generates decimal-floating-point hardware instructions.
           This is the default for --mmaarrcchh==zz99--eecc or higher.

       --mmlloonngg--ddoouubbllee--6644
       --mmlloonngg--ddoouubbllee--112288
           These switches control the size of "long double" type. A size of 64
           bits makes the "long double" type equivalent to the "double" type.
           This is the default.

       --mmbbaacckkcchhaaiinn
       --mmnnoo--bbaacckkcchhaaiinn
           Store (do not store) the address of the caller's frame as backchain
           pointer into the callee's stack frame.  A backchain may be needed
           to allow debugging using tools that do not understand DWARF call
           frame information.  When --mmnnoo--ppaacckkeedd--ssttaacckk is in effect, the
           backchain pointer is stored at the bottom of the stack frame; when
           --mmppaacckkeedd--ssttaacckk is in effect, the backchain is placed into the
           topmost word of the 96/160 byte register save area.

           In general, code compiled with --mmbbaacckkcchhaaiinn is call-compatible with
           code compiled with --mmmmoo--bbaacckkcchhaaiinn; however, use of the backchain
           for debugging purposes usually requires that the whole binary is
           built with --mmbbaacckkcchhaaiinn.  Note that the combination of --mmbbaacckkcchhaaiinn,
           --mmppaacckkeedd--ssttaacckk and --mmhhaarrdd--ffllooaatt is not supported.  In order to
           build a linux kernel use --mmssoofftt--ffllooaatt.

           The default is to not maintain the backchain.

       --mmppaacckkeedd--ssttaacckk
       --mmnnoo--ppaacckkeedd--ssttaacckk
           Use (do not use) the packed stack layout.  When --mmnnoo--ppaacckkeedd--ssttaacckk
           is specified, the compiler uses the all fields of the 96/160 byte
           register save area only for their default purpose; unused fields
           still take up stack space.  When --mmppaacckkeedd--ssttaacckk is specified,
           register save slots are densely packed at the top of the register
           save area; unused space is reused for other purposes, allowing for
           more efficient use of the available stack space.  However, when
           --mmbbaacckkcchhaaiinn is also in effect, the topmost word of the save area is
           always used to store the backchain, and the return address register
           is always saved two words below the backchain.

           As long as the stack frame backchain is not used, code generated
           with --mmppaacckkeedd--ssttaacckk is call-compatible with code generated with
           --mmnnoo--ppaacckkeedd--ssttaacckk.  Note that some non-FSF releases of GCC 2.95 for
           S/390 or zSeries generated code that uses the stack frame backchain
           at run time, not just for debugging purposes.  Such code is not
           call-compatible with code compiled with --mmppaacckkeedd--ssttaacckk.  Also, note
           that the combination of --mmbbaacckkcchhaaiinn, --mmppaacckkeedd--ssttaacckk and
           --mmhhaarrdd--ffllooaatt is not supported.  In order to build a linux kernel
           use --mmssoofftt--ffllooaatt.

           The default is to not use the packed stack layout.

       --mmssmmaallll--eexxeecc
       --mmnnoo--ssmmaallll--eexxeecc
           Generate (or do not generate) code using the "bras" instruction to
           do subroutine calls.  This only works reliably if the total
           executable size does not exceed 64k.  The default is to use the
           "basr" instruction instead, which does not have this limitation.

       --mm6644
       --mm3311
           When --mm3311 is specified, generate code compliant to the GNU/Linux
           for S/390 ABI.  When --mm6644 is specified, generate code compliant to
           the GNU/Linux for zSeries ABI.  This allows GCC in particular to
           generate 64-bit instructions.  For the ss339900 targets, the default is
           --mm3311, while the ss339900xx targets default to --mm6644.

       --mmzzaarrcchh
       --mmeessaa
           When --mmzzaarrcchh is specified, generate code using the instructions
           available on z/Architecture.  When --mmeessaa is specified, generate
           code using the instructions available on ESA/390.  Note that --mmeessaa
           is not possible with --mm6644.  When generating code compliant to the
           GNU/Linux for S/390 ABI, the default is --mmeessaa.  When generating
           code compliant to the GNU/Linux for zSeries ABI, the default is
           --mmzzaarrcchh.

       --mmhhttmm
       --mmnnoo--hhttmm
           The --mmhhttmm option enables a set of builtins making use of
           instructions available with the transactional execution facility
           introduced with the IBM zEnterprise EC12 machine generation SS//339900
           SSyysstteemm zz BBuuiilltt--iinn FFuunnccttiioonnss.  --mmhhttmm is enabled by default when
           using --mmaarrcchh==zzEECC1122.

       --mmvvxx
       --mmnnoo--vvxx
           When --mmvvxx is specified, generate code using the instructions
           available with the vector extension facility introduced with the
           IBM z13 machine generation.  This option changes the ABI for some
           vector type values with regard to alignment and calling
           conventions.  In case vector type values are being used in an ABI-
           relevant context a GAS ..ggnnuu__aattttrriibbuuttee command will be added to mark
           the resulting binary with the ABI used.  --mmvvxx is enabled by default
           when using --mmaarrcchh==zz1133.

       --mmzzvveeccttoorr
       --mmnnoo--zzvveeccttoorr
           The --mmzzvveeccttoorr option enables vector language extensions and
           builtins using instructions available with the vector extension
           facility introduced with the IBM z13 machine generation.  This
           option adds support for vveeccttoorr to be used as a keyword to define
           vector type variables and arguments.  vveeccttoorr is only available when
           GNU extensions are enabled.  It will not be expanded when
           requesting strict standard compliance e.g. with --ssttdd==cc9999.  In
           addition to the GCC low-level builtins --mmzzvveeccttoorr enables a set of
           builtins added for compatibility with AltiVec-style implementations
           like Power and Cell.  In order to make use of these builtins the
           header file _v_e_c_i_n_t_r_i_n_._h needs to be included.  --mmzzvveeccttoorr is
           disabled by default.

       --mmmmvvccllee
       --mmnnoo--mmvvccllee
           Generate (or do not generate) code using the "mvcle" instruction to
           perform block moves.  When --mmnnoo--mmvvccllee is specified, use a "mvc"
           loop instead.  This is the default unless optimizing for size.

       --mmddeebbuugg
       --mmnnoo--ddeebbuugg
           Print (or do not print) additional debug information when
           compiling.  The default is to not print debug information.

       --mmaarrcchh==_c_p_u_-_t_y_p_e
           Generate code that runs on _c_p_u_-_t_y_p_e, which is the name of a system
           representing a certain processor type.  Possible values for _c_p_u_-
           _t_y_p_e are zz990000/aarrcchh55, zz999900/aarrcchh66, zz99--110099, zz99--eecc/aarrcchh77, zz1100/aarrcchh88,
           zz119966/aarrcchh99, zzEECC1122, zz1133/aarrcchh1111, zz1144/aarrcchh1122, and nnaattiivvee.

           The default is --mmaarrcchh==zz990000.  gg55/aarrcchh33 and gg66 are deprecated and
           will be removed with future releases.

           Specifying nnaattiivvee as cpu type can be used to select the best
           architecture option for the host processor.  --mmaarrcchh==nnaattiivvee has no
           effect if GCC does not recognize the processor.

       --mmttuunnee==_c_p_u_-_t_y_p_e
           Tune to _c_p_u_-_t_y_p_e everything applicable about the generated code,
           except for the ABI and the set of available instructions.  The list
           of _c_p_u_-_t_y_p_e values is the same as for --mmaarrcchh.  The default is the
           value used for --mmaarrcchh.

       --mmttppff--ttrraaccee
       --mmnnoo--ttppff--ttrraaccee
           Generate code that adds (does not add) in TPF OS specific branches
           to trace routines in the operating system.  This option is off by
           default, even when compiling for the TPF OS.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Generate code that uses (does not use) the floating-point multiply
           and accumulate instructions.  These instructions are generated by
           default if hardware floating point is used.

       --mmwwaarrnn--ffrraammeessiizzee==_f_r_a_m_e_s_i_z_e
           Emit a warning if the current function exceeds the given frame
           size.  Because this is a compile-time check it doesn't need to be a
           real problem when the program runs.  It is intended to identify
           functions that most probably cause a stack overflow.  It is useful
           to be used in an environment with limited stack size e.g. the linux
           kernel.

       --mmwwaarrnn--ddyynnaammiiccssttaacckk
           Emit a warning if the function calls "alloca" or uses dynamically-
           sized arrays.  This is generally a bad idea with a limited stack
           size.

       --mmssttaacckk--gguuaarrdd==_s_t_a_c_k_-_g_u_a_r_d
       --mmssttaacckk--ssiizzee==_s_t_a_c_k_-_s_i_z_e
           If these options are provided the S/390 back end emits additional
           instructions in the function prologue that trigger a trap if the
           stack size is _s_t_a_c_k_-_g_u_a_r_d bytes above the _s_t_a_c_k_-_s_i_z_e (remember that
           the stack on S/390 grows downward).  If the _s_t_a_c_k_-_g_u_a_r_d option is
           omitted the smallest power of 2 larger than the frame size of the
           compiled function is chosen.  These options are intended to be used
           to help debugging stack overflow problems.  The additionally
           emitted code causes only little overhead and hence can also be used
           in production-like systems without greater performance degradation.
           The given values have to be exact powers of 2 and _s_t_a_c_k_-_s_i_z_e has to
           be greater than _s_t_a_c_k_-_g_u_a_r_d without exceeding 64k.  In order to be
           efficient the extra code makes the assumption that the stack starts
           at an address aligned to the value given by _s_t_a_c_k_-_s_i_z_e.  The _s_t_a_c_k_-
           _g_u_a_r_d option can only be used in conjunction with _s_t_a_c_k_-_s_i_z_e.

       --mmhhoottppaattcchh==_p_r_e_-_h_a_l_f_w_o_r_d_s,,_p_o_s_t_-_h_a_l_f_w_o_r_d_s
           If the hotpatch option is enabled, a "hot-patching" function
           prologue is generated for all functions in the compilation unit.
           The funtion label is prepended with the given number of two-byte
           NOP instructions (_p_r_e_-_h_a_l_f_w_o_r_d_s, maximum 1000000).  After the
           label, 2 * _p_o_s_t_-_h_a_l_f_w_o_r_d_s bytes are appended, using the largest NOP
           like instructions the architecture allows (maximum 1000000).

           If both arguments are zero, hotpatching is disabled.

           This option can be overridden for individual functions with the
           "hotpatch" attribute.

       _S_c_o_r_e _O_p_t_i_o_n_s

       These options are defined for Score implementations:

       --mmeebb
           Compile code for big-endian mode.  This is the default.

       --mmeell
           Compile code for little-endian mode.

       --mmnnhhwwlloooopp
           Disable generation of "bcnz" instructions.

       --mmuullss
           Enable generation of unaligned load and store instructions.

       --mmmmaacc
           Enable the use of multiply-accumulate instructions. Disabled by
           default.

       --mmssccoorree55
           Specify the SCORE5 as the target architecture.

       --mmssccoorree55uu
           Specify the SCORE5U of the target architecture.

       --mmssccoorree77
           Specify the SCORE7 as the target architecture. This is the default.

       --mmssccoorree77dd
           Specify the SCORE7D as the target architecture.

       _S_H _O_p_t_i_o_n_s

       These --mm options are defined for the SH implementations:

       --mm11 Generate code for the SH1.

       --mm22 Generate code for the SH2.

       --mm22ee
           Generate code for the SH2e.

       --mm22aa--nnooffppuu
           Generate code for the SH2a without FPU, or for a SH2a-FPU in such a
           way that the floating-point unit is not used.

       --mm22aa--ssiinnggllee--oonnllyy
           Generate code for the SH2a-FPU, in such a way that no double-
           precision floating-point operations are used.

       --mm22aa--ssiinnggllee
           Generate code for the SH2a-FPU assuming the floating-point unit is
           in single-precision mode by default.

       --mm22aa
           Generate code for the SH2a-FPU assuming the floating-point unit is
           in double-precision mode by default.

       --mm33 Generate code for the SH3.

       --mm33ee
           Generate code for the SH3e.

       --mm44--nnooffppuu
           Generate code for the SH4 without a floating-point unit.

       --mm44--ssiinnggllee--oonnllyy
           Generate code for the SH4 with a floating-point unit that only
           supports single-precision arithmetic.

       --mm44--ssiinnggllee
           Generate code for the SH4 assuming the floating-point unit is in
           single-precision mode by default.

       --mm44 Generate code for the SH4.

       --mm44--110000
           Generate code for SH4-100.

       --mm44--110000--nnooffppuu
           Generate code for SH4-100 in such a way that the floating-point
           unit is not used.

       --mm44--110000--ssiinnggllee
           Generate code for SH4-100 assuming the floating-point unit is in
           single-precision mode by default.

       --mm44--110000--ssiinnggllee--oonnllyy
           Generate code for SH4-100 in such a way that no double-precision
           floating-point operations are used.

       --mm44--220000
           Generate code for SH4-200.

       --mm44--220000--nnooffppuu
           Generate code for SH4-200 without in such a way that the floating-
           point unit is not used.

       --mm44--220000--ssiinnggllee
           Generate code for SH4-200 assuming the floating-point unit is in
           single-precision mode by default.

       --mm44--220000--ssiinnggllee--oonnllyy
           Generate code for SH4-200 in such a way that no double-precision
           floating-point operations are used.

       --mm44--330000
           Generate code for SH4-300.

       --mm44--330000--nnooffppuu
           Generate code for SH4-300 without in such a way that the floating-
           point unit is not used.

       --mm44--330000--ssiinnggllee
           Generate code for SH4-300 in such a way that no double-precision
           floating-point operations are used.

       --mm44--330000--ssiinnggllee--oonnllyy
           Generate code for SH4-300 in such a way that no double-precision
           floating-point operations are used.

       --mm44--334400
           Generate code for SH4-340 (no MMU, no FPU).

       --mm44--550000
           Generate code for SH4-500 (no FPU).  Passes --iissaa==sshh44--nnooffppuu to the
           assembler.

       --mm44aa--nnooffppuu
           Generate code for the SH4al-dsp, or for a SH4a in such a way that
           the floating-point unit is not used.

       --mm44aa--ssiinnggllee--oonnllyy
           Generate code for the SH4a, in such a way that no double-precision
           floating-point operations are used.

       --mm44aa--ssiinnggllee
           Generate code for the SH4a assuming the floating-point unit is in
           single-precision mode by default.

       --mm44aa
           Generate code for the SH4a.

       --mm44aall
           Same as --mm44aa--nnooffppuu, except that it implicitly passes --ddsspp to the
           assembler.  GCC doesn't generate any DSP instructions at the
           moment.

       --mmbb Compile code for the processor in big-endian mode.

       --mmll Compile code for the processor in little-endian mode.

       --mmddaalliiggnn
           Align doubles at 64-bit boundaries.  Note that this changes the
           calling conventions, and thus some functions from the standard C
           library do not work unless you recompile it first with --mmddaalliiggnn.

       --mmrreellaaxx
           Shorten some address references at link time, when possible; uses
           the linker option --rreellaaxx.

       --mmbbiiggttaabbllee
           Use 32-bit offsets in "switch" tables.  The default is to use
           16-bit offsets.

       --mmbbiittooppss
           Enable the use of bit manipulation instructions on SH2A.

       --mmffmmoovvdd
           Enable the use of the instruction "fmovd".  Check --mmddaalliiggnn for
           alignment constraints.

       --mmrreenneessaass
           Comply with the calling conventions defined by Renesas.

       --mmnnoo--rreenneessaass
           Comply with the calling conventions defined for GCC before the
           Renesas conventions were available.  This option is the default for
           all targets of the SH toolchain.

       --mmnnoommaaccssaavvee
           Mark the "MAC" register as call-clobbered, even if --mmrreenneessaass is
           given.

       --mmiieeeeee
       --mmnnoo--iieeeeee
           Control the IEEE compliance of floating-point comparisons, which
           affects the handling of cases where the result of a comparison is
           unordered.  By default --mmiieeeeee is implicitly enabled.  If
           --ffffiinniittee--mmaatthh--oonnllyy is enabled --mmnnoo--iieeeeee is implicitly set, which
           results in faster floating-point greater-equal and less-equal
           comparisons.  The implicit settings can be overridden by specifying
           either --mmiieeeeee or --mmnnoo--iieeeeee.

       --mmiinnlliinnee--iicc__iinnvvaalliiddaattee
           Inline code to invalidate instruction cache entries after setting
           up nested function trampolines.  This option has no effect if
           --mmuusseerrmmooddee is in effect and the selected code generation option
           (e.g. --mm44) does not allow the use of the "icbi" instruction.  If
           the selected code generation option does not allow the use of the
           "icbi" instruction, and --mmuusseerrmmooddee is not in effect, the inlined
           code manipulates the instruction cache address array directly with
           an associative write.  This not only requires privileged mode at
           run time, but it also fails if the cache line had been mapped via
           the TLB and has become unmapped.

       --mmiissiizzee
           Dump instruction size and location in the assembly code.

       --mmppaaddssttrruucctt
           This option is deprecated.  It pads structures to multiple of 4
           bytes, which is incompatible with the SH ABI.

       --mmaattoommiicc--mmooddeell==_m_o_d_e_l
           Sets the model of atomic operations and additional parameters as a
           comma separated list.  For details on the atomic built-in functions
           see ____aattoommiicc BBuuiillttiinnss.  The following models and parameters are
           supported:

           nnoonnee
               Disable compiler generated atomic sequences and emit library
               calls for atomic operations.  This is the default if the target
               is not "sh*-*-linux*".

           ssoofftt--gguussaa
               Generate GNU/Linux compatible gUSA software atomic sequences
               for the atomic built-in functions.  The generated atomic
               sequences require additional support from the
               interrupt/exception handling code of the system and are only
               suitable for SH3* and SH4* single-core systems.  This option is
               enabled by default when the target is "sh*-*-linux*" and SH3*
               or SH4*.  When the target is SH4A, this option also partially
               utilizes the hardware atomic instructions "movli.l" and
               "movco.l" to create more efficient code, unless ssttrriicctt is
               specified.

           ssoofftt--ttccbb
               Generate software atomic sequences that use a variable in the
               thread control block.  This is a variation of the gUSA
               sequences which can also be used on SH1* and SH2* targets.  The
               generated atomic sequences require additional support from the
               interrupt/exception handling code of the system and are only
               suitable for single-core systems.  When using this model, the
               ggbbrr--ooffffsseett== parameter has to be specified as well.

           ssoofftt--iimmaasskk
               Generate software atomic sequences that temporarily disable
               interrupts by setting "SR.IMASK = 1111".  This model works only
               when the program runs in privileged mode and is only suitable
               for single-core systems.  Additional support from the
               interrupt/exception handling code of the system is not
               required.  This model is enabled by default when the target is
               "sh*-*-linux*" and SH1* or SH2*.

           hhaarrdd--llllccss
               Generate hardware atomic sequences using the "movli.l" and
               "movco.l" instructions only.  This is only available on SH4A
               and is suitable for multi-core systems.  Since the hardware
               instructions support only 32 bit atomic variables access to 8
               or 16 bit variables is emulated with 32 bit accesses.  Code
               compiled with this option is also compatible with other
               software atomic model interrupt/exception handling systems if
               executed on an SH4A system.  Additional support from the
               interrupt/exception handling code of the system is not required
               for this model.

           ggbbrr--ooffffsseett==
               This parameter specifies the offset in bytes of the variable in
               the thread control block structure that should be used by the
               generated atomic sequences when the ssoofftt--ttccbb model has been
               selected.  For other models this parameter is ignored.  The
               specified value must be an integer multiple of four and in the
               range 0-1020.

           ssttrriicctt
               This parameter prevents mixed usage of multiple atomic models,
               even if they are compatible, and makes the compiler generate
               atomic sequences of the specified model only.

       --mmttaass
           Generate the "tas.b" opcode for "__atomic_test_and_set".  Notice
           that depending on the particular hardware and software
           configuration this can degrade overall performance due to the
           operand cache line flushes that are implied by the "tas.b"
           instruction.  On multi-core SH4A processors the "tas.b" instruction
           must be used with caution since it can result in data corruption
           for certain cache configurations.

       --mmpprreeffeerrggoott
           When generating position-independent code, emit function calls
           using the Global Offset Table instead of the Procedure Linkage
           Table.

       --mmuusseerrmmooddee
       --mmnnoo--uusseerrmmooddee
           Don't allow (allow) the compiler generating privileged mode code.
           Specifying --mmuusseerrmmooddee also implies --mmnnoo--iinnlliinnee--iicc__iinnvvaalliiddaattee if the
           inlined code would not work in user mode.  --mmuusseerrmmooddee is the
           default when the target is "sh*-*-linux*".  If the target is SH1*
           or SH2* --mmuusseerrmmooddee has no effect, since there is no user mode.

       --mmuullttccoosstt==_n_u_m_b_e_r
           Set the cost to assume for a multiply insn.

       --mmddiivv==_s_t_r_a_t_e_g_y
           Set the division strategy to be used for integer division
           operations.  _s_t_r_a_t_e_g_y can be one of:

           ccaallll--ddiivv11
               Calls a library function that uses the single-step division
               instruction "div1" to perform the operation.  Division by zero
               calculates an unspecified result and does not trap.  This is
               the default except for SH4, SH2A and SHcompact.

           ccaallll--ffpp
               Calls a library function that performs the operation in double
               precision floating point.  Division by zero causes a floating-
               point exception.  This is the default for SHcompact with FPU.
               Specifying this for targets that do not have a double precision
               FPU defaults to "call-div1".

           ccaallll--ttaabbllee
               Calls a library function that uses a lookup table for small
               divisors and the "div1" instruction with case distinction for
               larger divisors.  Division by zero calculates an unspecified
               result and does not trap.  This is the default for SH4.
               Specifying this for targets that do not have dynamic shift
               instructions defaults to "call-div1".

           When a division strategy has not been specified the default
           strategy is selected based on the current target.  For SH2A the
           default strategy is to use the "divs" and "divu" instructions
           instead of library function calls.

       --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss
           Reserve space once for outgoing arguments in the function prologue
           rather than around each call.  Generally beneficial for performance
           and size.  Also needed for unwinding to avoid changing the stack
           frame around conditional code.

       --mmddiivvssii33__lliibbffuunncc==_n_a_m_e
           Set the name of the library function used for 32-bit signed
           division to _n_a_m_e.  This only affects the name used in the ccaallll
           division strategies, and the compiler still expects the same sets
           of input/output/clobbered registers as if this option were not
           present.

       --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           Generate code treating the given register range as fixed registers.
           A fixed register is one that the register allocator can not use.
           This is useful when compiling kernel code.  A register range is
           specified as two registers separated by a dash.  Multiple register
           ranges can be specified separated by a comma.

       --mmbbrraanncchh--ccoosstt==_n_u_m
           Assume _n_u_m to be the cost for a branch instruction.  Higher numbers
           make the compiler try to generate more branch-free code if
           possible.  If not specified the value is selected depending on the
           processor type that is being compiled for.

       --mmzzddccbbrraanncchh
       --mmnnoo--zzddccbbrraanncchh
           Assume (do not assume) that zero displacement conditional branch
           instructions "bt" and "bf" are fast.  If --mmzzddccbbrraanncchh is specified,
           the compiler prefers zero displacement branch code sequences.  This
           is enabled by default when generating code for SH4 and SH4A.  It
           can be explicitly disabled by specifying --mmnnoo--zzddccbbrraanncchh.

       --mmccbbrraanncchh--ffoorrccee--ddeellaayy--sslloott
           Force the usage of delay slots for conditional branches, which
           stuffs the delay slot with a "nop" if a suitable instruction cannot
           be found.  By default this option is disabled.  It can be enabled
           to work around hardware bugs as found in the original SH7055.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Generate code that uses (does not use) the floating-point multiply
           and accumulate instructions.  These instructions are generated by
           default if hardware floating point is used.  The machine-dependent
           --mmffuusseedd--mmaadddd option is now mapped to the machine-independent
           --ffffpp--ccoonnttrraacctt==ffaasstt option, and --mmnnoo--ffuusseedd--mmaadddd is mapped to
           --ffffpp--ccoonnttrraacctt==ooffff.

       --mmffssccaa
       --mmnnoo--ffssccaa
           Allow or disallow the compiler to emit the "fsca" instruction for
           sine and cosine approximations.  The option --mmffssccaa must be used in
           combination with --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss.  It is enabled by
           default when generating code for SH4A.  Using --mmnnoo--ffssccaa disables
           sine and cosine approximations even if --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss
           is in effect.

       --mmffssrrrraa
       --mmnnoo--ffssrrrraa
           Allow or disallow the compiler to emit the "fsrra" instruction for
           reciprocal square root approximations.  The option --mmffssrrrraa must be
           used in combination with --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss and
           --ffffiinniittee--mmaatthh--oonnllyy.  It is enabled by default when generating code
           for SH4A.  Using --mmnnoo--ffssrrrraa disables reciprocal square root
           approximations even if --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss and
           --ffffiinniittee--mmaatthh--oonnllyy are in effect.

       --mmpprreetteenndd--ccmmoovvee
           Prefer zero-displacement conditional branches for conditional move
           instruction patterns.  This can result in faster code on the SH4
           processor.

       --mmffddppiicc
           Generate code using the FDPIC ABI.

       _S_o_l_a_r_i_s _2 _O_p_t_i_o_n_s

       These --mm options are supported on Solaris 2:

       --mmcclleeaarr--hhwwccaapp
           --mmcclleeaarr--hhwwccaapp tells the compiler to remove the hardware
           capabilities generated by the Solaris assembler.  This is only
           necessary when object files use ISA extensions not supported by the
           current machine, but check at runtime whether or not to use them.

       --mmiimmppuurree--tteexxtt
           --mmiimmppuurree--tteexxtt, used in addition to --sshhaarreedd, tells the compiler to
           not pass --zz tteexxtt to the linker when linking a shared object.  Using
           this option, you can link position-dependent code into a shared
           object.

           --mmiimmppuurree--tteexxtt suppresses the "relocations remain against
           allocatable but non-writable sections" linker error message.
           However, the necessary relocations trigger copy-on-write, and the
           shared object is not actually shared across processes.  Instead of
           using --mmiimmppuurree--tteexxtt, you should compile all source code with --ffppiicc
           or --ffPPIICC.

       These switches are supported in addition to the above on Solaris 2:

       --pptthhrreeaaddss
           This is a synonym for --pptthhrreeaadd.

       _S_P_A_R_C _O_p_t_i_o_n_s

       These --mm options are supported on the SPARC:

       --mmnnoo--aapppp--rreeggss
       --mmaapppp--rreeggss
           Specify --mmaapppp--rreeggss to generate output using the global registers 2
           through 4, which the SPARC SVR4 ABI reserves for applications.
           Like the global register 1, each global register 2 through 4 is
           then treated as an allocable register that is clobbered by function
           calls.  This is the default.

           To be fully SVR4 ABI-compliant at the cost of some performance
           loss, specify --mmnnoo--aapppp--rreeggss.  You should compile libraries and
           system software with this option.

       --mmffllaatt
       --mmnnoo--ffllaatt
           With --mmffllaatt, the compiler does not generate save/restore
           instructions and uses a "flat" or single register window model.
           This model is compatible with the regular register window model.
           The local registers and the input registers (0--5) are still
           treated as "call-saved" registers and are saved on the stack as
           needed.

           With --mmnnoo--ffllaatt (the default), the compiler generates save/restore
           instructions (except for leaf functions).  This is the normal
           operating mode.

       --mmffppuu
       --mmhhaarrdd--ffllooaatt
           Generate output containing floating-point instructions.  This is
           the default.

       --mmnnoo--ffppuu
       --mmssoofftt--ffllooaatt
           Generate output containing library calls for floating point.
           WWaarrnniinngg:: the requisite libraries are not available for all SPARC
           targets.  Normally the facilities of the machine's usual C compiler
           are used, but this cannot be done directly in cross-compilation.
           You must make your own arrangements to provide suitable library
           functions for cross-compilation.  The embedded targets ssppaarrcc--**--aaoouutt
           and ssppaarrcclliittee--**--** do provide software floating-point support.

           --mmssoofftt--ffllooaatt changes the calling convention in the output file;
           therefore, it is only useful if you compile _a_l_l of a program with
           this option.  In particular, you need to compile _l_i_b_g_c_c_._a, the
           library that comes with GCC, with --mmssoofftt--ffllooaatt in order for this to
           work.

       --mmhhaarrdd--qquuaadd--ffllooaatt
           Generate output containing quad-word (long double) floating-point
           instructions.

       --mmssoofftt--qquuaadd--ffllooaatt
           Generate output containing library calls for quad-word (long
           double) floating-point instructions.  The functions called are
           those specified in the SPARC ABI.  This is the default.

           As of this writing, there are no SPARC implementations that have
           hardware support for the quad-word floating-point instructions.
           They all invoke a trap handler for one of these instructions, and
           then the trap handler emulates the effect of the instruction.
           Because of the trap handler overhead, this is much slower than
           calling the ABI library routines.  Thus the --mmssoofftt--qquuaadd--ffllooaatt
           option is the default.

       --mmnnoo--uunnaalliiggnneedd--ddoouubblleess
       --mmuunnaalliiggnneedd--ddoouubblleess
           Assume that doubles have 8-byte alignment.  This is the default.

           With --mmuunnaalliiggnneedd--ddoouubblleess, GCC assumes that doubles have 8-byte
           alignment only if they are contained in another type, or if they
           have an absolute address.  Otherwise, it assumes they have 4-byte
           alignment.  Specifying this option avoids some rare compatibility
           problems with code generated by other compilers.  It is not the
           default because it results in a performance loss, especially for
           floating-point code.

       --mmuusseerr--mmooddee
       --mmnnoo--uusseerr--mmooddee
           Do not generate code that can only run in supervisor mode.  This is
           relevant only for the "casa" instruction emitted for the LEON3
           processor.  This is the default.

       --mmffaasstteerr--ssttrruuccttss
       --mmnnoo--ffaasstteerr--ssttrruuccttss
           With --mmffaasstteerr--ssttrruuccttss, the compiler assumes that structures should
           have 8-byte alignment.  This enables the use of pairs of "ldd" and
           "std" instructions for copies in structure assignment, in place of
           twice as many "ld" and "st" pairs.  However, the use of this
           changed alignment directly violates the SPARC ABI.  Thus, it's
           intended only for use on targets where the developer acknowledges
           that their resulting code is not directly in line with the rules of
           the ABI.

       --mmssttdd--ssttrruucctt--rreettuurrnn
       --mmnnoo--ssttdd--ssttrruucctt--rreettuurrnn
           With --mmssttdd--ssttrruucctt--rreettuurrnn, the compiler generates checking code in
           functions returning structures or unions to detect size mismatches
           between the two sides of function calls, as per the 32-bit ABI.

           The default is --mmnnoo--ssttdd--ssttrruucctt--rreettuurrnn.  This option has no effect
           in 64-bit mode.

       --mmllrraa
       --mmnnoo--llrraa
           Enable Local Register Allocation.  This is the default for SPARC
           since GCC 7 so --mmnnoo--llrraa needs to be passed to get old Reload.

       --mmccppuu==_c_p_u___t_y_p_e
           Set the instruction set, register set, and instruction scheduling
           parameters for machine type _c_p_u___t_y_p_e.  Supported values for
           _c_p_u___t_y_p_e are vv77, ccyypprreessss, vv88, ssuuppeerrssppaarrcc, hhyyppeerrssppaarrcc, lleeoonn, lleeoonn33,
           lleeoonn33vv77, ssppaarrcclliittee, ff993300, ff993344, ssppaarrcclliittee8866xx, ssppaarrcclleett, ttsscc770011, vv99,
           uullttrraassppaarrcc, uullttrraassppaarrcc33, nniiaaggaarraa, nniiaaggaarraa22, nniiaaggaarraa33, nniiaaggaarraa44,
           nniiaaggaarraa77 and mm88.

           Native Solaris and GNU/Linux toolchains also support the value
           nnaattiivvee, which selects the best architecture option for the host
           processor.  --mmccppuu==nnaattiivvee has no effect if GCC does not recognize
           the processor.

           Default instruction scheduling parameters are used for values that
           select an architecture and not an implementation.  These are vv77,
           vv88, ssppaarrcclliittee, ssppaarrcclleett, vv99.

           Here is a list of each supported architecture and their supported
           implementations.

           v7  cypress, leon3v7

           v8  supersparc, hypersparc, leon, leon3

           sparclite
               f930, f934, sparclite86x

           sparclet
               tsc701

           v9  ultrasparc, ultrasparc3, niagara, niagara2, niagara3, niagara4,
               niagara7, m8

           By default (unless configured otherwise), GCC generates code for
           the V7 variant of the SPARC architecture.  With --mmccppuu==ccyypprreessss, the
           compiler additionally optimizes it for the Cypress CY7C602 chip, as
           used in the SPARCStation/SPARCServer 3xx series.  This is also
           appropriate for the older SPARCStation 1, 2, IPX etc.

           With --mmccppuu==vv88, GCC generates code for the V8 variant of the SPARC
           architecture.  The only difference from V7 code is that the
           compiler emits the integer multiply and integer divide instructions
           which exist in SPARC-V8 but not in SPARC-V7.  With
           --mmccppuu==ssuuppeerrssppaarrcc, the compiler additionally optimizes it for the
           SuperSPARC chip, as used in the SPARCStation 10, 1000 and 2000
           series.

           With --mmccppuu==ssppaarrcclliittee, GCC generates code for the SPARClite variant
           of the SPARC architecture.  This adds the integer multiply, integer
           divide step and scan ("ffs") instructions which exist in SPARClite
           but not in SPARC-V7.  With --mmccppuu==ff993300, the compiler additionally
           optimizes it for the Fujitsu MB86930 chip, which is the original
           SPARClite, with no FPU.  With --mmccppuu==ff993344, the compiler additionally
           optimizes it for the Fujitsu MB86934 chip, which is the more recent
           SPARClite with FPU.

           With --mmccppuu==ssppaarrcclleett, GCC generates code for the SPARClet variant of
           the SPARC architecture.  This adds the integer multiply,
           multiply/accumulate, integer divide step and scan ("ffs")
           instructions which exist in SPARClet but not in SPARC-V7.  With
           --mmccppuu==ttsscc770011, the compiler additionally optimizes it for the TEMIC
           SPARClet chip.

           With --mmccppuu==vv99, GCC generates code for the V9 variant of the SPARC
           architecture.  This adds 64-bit integer and floating-point move
           instructions, 3 additional floating-point condition code registers
           and conditional move instructions.  With --mmccppuu==uullttrraassppaarrcc, the
           compiler additionally optimizes it for the Sun UltraSPARC I/II/IIi
           chips.  With --mmccppuu==uullttrraassppaarrcc33, the compiler additionally optimizes
           it for the Sun UltraSPARC III/III+/IIIi/IIIi+/IV/IV+ chips.  With
           --mmccppuu==nniiaaggaarraa, the compiler additionally optimizes it for Sun
           UltraSPARC T1 chips.  With --mmccppuu==nniiaaggaarraa22, the compiler
           additionally optimizes it for Sun UltraSPARC T2 chips. With
           --mmccppuu==nniiaaggaarraa33, the compiler additionally optimizes it for Sun
           UltraSPARC T3 chips.  With --mmccppuu==nniiaaggaarraa44, the compiler
           additionally optimizes it for Sun UltraSPARC T4 chips.  With
           --mmccppuu==nniiaaggaarraa77, the compiler additionally optimizes it for Oracle
           SPARC M7 chips.  With --mmccppuu==mm88, the compiler additionally optimizes
           it for Oracle M8 chips.

       --mmttuunnee==_c_p_u___t_y_p_e
           Set the instruction scheduling parameters for machine type
           _c_p_u___t_y_p_e, but do not set the instruction set or register set that
           the option --mmccppuu==_c_p_u___t_y_p_e does.

           The same values for --mmccppuu==_c_p_u___t_y_p_e can be used for --mmttuunnee==_c_p_u___t_y_p_e,
           but the only useful values are those that select a particular CPU
           implementation.  Those are ccyypprreessss, ssuuppeerrssppaarrcc, hhyyppeerrssppaarrcc, lleeoonn,
           lleeoonn33, lleeoonn33vv77, ff993300, ff993344, ssppaarrcclliittee8866xx, ttsscc770011, uullttrraassppaarrcc,
           uullttrraassppaarrcc33, nniiaaggaarraa, nniiaaggaarraa22, nniiaaggaarraa33, nniiaaggaarraa44, nniiaaggaarraa77 and
           mm88.  With native Solaris and GNU/Linux toolchains, nnaattiivvee can also
           be used.

       --mmvv88pplluuss
       --mmnnoo--vv88pplluuss
           With --mmvv88pplluuss, GCC generates code for the SPARC-V8+ ABI.  The
           difference from the V8 ABI is that the global and out registers are
           considered 64 bits wide.  This is enabled by default on Solaris in
           32-bit mode for all SPARC-V9 processors.

       --mmvviiss
       --mmnnoo--vviiss
           With --mmvviiss, GCC generates code that takes advantage of the
           UltraSPARC Visual Instruction Set extensions.  The default is
           --mmnnoo--vviiss.

       --mmvviiss22
       --mmnnoo--vviiss22
           With --mmvviiss22, GCC generates code that takes advantage of version 2.0
           of the UltraSPARC Visual Instruction Set extensions.  The default
           is --mmvviiss22 when targeting a cpu that supports such instructions,
           such as UltraSPARC-III and later.  Setting --mmvviiss22 also sets --mmvviiss.

       --mmvviiss33
       --mmnnoo--vviiss33
           With --mmvviiss33, GCC generates code that takes advantage of version 3.0
           of the UltraSPARC Visual Instruction Set extensions.  The default
           is --mmvviiss33 when targeting a cpu that supports such instructions,
           such as niagara-3 and later.  Setting --mmvviiss33 also sets --mmvviiss22 and
           --mmvviiss.

       --mmvviiss44
       --mmnnoo--vviiss44
           With --mmvviiss44, GCC generates code that takes advantage of version 4.0
           of the UltraSPARC Visual Instruction Set extensions.  The default
           is --mmvviiss44 when targeting a cpu that supports such instructions,
           such as niagara-7 and later.  Setting --mmvviiss44 also sets --mmvviiss33,
           --mmvviiss22 and --mmvviiss.

       --mmvviiss44bb
       --mmnnoo--vviiss44bb
           With --mmvviiss44bb, GCC generates code that takes advantage of version
           4.0 of the UltraSPARC Visual Instruction Set extensions, plus the
           additional VIS instructions introduced in the Oracle SPARC
           Architecture 2017.  The default is --mmvviiss44bb when targeting a cpu
           that supports such instructions, such as m8 and later.  Setting
           --mmvviiss44bb also sets --mmvviiss44, --mmvviiss33, --mmvviiss22 and --mmvviiss.

       --mmccbbccoonndd
       --mmnnoo--ccbbccoonndd
           With --mmccbbccoonndd, GCC generates code that takes advantage of the
           UltraSPARC Compare-and-Branch-on-Condition instructions.  The
           default is --mmccbbccoonndd when targeting a CPU that supports such
           instructions, such as Niagara-4 and later.

       --mmffmmaaff
       --mmnnoo--ffmmaaff
           With --mmffmmaaff, GCC generates code that takes advantage of the
           UltraSPARC Fused Multiply-Add Floating-point instructions.  The
           default is --mmffmmaaff when targeting a CPU that supports such
           instructions, such as Niagara-3 and later.

       --mmffssmmuulldd
       --mmnnoo--ffssmmuulldd
           With --mmffssmmuulldd, GCC generates code that takes advantage of the
           Floating-point Multiply Single to Double (FsMULd) instruction.  The
           default is --mmffssmmuulldd when targeting a CPU supporting the
           architecture versions V8 or V9 with FPU except --mmccppuu==lleeoonn.

       --mmppooppcc
       --mmnnoo--ppooppcc
           With --mmppooppcc, GCC generates code that takes advantage of the
           UltraSPARC Population Count instruction.  The default is --mmppooppcc
           when targeting a CPU that supports such an instruction, such as
           Niagara-2 and later.

       --mmssuubbxxcc
       --mmnnoo--ssuubbxxcc
           With --mmssuubbxxcc, GCC generates code that takes advantage of the
           UltraSPARC Subtract-Extended-with-Carry instruction.  The default
           is --mmssuubbxxcc when targeting a CPU that supports such an instruction,
           such as Niagara-7 and later.

       --mmffiixx--aatt669977ff
           Enable the documented workaround for the single erratum of the
           Atmel AT697F processor (which corresponds to erratum #13 of the
           AT697E processor).

       --mmffiixx--uutt669999
           Enable the documented workarounds for the floating-point errata and
           the data cache nullify errata of the UT699 processor.

       --mmffiixx--uutt770000
           Enable the documented workaround for the back-to-back store errata
           of the UT699E/UT700 processor.

       --mmffiixx--ggrr771122rrcc
           Enable the documented workaround for the back-to-back store errata
           of the GR712RC processor.

       These --mm options are supported in addition to the above on SPARC-V9
       processors in 64-bit environments:

       --mm3322
       --mm6644
           Generate code for a 32-bit or 64-bit environment.  The 32-bit
           environment sets int, long and pointer to 32 bits.  The 64-bit
           environment sets int to 32 bits and long and pointer to 64 bits.

       --mmccmmooddeell==_w_h_i_c_h
           Set the code model to one of

           mmeeddllooww
               The Medium/Low code model: 64-bit addresses, programs must be
               linked in the low 32 bits of memory.  Programs can be
               statically or dynamically linked.

           mmeeddmmiidd
               The Medium/Middle code model: 64-bit addresses, programs must
               be linked in the low 44 bits of memory, the text and data
               segments must be less than 2GB in size and the data segment
               must be located within 2GB of the text segment.

           mmeeddaannyy
               The Medium/Anywhere code model: 64-bit addresses, programs may
               be linked anywhere in memory, the text and data segments must
               be less than 2GB in size and the data segment must be located
               within 2GB of the text segment.

           eemmbbmmeeddaannyy
               The Medium/Anywhere code model for embedded systems: 64-bit
               addresses, the text and data segments must be less than 2GB in
               size, both starting anywhere in memory (determined at link
               time).  The global register %g4 points to the base of the data
               segment.  Programs are statically linked and PIC is not
               supported.

       --mmmmeemmoorryy--mmooddeell==_m_e_m_-_m_o_d_e_l
           Set the memory model in force on the processor to one of

           ddeeffaauulltt
               The default memory model for the processor and operating
               system.

           rrmmoo Relaxed Memory Order

           ppssoo Partial Store Order

           ttssoo Total Store Order

           sscc  Sequential Consistency

           These memory models are formally defined in Appendix D of the
           SPARC-V9 architecture manual, as set in the processor's "PSTATE.MM"
           field.

       --mmssttaacckk--bbiiaass
       --mmnnoo--ssttaacckk--bbiiaass
           With --mmssttaacckk--bbiiaass, GCC assumes that the stack pointer, and frame
           pointer if present, are offset by -2047 which must be added back
           when making stack frame references.  This is the default in 64-bit
           mode.  Otherwise, assume no such offset is present.

       _S_P_U _O_p_t_i_o_n_s

       These --mm options are supported on the SPU:

       --mmwwaarrnn--rreelloocc
       --mmeerrrroorr--rreelloocc
           The loader for SPU does not handle dynamic relocations.  By
           default, GCC gives an error when it generates code that requires a
           dynamic relocation.  --mmnnoo--eerrrroorr--rreelloocc disables the error,
           --mmwwaarrnn--rreelloocc generates a warning instead.

       --mmssaaffee--ddmmaa
       --mmuunnssaaffee--ddmmaa
           Instructions that initiate or test completion of DMA must not be
           reordered with respect to loads and stores of the memory that is
           being accessed.  With --mmuunnssaaffee--ddmmaa you must use the "volatile"
           keyword to protect memory accesses, but that can lead to
           inefficient code in places where the memory is known to not change.
           Rather than mark the memory as volatile, you can use --mmssaaffee--ddmmaa to
           tell the compiler to treat the DMA instructions as potentially
           affecting all memory.

       --mmbbrraanncchh--hhiinnttss
           By default, GCC generates a branch hint instruction to avoid
           pipeline stalls for always-taken or probably-taken branches.  A
           hint is not generated closer than 8 instructions away from its
           branch.  There is little reason to disable them, except for
           debugging purposes, or to make an object a little bit smaller.

       --mmssmmaallll--mmeemm
       --mmllaarrggee--mmeemm
           By default, GCC generates code assuming that addresses are never
           larger than 18 bits.  With --mmllaarrggee--mmeemm code is generated that
           assumes a full 32-bit address.

       --mmssttddmmaaiinn
           By default, GCC links against startup code that assumes the SPU-
           style main function interface (which has an unconventional
           parameter list).  With --mmssttddmmaaiinn, GCC links your program against
           startup code that assumes a C99-style interface to "main",
           including a local copy of "argv" strings.

       --mmffiixxeedd--rraannggee==_r_e_g_i_s_t_e_r_-_r_a_n_g_e
           Generate code treating the given register range as fixed registers.
           A fixed register is one that the register allocator cannot use.
           This is useful when compiling kernel code.  A register range is
           specified as two registers separated by a dash.  Multiple register
           ranges can be specified separated by a comma.

       --mmeeaa3322
       --mmeeaa6644
           Compile code assuming that pointers to the PPU address space
           accessed via the "__ea" named address space qualifier are either 32
           or 64 bits wide.  The default is 32 bits.  As this is an ABI-
           changing option, all object code in an executable must be compiled
           with the same setting.

       --mmaaddddrreessss--ssppaaccee--ccoonnvveerrssiioonn
       --mmnnoo--aaddddrreessss--ssppaaccee--ccoonnvveerrssiioonn
           Allow/disallow treating the "__ea" address space as superset of the
           generic address space.  This enables explicit type casts between
           "__ea" and generic pointer as well as implicit conversions of
           generic pointers to "__ea" pointers.  The default is to allow
           address space pointer conversions.

       --mmccaacchhee--ssiizzee==_c_a_c_h_e_-_s_i_z_e
           This option controls the version of libgcc that the compiler links
           to an executable and selects a software-managed cache for accessing
           variables in the "__ea" address space with a particular cache size.
           Possible options for _c_a_c_h_e_-_s_i_z_e are 88, 1166, 3322, 6644 and 112288.  The
           default cache size is 64KB.

       --mmaattoommiicc--uuppddaatteess
       --mmnnoo--aattoommiicc--uuppddaatteess
           This option controls the version of libgcc that the compiler links
           to an executable and selects whether atomic updates to the
           software-managed cache of PPU-side variables are used.  If you use
           atomic updates, changes to a PPU variable from SPU code using the
           "__ea" named address space qualifier do not interfere with changes
           to other PPU variables residing in the same cache line from PPU
           code.  If you do not use atomic updates, such interference may
           occur; however, writing back cache lines is more efficient.  The
           default behavior is to use atomic updates.

       --mmdduuaall--nnooppss
       --mmdduuaall--nnooppss==_n
           By default, GCC inserts NOPs to increase dual issue when it expects
           it to increase performance.  _n can be a value from 0 to 10.  A
           smaller _n inserts fewer NOPs.  10 is the default, 0 is the same as
           --mmnnoo--dduuaall--nnooppss.  Disabled with --OOss.

       --mmhhiinntt--mmaaxx--nnooppss==_n
           Maximum number of NOPs to insert for a branch hint.  A branch hint
           must be at least 8 instructions away from the branch it is
           affecting.  GCC inserts up to _n NOPs to enforce this, otherwise it
           does not generate the branch hint.

       --mmhhiinntt--mmaaxx--ddiissttaannccee==_n
           The encoding of the branch hint instruction limits the hint to be
           within 256 instructions of the branch it is affecting.  By default,
           GCC makes sure it is within 125.

       --mmssaaffee--hhiinnttss
           Work around a hardware bug that causes the SPU to stall
           indefinitely.  By default, GCC inserts the "hbrp" instruction to
           make sure this stall won't happen.

       _O_p_t_i_o_n_s _f_o_r _S_y_s_t_e_m _V

       These additional options are available on System V Release 4 for
       compatibility with other compilers on those systems:

       --GG  Create a shared object.  It is recommended that --ssyymmbboolliicc or
           --sshhaarreedd be used instead.

       --QQyy Identify the versions of each tool used by the compiler, in a
           ".ident" assembler directive in the output.

       --QQnn Refrain from adding ".ident" directives to the output file (this is
           the default).

       --YYPP,,_d_i_r_s
           Search the directories _d_i_r_s, and no others, for libraries specified
           with --ll.

       --YYmm,,_d_i_r
           Look in the directory _d_i_r to find the M4 preprocessor.  The
           assembler uses this option.

       _T_I_L_E_-_G_x _O_p_t_i_o_n_s

       These --mm options are supported on the TILE-Gx:

       --mmccmmooddeell==ssmmaallll
           Generate code for the small model.  The distance for direct calls
           is limited to 500M in either direction.  PC-relative addresses are
           32 bits.  Absolute addresses support the full address range.

       --mmccmmooddeell==llaarrggee
           Generate code for the large model.  There is no limitation on call
           distance, pc-relative addresses, or absolute addresses.

       --mmccppuu==_n_a_m_e
           Selects the type of CPU to be targeted.  Currently the only
           supported type is ttiilleeggxx.

       --mm3322
       --mm6644
           Generate code for a 32-bit or 64-bit environment.  The 32-bit
           environment sets int, long, and pointer to 32 bits.  The 64-bit
           environment sets int to 32 bits and long and pointer to 64 bits.

       --mmbbiigg--eennddiiaann
       --mmlliittttllee--eennddiiaann
           Generate code in big/little endian mode, respectively.

       _T_I_L_E_P_r_o _O_p_t_i_o_n_s

       These --mm options are supported on the TILEPro:

       --mmccppuu==_n_a_m_e
           Selects the type of CPU to be targeted.  Currently the only
           supported type is ttiilleepprroo.

       --mm3322
           Generate code for a 32-bit environment, which sets int, long, and
           pointer to 32 bits.  This is the only supported behavior so the
           flag is essentially ignored.

       _V_8_5_0 _O_p_t_i_o_n_s

       These --mm options are defined for V850 implementations:

       --mmlloonngg--ccaallllss
       --mmnnoo--lloonngg--ccaallllss
           Treat all calls as being far away (near).  If calls are assumed to
           be far away, the compiler always loads the function's address into
           a register, and calls indirect through the pointer.

       --mmnnoo--eepp
       --mmeepp
           Do not optimize (do optimize) basic blocks that use the same index
           pointer 4 or more times to copy pointer into the "ep" register, and
           use the shorter "sld" and "sst" instructions.  The --mmeepp option is
           on by default if you optimize.

       --mmnnoo--pprroolloogg--ffuunnccttiioonn
       --mmpprroolloogg--ffuunnccttiioonn
           Do not use (do use) external functions to save and restore
           registers at the prologue and epilogue of a function.  The external
           functions are slower, but use less code space if more than one
           function saves the same number of registers.  The --mmpprroolloogg--ffuunnccttiioonn
           option is on by default if you optimize.

       --mmssppaaccee
           Try to make the code as small as possible.  At present, this just
           turns on the --mmeepp and --mmpprroolloogg--ffuunnccttiioonn options.

       --mmttddaa==_n
           Put static or global variables whose size is _n bytes or less into
           the tiny data area that register "ep" points to.  The tiny data
           area can hold up to 256 bytes in total (128 bytes for byte
           references).

       --mmssddaa==_n
           Put static or global variables whose size is _n bytes or less into
           the small data area that register "gp" points to.  The small data
           area can hold up to 64 kilobytes.

       --mmzzddaa==_n
           Put static or global variables whose size is _n bytes or less into
           the first 32 kilobytes of memory.

       --mmvv885500
           Specify that the target processor is the V850.

       --mmvv885500ee33vv55
           Specify that the target processor is the V850E3V5.  The
           preprocessor constant "__v850e3v5__" is defined if this option is
           used.

       --mmvv885500ee22vv44
           Specify that the target processor is the V850E3V5.  This is an
           alias for the --mmvv885500ee33vv55 option.

       --mmvv885500ee22vv33
           Specify that the target processor is the V850E2V3.  The
           preprocessor constant "__v850e2v3__" is defined if this option is
           used.

       --mmvv885500ee22
           Specify that the target processor is the V850E2.  The preprocessor
           constant "__v850e2__" is defined if this option is used.

       --mmvv885500ee11
           Specify that the target processor is the V850E1.  The preprocessor
           constants "__v850e1__" and "__v850e__" are defined if this option
           is used.

       --mmvv885500eess
           Specify that the target processor is the V850ES.  This is an alias
           for the --mmvv885500ee11 option.

       --mmvv885500ee
           Specify that the target processor is the V850E.  The preprocessor
           constant "__v850e__" is defined if this option is used.

           If neither --mmvv885500 nor --mmvv885500ee nor --mmvv885500ee11 nor --mmvv885500ee22 nor
           --mmvv885500ee22vv33 nor --mmvv885500ee33vv55 are defined then a default target
           processor is chosen and the relevant ____vv885500**____ preprocessor
           constant is defined.

           The preprocessor constants "__v850" and "__v851__" are always
           defined, regardless of which processor variant is the target.

       --mmddiissaabbllee--ccaalllltt
       --mmnnoo--ddiissaabbllee--ccaalllltt
           This option suppresses generation of the "CALLT" instruction for
           the v850e, v850e1, v850e2, v850e2v3 and v850e3v5 flavors of the
           v850 architecture.

           This option is enabled by default when the RH850 ABI is in use (see
           --mmrrhh885500--aabbii), and disabled by default when the GCC ABI is in use.
           If "CALLT" instructions are being generated then the C preprocessor
           symbol "__V850_CALLT__" is defined.

       --mmrreellaaxx
       --mmnnoo--rreellaaxx
           Pass on (or do not pass on) the --mmrreellaaxx command-line option to the
           assembler.

       --mmlloonngg--jjuummppss
       --mmnnoo--lloonngg--jjuummppss
           Disable (or re-enable) the generation of PC-relative jump
           instructions.

       --mmssoofftt--ffllooaatt
       --mmhhaarrdd--ffllooaatt
           Disable (or re-enable) the generation of hardware floating point
           instructions.  This option is only significant when the target
           architecture is VV885500EE22VV33 or higher.  If hardware floating point
           instructions are being generated then the C preprocessor symbol
           "__FPU_OK__" is defined, otherwise the symbol "__NO_FPU__" is
           defined.

       --mmlloooopp
           Enables the use of the e3v5 LOOP instruction.  The use of this
           instruction is not enabled by default when the e3v5 architecture is
           selected because its use is still experimental.

       --mmrrhh885500--aabbii
       --mmgghhss
           Enables support for the RH850 version of the V850 ABI.  This is the
           default.  With this version of the ABI the following rules apply:

           *   Integer sized structures and unions are returned via a memory
               pointer rather than a register.

           *   Large structures and unions (more than 8 bytes in size) are
               passed by value.

           *   Functions are aligned to 16-bit boundaries.

           *   The --mm88bbyyttee--aalliiggnn command-line option is supported.

           *   The --mmddiissaabbllee--ccaalllltt command-line option is enabled by default.
               The --mmnnoo--ddiissaabbllee--ccaalllltt command-line option is not supported.

           When this version of the ABI is enabled the C preprocessor symbol
           "__V850_RH850_ABI__" is defined.

       --mmggcccc--aabbii
           Enables support for the old GCC version of the V850 ABI.  With this
           version of the ABI the following rules apply:

           *   Integer sized structures and unions are returned in register
               "r10".

           *   Large structures and unions (more than 8 bytes in size) are
               passed by reference.

           *   Functions are aligned to 32-bit boundaries, unless optimizing
               for size.

           *   The --mm88bbyyttee--aalliiggnn command-line option is not supported.

           *   The --mmddiissaabbllee--ccaalllltt command-line option is supported but not
               enabled by default.

           When this version of the ABI is enabled the C preprocessor symbol
           "__V850_GCC_ABI__" is defined.

       --mm88bbyyttee--aalliiggnn
       --mmnnoo--88bbyyttee--aalliiggnn
           Enables support for "double" and "long long" types to be aligned on
           8-byte boundaries.  The default is to restrict the alignment of all
           objects to at most 4-bytes.  When --mm88bbyyttee--aalliiggnn is in effect the C
           preprocessor symbol "__V850_8BYTE_ALIGN__" is defined.

       --mmbbiigg--sswwiittcchh
           Generate code suitable for big switch tables.  Use this option only
           if the assembler/linker complain about out of range branches within
           a switch table.

       --mmaapppp--rreeggss
           This option causes r2 and r5 to be used in the code generated by
           the compiler.  This setting is the default.

       --mmnnoo--aapppp--rreeggss
           This option causes r2 and r5 to be treated as fixed registers.

       _V_A_X _O_p_t_i_o_n_s

       These --mm options are defined for the VAX:

       --mmuunniixx
           Do not output certain jump instructions ("aobleq" and so on) that
           the Unix assembler for the VAX cannot handle across long ranges.

       --mmggnnuu
           Do output those jump instructions, on the assumption that the GNU
           assembler is being used.

       --mmgg Output code for G-format floating-point numbers instead of
           D-format.

       _V_i_s_i_u_m _O_p_t_i_o_n_s

       --mmddeebbuugg
           A program which performs file I/O and is destined to run on an MCM
           target should be linked with this option.  It causes the libraries
           libc.a and libdebug.a to be linked.  The program should be run on
           the target under the control of the GDB remote debugging stub.

       --mmssiimm
           A program which performs file I/O and is destined to run on the
           simulator should be linked with option.  This causes libraries
           libc.a and libsim.a to be linked.

       --mmffppuu
       --mmhhaarrdd--ffllooaatt
           Generate code containing floating-point instructions.  This is the
           default.

       --mmnnoo--ffppuu
       --mmssoofftt--ffllooaatt
           Generate code containing library calls for floating-point.

           --mmssoofftt--ffllooaatt changes the calling convention in the output file;
           therefore, it is only useful if you compile _a_l_l of a program with
           this option.  In particular, you need to compile _l_i_b_g_c_c_._a, the
           library that comes with GCC, with --mmssoofftt--ffllooaatt in order for this to
           work.

       --mmccppuu==_c_p_u___t_y_p_e
           Set the instruction set, register set, and instruction scheduling
           parameters for machine type _c_p_u___t_y_p_e.  Supported values for
           _c_p_u___t_y_p_e are mmccmm, ggrr55 and ggrr66.

           mmccmm is a synonym of ggrr55 present for backward compatibility.

           By default (unless configured otherwise), GCC generates code for
           the GR5 variant of the Visium architecture.

           With --mmccppuu==ggrr66, GCC generates code for the GR6 variant of the
           Visium architecture.  The only difference from GR5 code is that the
           compiler will generate block move instructions.

       --mmttuunnee==_c_p_u___t_y_p_e
           Set the instruction scheduling parameters for machine type
           _c_p_u___t_y_p_e, but do not set the instruction set or register set that
           the option --mmccppuu==_c_p_u___t_y_p_e would.

       --mmssvv--mmooddee
           Generate code for the supervisor mode, where there are no
           restrictions on the access to general registers.  This is the
           default.

       --mmuusseerr--mmooddee
           Generate code for the user mode, where the access to some general
           registers is forbidden: on the GR5, registers r24 to r31 cannot be
           accessed in this mode; on the GR6, only registers r29 to r31 are
           affected.

       _V_M_S _O_p_t_i_o_n_s

       These --mm options are defined for the VMS implementations:

       --mmvvmmss--rreettuurrnn--ccooddeess
           Return VMS condition codes from "main". The default is to return
           POSIX-style condition (e.g. error) codes.

       --mmddeebbuugg--mmaaiinn==_p_r_e_f_i_x
           Flag the first routine whose name starts with _p_r_e_f_i_x as the main
           routine for the debugger.

       --mmmmaalllloocc6644
           Default to 64-bit memory allocation routines.

       --mmppooiinntteerr--ssiizzee==_s_i_z_e
           Set the default size of pointers. Possible options for _s_i_z_e are 3322
           or sshhoorrtt for 32 bit pointers, 6644 or lloonngg for 64 bit pointers, and
           nnoo for supporting only 32 bit pointers.  The later option disables
           "pragma pointer_size".

       _V_x_W_o_r_k_s _O_p_t_i_o_n_s

       The options in this section are defined for all VxWorks targets.
       Options specific to the target hardware are listed with the other
       options for that target.

       --mmrrttpp
           GCC can generate code for both VxWorks kernels and real time
           processes (RTPs).  This option switches from the former to the
           latter.  It also defines the preprocessor macro "__RTP__".

       --nnoonn--ssttaattiicc
           Link an RTP executable against shared libraries rather than static
           libraries.  The options --ssttaattiicc and --sshhaarreedd can also be used for
           RTPs; --ssttaattiicc is the default.

       --BBssttaattiicc
       --BBddyynnaammiicc
           These options are passed down to the linker.  They are defined for
           compatibility with Diab.

       --XXbbiinndd--llaazzyy
           Enable lazy binding of function calls.  This option is equivalent
           to --WWll,,--zz,,nnooww and is defined for compatibility with Diab.

       --XXbbiinndd--nnooww
           Disable lazy binding of function calls.  This option is the default
           and is defined for compatibility with Diab.

       _x_8_6 _O_p_t_i_o_n_s

       These --mm options are defined for the x86 family of computers.

       --mmaarrcchh==_c_p_u_-_t_y_p_e
           Generate instructions for the machine type _c_p_u_-_t_y_p_e.  In contrast
           to --mmttuunnee==_c_p_u_-_t_y_p_e, which merely tunes the generated code for the
           specified _c_p_u_-_t_y_p_e, --mmaarrcchh==_c_p_u_-_t_y_p_e allows GCC to generate code
           that may not run at all on processors other than the one indicated.
           Specifying --mmaarrcchh==_c_p_u_-_t_y_p_e implies --mmttuunnee==_c_p_u_-_t_y_p_e.

           The choices for _c_p_u_-_t_y_p_e are:

           nnaattiivvee
               This selects the CPU to generate code for at compilation time
               by determining the processor type of the compiling machine.
               Using --mmaarrcchh==nnaattiivvee enables all instruction subsets supported
               by the local machine (hence the result might not run on
               different machines).  Using --mmttuunnee==nnaattiivvee produces code
               optimized for the local machine under the constraints of the
               selected instruction set.

           xx8866--6644
               A generic CPU with 64-bit extensions.

           ii338866
               Original Intel i386 CPU.

           ii448866
               Intel i486 CPU.  (No scheduling is implemented for this chip.)

           ii558866
           ppeennttiiuumm
               Intel Pentium CPU with no MMX support.

           llaakkeemmoonntt
               Intel Lakemont MCU, based on Intel Pentium CPU.

           ppeennttiiuumm--mmmmxx
               Intel Pentium MMX CPU, based on Pentium core with MMX
               instruction set support.

           ppeennttiiuummpprroo
               Intel Pentium Pro CPU.

           ii668866
               When used with --mmaarrcchh, the Pentium Pro instruction set is used,
               so the code runs on all i686 family chips.  When used with
               --mmttuunnee, it has the same meaning as ggeenneerriicc.

           ppeennttiiuumm22
               Intel Pentium II CPU, based on Pentium Pro core with MMX
               instruction set support.

           ppeennttiiuumm33
           ppeennttiiuumm33mm
               Intel Pentium III CPU, based on Pentium Pro core with MMX and
               SSE instruction set support.

           ppeennttiiuumm--mm
               Intel Pentium M; low-power version of Intel Pentium III CPU
               with MMX, SSE and SSE2 instruction set support.  Used by
               Centrino notebooks.

           ppeennttiiuumm44
           ppeennttiiuumm44mm
               Intel Pentium 4 CPU with MMX, SSE and SSE2 instruction set
               support.

           pprreessccootttt
               Improved version of Intel Pentium 4 CPU with MMX, SSE, SSE2 and
               SSE3 instruction set support.

           nnooccoonnaa
               Improved version of Intel Pentium 4 CPU with 64-bit extensions,
               MMX, SSE, SSE2 and SSE3 instruction set support.

           ccoorree22
               Intel Core 2 CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3
               and SSSE3 instruction set support.

           nneehhaalleemm
               Intel Nehalem CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3,
               SSSE3, SSE4.1, SSE4.2 and POPCNT instruction set support.

           wweessttmmeerree
               Intel Westmere CPU with 64-bit extensions, MMX, SSE, SSE2,
               SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES and PCLMUL instruction
               set support.

           ssaannddyybbrriiddggee
               Intel Sandy Bridge CPU with 64-bit extensions, MMX, SSE, SSE2,
               SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AES and PCLMUL
               instruction set support.

           iivvyybbrriiddggee
               Intel Ivy Bridge CPU with 64-bit extensions, MMX, SSE, SSE2,
               SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AES, PCLMUL,
               FSGSBASE, RDRND and F16C instruction set support.

           hhaasswweellll
               Intel Haswell CPU with 64-bit extensions, MOVBE, MMX, SSE,
               SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES,
               PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2 and F16C instruction
               set support.

           bbrrooaaddwweellll
               Intel Broadwell CPU with 64-bit extensions, MOVBE, MMX, SSE,
               SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES,
               PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX and
               PREFETCHW instruction set support.

           sskkyyllaakkee
               Intel Skylake CPU with 64-bit extensions, MOVBE, MMX, SSE,
               SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES,
               PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX,
               PREFETCHW, CLFLUSHOPT, XSAVEC and XSAVES instruction set
               support.

           bboonnnneellll
               Intel Bonnell CPU with 64-bit extensions, MOVBE, MMX, SSE,
               SSE2, SSE3 and SSSE3 instruction set support.

           ssiillvveerrmmoonntt
               Intel Silvermont CPU with 64-bit extensions, MOVBE, MMX, SSE,
               SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES, PCLMUL and
               RDRND instruction set support.

           kknnll Intel Knight's Landing CPU with 64-bit extensions, MOVBE, MMX,
               SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES,
               PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX,
               PREFETCHW, AVX512F, AVX512PF, AVX512ER and AVX512CD instruction
               set support.

           kknnmm Intel Knights Mill CPU with 64-bit extensions, MOVBE, MMX, SSE,
               SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES,
               PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX,
               PREFETCHW, AVX512F, AVX512PF, AVX512ER, AVX512CD, AVX5124VNNIW,
               AVX5124FMAPS and AVX512VPOPCNTDQ instruction set support.

           sskkyyllaakkee--aavvxx551122
               Intel Skylake Server CPU with 64-bit extensions, MOVBE, MMX,
               SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU, AVX, AVX2,
               AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED,
               ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES, AVX512F, CLWB,
               AVX512VL, AVX512BW, AVX512DQ and AVX512CD instruction set
               support.

           ccaannnnoonnllaakkee
               Intel Cannonlake Server CPU with 64-bit extensions, MOVBE, MMX,
               SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU, AVX, AVX2,
               AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED,
               ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES, AVX512F, AVX512VL,
               AVX512BW, AVX512DQ, AVX512CD, AVX512VBMI, AVX512IFMA, SHA and
               UMIP instruction set support.

           iicceellaakkee--cclliieenntt
               Intel Icelake Client CPU with 64-bit extensions, MOVBE, MMX,
               SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU, AVX, AVX2,
               AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED,
               ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES, AVX512F, AVX512VL,
               AVX512BW, AVX512DQ, AVX512CD, AVX512VBMI, AVX512IFMA, SHA,
               CLWB, UMIP, RDPID, GFNI, AVX512VBMI2, AVX512VPOPCNTDQ,
               AVX512BITALG, AVX512VNNI, VPCLMULQDQ, VAES instruction set
               support.

           iicceellaakkee--sseerrvveerr
               Intel Icelake Server CPU with 64-bit extensions, MOVBE, MMX,
               SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, PKU, AVX, AVX2,
               AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED,
               ADCX, PREFETCHW, CLFLUSHOPT, XSAVEC, XSAVES, AVX512F, AVX512VL,
               AVX512BW, AVX512DQ, AVX512CD, AVX512VBMI, AVX512IFMA, SHA,
               CLWB, UMIP, RDPID, GFNI, AVX512VBMI2, AVX512VPOPCNTDQ,
               AVX512BITALG, AVX512VNNI, VPCLMULQDQ, VAES, PCONFIG and
               WBNOINVD instruction set support.

           kk66  AMD K6 CPU with MMX instruction set support.

           kk66--22
           kk66--33
               Improved versions of AMD K6 CPU with MMX and 3DNow! instruction
               set support.

           aatthhlloonn
           aatthhlloonn--ttbbiirrdd
               AMD Athlon CPU with MMX, 3dNOW!, enhanced 3DNow! and SSE
               prefetch instructions support.

           aatthhlloonn--44
           aatthhlloonn--xxpp
           aatthhlloonn--mmpp
               Improved AMD Athlon CPU with MMX, 3DNow!, enhanced 3DNow! and
               full SSE instruction set support.

           kk88
           oopptteerroonn
           aatthhlloonn6644
           aatthhlloonn--ffxx
               Processors based on the AMD K8 core with x86-64 instruction set
               support, including the AMD Opteron, Athlon 64, and Athlon 64 FX
               processors.  (This supersets MMX, SSE, SSE2, 3DNow!, enhanced
               3DNow! and 64-bit instruction set extensions.)

           kk88--ssssee33
           oopptteerroonn--ssssee33
           aatthhlloonn6644--ssssee33
               Improved versions of AMD K8 cores with SSE3 instruction set
               support.

           aammddffaamm1100
           bbaarrcceelloonnaa
               CPUs based on AMD Family 10h cores with x86-64 instruction set
               support.  (This supersets MMX, SSE, SSE2, SSE3, SSE4A, 3DNow!,
               enhanced 3DNow!, ABM and 64-bit instruction set extensions.)

           bbddvveerr11
               CPUs based on AMD Family 15h cores with x86-64 instruction set
               support.  (This supersets FMA4, AVX, XOP, LWP, AES, PCL_MUL,
               CX16, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM
               and 64-bit instruction set extensions.)

           bbddvveerr22
               AMD Family 15h core based CPUs with x86-64 instruction set
               support.  (This supersets BMI, TBM, F16C, FMA, FMA4, AVX, XOP,
               LWP, AES, PCL_MUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3,
               SSE4.1, SSE4.2, ABM and 64-bit instruction set extensions.)

           bbddvveerr33
               AMD Family 15h core based CPUs with x86-64 instruction set
               support.  (This supersets BMI, TBM, F16C, FMA, FMA4, FSGSBASE,
               AVX, XOP, LWP, AES, PCL_MUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A,
               SSSE3, SSE4.1, SSE4.2, ABM and 64-bit instruction set
               extensions.

           bbddvveerr44
               AMD Family 15h core based CPUs with x86-64 instruction set
               support.  (This supersets BMI, BMI2, TBM, F16C, FMA, FMA4,
               FSGSBASE, AVX, AVX2, XOP, LWP, AES, PCL_MUL, CX16, MOVBE, MMX,
               SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM and 64-bit
               instruction set extensions.

           zznnvveerr11
               AMD Family 17h core based CPUs with x86-64 instruction set
               support.  (This supersets BMI, BMI2, F16C, FMA, FSGSBASE, AVX,
               AVX2, ADCX, RDSEED, MWAITX, SHA, CLZERO, AES, PCL_MUL, CX16,
               MOVBE, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM,
               XSAVEC, XSAVES, CLFLUSHOPT, POPCNT, and 64-bit instruction set
               extensions.

           bbttvveerr11
               CPUs based on AMD Family 14h cores with x86-64 instruction set
               support.  (This supersets MMX, SSE, SSE2, SSE3, SSSE3, SSE4A,
               CX16, ABM and 64-bit instruction set extensions.)

           bbttvveerr22
               CPUs based on AMD Family 16h cores with x86-64 instruction set
               support. This includes MOVBE, F16C, BMI, AVX, PCL_MUL, AES,
               SSE4.2, SSE4.1, CX16, ABM, SSE4A, SSSE3, SSE3, SSE2, SSE, MMX
               and 64-bit instruction set extensions.

           wwiinncchhiipp--cc66
               IDT WinChip C6 CPU, dealt in same way as i486 with additional
               MMX instruction set support.

           wwiinncchhiipp22
               IDT WinChip 2 CPU, dealt in same way as i486 with additional
               MMX and 3DNow!  instruction set support.

           cc33  VIA C3 CPU with MMX and 3DNow! instruction set support.  (No
               scheduling is implemented for this chip.)

           cc33--22
               VIA C3-2 (Nehemiah/C5XL) CPU with MMX and SSE instruction set
               support.  (No scheduling is implemented for this chip.)

           cc77  VIA C7 (Esther) CPU with MMX, SSE, SSE2 and SSE3 instruction
               set support.  (No scheduling is implemented for this chip.)

           ssaammuueell--22
               VIA Eden Samuel 2 CPU with MMX and 3DNow! instruction set
               support.  (No scheduling is implemented for this chip.)

           nneehheemmiiaahh
               VIA Eden Nehemiah CPU with MMX and SSE instruction set support.
               (No scheduling is implemented for this chip.)

           eesstthheerr
               VIA Eden Esther CPU with MMX, SSE, SSE2 and SSE3 instruction
               set support.  (No scheduling is implemented for this chip.)

           eeddeenn--xx22
               VIA Eden X2 CPU with x86-64, MMX, SSE, SSE2 and SSE3
               instruction set support.  (No scheduling is implemented for
               this chip.)

           eeddeenn--xx44
               VIA Eden X4 CPU with x86-64, MMX, SSE, SSE2, SSE3, SSSE3,
               SSE4.1, SSE4.2, AVX and AVX2 instruction set support.  (No
               scheduling is implemented for this chip.)

           nnaannoo
               Generic VIA Nano CPU with x86-64, MMX, SSE, SSE2, SSE3 and
               SSSE3 instruction set support.  (No scheduling is implemented
               for this chip.)

           nnaannoo--11000000
               VIA Nano 1xxx CPU with x86-64, MMX, SSE, SSE2, SSE3 and SSSE3
               instruction set support.  (No scheduling is implemented for
               this chip.)

           nnaannoo--22000000
               VIA Nano 2xxx CPU with x86-64, MMX, SSE, SSE2, SSE3 and SSSE3
               instruction set support.  (No scheduling is implemented for
               this chip.)

           nnaannoo--33000000
               VIA Nano 3xxx CPU with x86-64, MMX, SSE, SSE2, SSE3, SSSE3 and
               SSE4.1 instruction set support.  (No scheduling is implemented
               for this chip.)

           nnaannoo--xx22
               VIA Nano Dual Core CPU with x86-64, MMX, SSE, SSE2, SSE3, SSSE3
               and SSE4.1 instruction set support.  (No scheduling is
               implemented for this chip.)

           nnaannoo--xx44
               VIA Nano Quad Core CPU with x86-64, MMX, SSE, SSE2, SSE3, SSSE3
               and SSE4.1 instruction set support.  (No scheduling is
               implemented for this chip.)

           ggeeooddee
               AMD Geode embedded processor with MMX and 3DNow! instruction
               set support.

       --mmttuunnee==_c_p_u_-_t_y_p_e
           Tune to _c_p_u_-_t_y_p_e everything applicable about the generated code,
           except for the ABI and the set of available instructions.  While
           picking a specific _c_p_u_-_t_y_p_e schedules things appropriately for that
           particular chip, the compiler does not generate any code that
           cannot run on the default machine type unless you use a --mmaarrcchh==_c_p_u_-
           _t_y_p_e option.  For example, if GCC is configured for
           i686-pc-linux-gnu then --mmttuunnee==ppeennttiiuumm44 generates code that is tuned
           for Pentium 4 but still runs on i686 machines.

           The choices for _c_p_u_-_t_y_p_e are the same as for --mmaarrcchh.  In addition,
           --mmttuunnee supports 2 extra choices for _c_p_u_-_t_y_p_e:

           ggeenneerriicc
               Produce code optimized for the most common IA32/AMD64/EM64T
               processors.  If you know the CPU on which your code will run,
               then you should use the corresponding --mmttuunnee or --mmaarrcchh option
               instead of --mmttuunnee==ggeenneerriicc.  But, if you do not know exactly
               what CPU users of your application will have, then you should
               use this option.

               As new processors are deployed in the marketplace, the behavior
               of this option will change.  Therefore, if you upgrade to a
               newer version of GCC, code generation controlled by this option
               will change to reflect the processors that are most common at
               the time that version of GCC is released.

               There is no --mmaarrcchh==ggeenneerriicc option because --mmaarrcchh indicates the
               instruction set the compiler can use, and there is no generic
               instruction set applicable to all processors.  In contrast,
               --mmttuunnee indicates the processor (or, in this case, collection of
               processors) for which the code is optimized.

           iinntteell
               Produce code optimized for the most current Intel processors,
               which are Haswell and Silvermont for this version of GCC.  If
               you know the CPU on which your code will run, then you should
               use the corresponding --mmttuunnee or --mmaarrcchh option instead of
               --mmttuunnee==iinntteell.  But, if you want your application performs
               better on both Haswell and Silvermont, then you should use this
               option.

               As new Intel processors are deployed in the marketplace, the
               behavior of this option will change.  Therefore, if you upgrade
               to a newer version of GCC, code generation controlled by this
               option will change to reflect the most current Intel processors
               at the time that version of GCC is released.

               There is no --mmaarrcchh==iinntteell option because --mmaarrcchh indicates the
               instruction set the compiler can use, and there is no common
               instruction set applicable to all processors.  In contrast,
               --mmttuunnee indicates the processor (or, in this case, collection of
               processors) for which the code is optimized.

       --mmccppuu==_c_p_u_-_t_y_p_e
           A deprecated synonym for --mmttuunnee.

       --mmffppmmaatthh==_u_n_i_t
           Generate floating-point arithmetic for selected unit _u_n_i_t.  The
           choices for _u_n_i_t are:

           338877 Use the standard 387 floating-point coprocessor present on the
               majority of chips and emulated otherwise.  Code compiled with
               this option runs almost everywhere.  The temporary results are
               computed in 80-bit precision instead of the precision specified
               by the type, resulting in slightly different results compared
               to most of other chips.  See --ffffllooaatt--ssttoorree for more detailed
               description.

               This is the default choice for non-Darwin x86-32 targets.

           ssssee Use scalar floating-point instructions present in the SSE
               instruction set.  This instruction set is supported by Pentium
               III and newer chips, and in the AMD line by Athlon-4, Athlon XP
               and Athlon MP chips.  The earlier version of the SSE
               instruction set supports only single-precision arithmetic, thus
               the double and extended-precision arithmetic are still done
               using 387.  A later version, present only in Pentium 4 and AMD
               x86-64 chips, supports double-precision arithmetic too.

               For the x86-32 compiler, you must use --mmaarrcchh==_c_p_u_-_t_y_p_e, --mmssssee or
               --mmssssee22 switches to enable SSE extensions and make this option
               effective.  For the x86-64 compiler, these extensions are
               enabled by default.

               The resulting code should be considerably faster in the
               majority of cases and avoid the numerical instability problems
               of 387 code, but may break some existing code that expects
               temporaries to be 80 bits.

               This is the default choice for the x86-64 compiler, Darwin
               x86-32 targets, and the default choice for x86-32 targets with
               the SSE2 instruction set when --ffffaasstt--mmaatthh is enabled.

           ssssee,,338877
           ssssee++338877
           bbootthh
               Attempt to utilize both instruction sets at once.  This
               effectively doubles the amount of available registers, and on
               chips with separate execution units for 387 and SSE the
               execution resources too.  Use this option with care, as it is
               still experimental, because the GCC register allocator does not
               model separate functional units well, resulting in unstable
               performance.

       --mmaassmm==_d_i_a_l_e_c_t
           Output assembly instructions using selected _d_i_a_l_e_c_t.  Also affects
           which dialect is used for basic "asm" and extended "asm". Supported
           choices (in dialect order) are aatttt or iinntteell. The default is aatttt.
           Darwin does not support iinntteell.

       --mmiieeeeee--ffpp
       --mmnnoo--iieeeeee--ffpp
           Control whether or not the compiler uses IEEE floating-point
           comparisons.  These correctly handle the case where the result of a
           comparison is unordered.

       --mm8800338877
       --mmhhaarrdd--ffllooaatt
           Generate output containing 80387 instructions for floating point.

       --mmnnoo--8800338877
       --mmssoofftt--ffllooaatt
           Generate output containing library calls for floating point.

           WWaarrnniinngg:: the requisite libraries are not part of GCC.  Normally the
           facilities of the machine's usual C compiler are used, but this
           cannot be done directly in cross-compilation.  You must make your
           own arrangements to provide suitable library functions for cross-
           compilation.

           On machines where a function returns floating-point results in the
           80387 register stack, some floating-point opcodes may be emitted
           even if --mmssoofftt--ffllooaatt is used.

       --mmnnoo--ffpp--rreett--iinn--338877
           Do not use the FPU registers for return values of functions.

           The usual calling convention has functions return values of types
           "float" and "double" in an FPU register, even if there is no FPU.
           The idea is that the operating system should emulate an FPU.

           The option --mmnnoo--ffpp--rreett--iinn--338877 causes such values to be returned in
           ordinary CPU registers instead.

       --mmnnoo--ffaannccyy--mmaatthh--338877
           Some 387 emulators do not support the "sin", "cos" and "sqrt"
           instructions for the 387.  Specify this option to avoid generating
           those instructions.  This option is the default on OpenBSD and
           NetBSD.  This option is overridden when --mmaarrcchh indicates that the
           target CPU always has an FPU and so the instruction does not need
           emulation.  These instructions are not generated unless you also
           use the --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss switch.

       --mmaalliiggnn--ddoouubbllee
       --mmnnoo--aalliiggnn--ddoouubbllee
           Control whether GCC aligns "double", "long double", and "long long"
           variables on a two-word boundary or a one-word boundary.  Aligning
           "double" variables on a two-word boundary produces code that runs
           somewhat faster on a Pentium at the expense of more memory.

           On x86-64, --mmaalliiggnn--ddoouubbllee is enabled by default.

           WWaarrnniinngg:: if you use the --mmaalliiggnn--ddoouubbllee switch, structures
           containing the above types are aligned differently than the
           published application binary interface specifications for the
           x86-32 and are not binary compatible with structures in code
           compiled without that switch.

       --mm9966bbiitt--lloonngg--ddoouubbllee
       --mm112288bbiitt--lloonngg--ddoouubbllee
           These switches control the size of "long double" type.  The x86-32
           application binary interface specifies the size to be 96 bits, so
           --mm9966bbiitt--lloonngg--ddoouubbllee is the default in 32-bit mode.

           Modern architectures (Pentium and newer) prefer "long double" to be
           aligned to an 8- or 16-byte boundary.  In arrays or structures
           conforming to the ABI, this is not possible.  So specifying
           --mm112288bbiitt--lloonngg--ddoouubbllee aligns "long double" to a 16-byte boundary by
           padding the "long double" with an additional 32-bit zero.

           In the x86-64 compiler, --mm112288bbiitt--lloonngg--ddoouubbllee is the default choice
           as its ABI specifies that "long double" is aligned on 16-byte
           boundary.

           Notice that neither of these options enable any extra precision
           over the x87 standard of 80 bits for a "long double".

           WWaarrnniinngg:: if you override the default value for your target ABI,
           this changes the size of structures and arrays containing "long
           double" variables, as well as modifying the function calling
           convention for functions taking "long double".  Hence they are not
           binary-compatible with code compiled without that switch.

       --mmlloonngg--ddoouubbllee--6644
       --mmlloonngg--ddoouubbllee--8800
       --mmlloonngg--ddoouubbllee--112288
           These switches control the size of "long double" type. A size of 64
           bits makes the "long double" type equivalent to the "double" type.
           This is the default for 32-bit Bionic C library.  A size of 128
           bits makes the "long double" type equivalent to the "__float128"
           type. This is the default for 64-bit Bionic C library.

           WWaarrnniinngg:: if you override the default value for your target ABI,
           this changes the size of structures and arrays containing "long
           double" variables, as well as modifying the function calling
           convention for functions taking "long double".  Hence they are not
           binary-compatible with code compiled without that switch.

       --mmaalliiggnn--ddaattaa==_t_y_p_e
           Control how GCC aligns variables.  Supported values for _t_y_p_e are
           ccoommppaatt uses increased alignment value compatible uses GCC 4.8 and
           earlier, aabbii uses alignment value as specified by the psABI, and
           ccaacchheelliinnee uses increased alignment value to match the cache line
           size.  ccoommppaatt is the default.

       --mmllaarrggee--ddaattaa--tthhrreesshhoolldd==_t_h_r_e_s_h_o_l_d
           When --mmccmmooddeell==mmeeddiiuumm is specified, data objects larger than
           _t_h_r_e_s_h_o_l_d are placed in the large data section.  This value must be
           the same across all objects linked into the binary, and defaults to
           65535.

       --mmrrttdd
           Use a different function-calling convention, in which functions
           that take a fixed number of arguments return with the "ret _n_u_m_"
           instruction, which pops their arguments while returning.  This
           saves one instruction in the caller since there is no need to pop
           the arguments there.

           You can specify that an individual function is called with this
           calling sequence with the function attribute "stdcall".  You can
           also override the --mmrrttdd option by using the function attribute
           "cdecl".

           WWaarrnniinngg:: this calling convention is incompatible with the one
           normally used on Unix, so you cannot use it if you need to call
           libraries compiled with the Unix compiler.

           Also, you must provide function prototypes for all functions that
           take variable numbers of arguments (including "printf"); otherwise
           incorrect code is generated for calls to those functions.

           In addition, seriously incorrect code results if you call a
           function with too many arguments.  (Normally, extra arguments are
           harmlessly ignored.)

       --mmrreeggppaarrmm==_n_u_m
           Control how many registers are used to pass integer arguments.  By
           default, no registers are used to pass arguments, and at most 3
           registers can be used.  You can control this behavior for a
           specific function by using the function attribute "regparm".

           WWaarrnniinngg:: if you use this switch, and _n_u_m is nonzero, then you must
           build all modules with the same value, including any libraries.
           This includes the system libraries and startup modules.

       --mmsssseerreeggppaarrmm
           Use SSE register passing conventions for float and double arguments
           and return values.  You can control this behavior for a specific
           function by using the function attribute "sseregparm".

           WWaarrnniinngg:: if you use this switch then you must build all modules
           with the same value, including any libraries.  This includes the
           system libraries and startup modules.

       --mmvveecctt88--rreett--iinn--mmeemm
           Return 8-byte vectors in memory instead of MMX registers.  This is
           the default on Solaris@tie{}8 and 9 and VxWorks to match the ABI of
           the Sun Studio compilers until version 12.  Later compiler versions
           (starting with Studio 12 Update@tie{}1) follow the ABI used by
           other x86 targets, which is the default on Solaris@tie{}10 and
           later.  _O_n_l_y use this option if you need to remain compatible with
           existing code produced by those previous compiler versions or older
           versions of GCC.

       --mmppcc3322
       --mmppcc6644
       --mmppcc8800
           Set 80387 floating-point precision to 32, 64 or 80 bits.  When
           --mmppcc3322 is specified, the significands of results of floating-point
           operations are rounded to 24 bits (single precision); --mmppcc6644 rounds
           the significands of results of floating-point operations to 53 bits
           (double precision) and --mmppcc8800 rounds the significands of results of
           floating-point operations to 64 bits (extended double precision),
           which is the default.  When this option is used, floating-point
           operations in higher precisions are not available to the programmer
           without setting the FPU control word explicitly.

           Setting the rounding of floating-point operations to less than the
           default 80 bits can speed some programs by 2% or more.  Note that
           some mathematical libraries assume that extended-precision (80-bit)
           floating-point operations are enabled by default; routines in such
           libraries could suffer significant loss of accuracy, typically
           through so-called "catastrophic cancellation", when this option is
           used to set the precision to less than extended precision.

       --mmssttaacckkrreeaalliiggnn
           Realign the stack at entry.  On the x86, the --mmssttaacckkrreeaalliiggnn option
           generates an alternate prologue and epilogue that realigns the run-
           time stack if necessary.  This supports mixing legacy codes that
           keep 4-byte stack alignment with modern codes that keep 16-byte
           stack alignment for SSE compatibility.  See also the attribute
           "force_align_arg_pointer", applicable to individual functions.

       --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==_n_u_m
           Attempt to keep the stack boundary aligned to a 2 raised to _n_u_m
           byte boundary.  If --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy is not specified, the
           default is 4 (16 bytes or 128 bits).

           WWaarrnniinngg:: When generating code for the x86-64 architecture with SSE
           extensions disabled, --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==33 can be used to
           keep the stack boundary aligned to 8 byte boundary.  Since x86-64
           ABI require 16 byte stack alignment, this is ABI incompatible and
           intended to be used in controlled environment where stack space is
           important limitation.  This option leads to wrong code when
           functions compiled with 16 byte stack alignment (such as functions
           from a standard library) are called with misaligned stack.  In this
           case, SSE instructions may lead to misaligned memory access traps.
           In addition, variable arguments are handled incorrectly for 16 byte
           aligned objects (including x87 long double and __int128), leading
           to wrong results.  You must build all modules with
           --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==33, including any libraries.  This
           includes the system libraries and startup modules.

       --mmiinnccoommiinngg--ssttaacckk--bboouunnddaarryy==_n_u_m
           Assume the incoming stack is aligned to a 2 raised to _n_u_m byte
           boundary.  If --mmiinnccoommiinngg--ssttaacckk--bboouunnddaarryy is not specified, the one
           specified by --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy is used.

           On Pentium and Pentium Pro, "double" and "long double" values
           should be aligned to an 8-byte boundary (see --mmaalliiggnn--ddoouubbllee) or
           suffer significant run time performance penalties.  On Pentium III,
           the Streaming SIMD Extension (SSE) data type "__m128" may not work
           properly if it is not 16-byte aligned.

           To ensure proper alignment of this values on the stack, the stack
           boundary must be as aligned as that required by any value stored on
           the stack.  Further, every function must be generated such that it
           keeps the stack aligned.  Thus calling a function compiled with a
           higher preferred stack boundary from a function compiled with a
           lower preferred stack boundary most likely misaligns the stack.  It
           is recommended that libraries that use callbacks always use the
           default setting.

           This extra alignment does consume extra stack space, and generally
           increases code size.  Code that is sensitive to stack space usage,
           such as embedded systems and operating system kernels, may want to
           reduce the preferred alignment to --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==22.

       --mmmmmmxx
       --mmssssee
       --mmssssee22
       --mmssssee33
       --mmssssssee33
       --mmssssee44
       --mmssssee44aa
       --mmssssee44..11
       --mmssssee44..22
       --mmaavvxx
       --mmaavvxx22
       --mmaavvxx551122ff
       --mmaavvxx551122ppff
       --mmaavvxx551122eerr
       --mmaavvxx551122ccdd
       --mmaavvxx551122vvll
       --mmaavvxx551122bbww
       --mmaavvxx551122ddqq
       --mmaavvxx551122iiffmmaa
       --mmaavvxx551122vvbbmmii
       --mmsshhaa
       --mmaaeess
       --mmppccllmmuull
       --mmccllfflluusshhoopptt
       --mmccllwwbb
       --mmffssggssbbaassee
       --mmrrddrrnndd
       --mmff1166cc
       --mmffmmaa
       --mmppccoonnffiigg
       --mmwwbbnnooiinnvvdd
       --mmffmmaa44
       --mmpprrffcchhww
       --mmrrddppiidd
       --mmpprreeffeettcchhwwtt11
       --mmrrddsseeeedd
       --mmssggxx
       --mmxxoopp
       --mmllwwpp
       --mm33ddnnooww
       --mm33ddnnoowwaa
       --mmppooppccnntt
       --mmaabbmm
       --mmaaddxx
       --mmbbmmii
       --mmbbmmii22
       --mmllzzccnntt
       --mmffxxssrr
       --mmxxssaavvee
       --mmxxssaavveeoopptt
       --mmxxssaavveecc
       --mmxxssaavveess
       --mmrrttmm
       --mmhhllee
       --mmttbbmm
       --mmmmppxx
       --mmmmwwaaiittxx
       --mmccllzzeerroo
       --mmppkkuu
       --mmaavvxx551122vvbbmmii22
       --mmggffnnii
       --mmvvaaeess
       --mmvvppccllmmuullqqddqq
       --mmaavvxx551122bbiittaallgg
       --mmmmoovvddiirrii
       --mmmmoovvddiirr6644bb
       --mmaavvxx551122vvppooppccnnttddqq
       --mmaavvxx55112244ffmmaappss
       --mmaavvxx551122vvnnnnii
       --mmaavvxx55112244vvnnnniiww
           These switches enable the use of instructions in the MMX, SSE,
           SSE2, SSE3, SSSE3, SSE4, SSE4A, SSE4.1, SSE4.2, AVX, AVX2, AVX512F,
           AVX512PF, AVX512ER, AVX512CD, AVX512VL, AVX512BW, AVX512DQ,
           AVX512IFMA, AVX512VBMI, SHA, AES, PCLMUL, CLFLUSHOPT, CLWB,
           FSGSBASE, RDRND, F16C, FMA, PCONFIG, WBNOINVD, FMA4, PREFETCHW,
           RDPID, PREFETCHWT1, RDSEED, SGX, XOP, LWP, 3DNow!, enhanced 3DNow!,
           POPCNT, ABM, ADX, BMI, BMI2, LZCNT, FXSR, XSAVE, XSAVEOPT, XSAVEC,
           XSAVES, RTM, HLE, TBM, MPX, MWAITX, CLZERO, PKU, AVX512VBMI2, GFNI,
           VAES, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B,
           AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, or AVX5124VNNIW extended
           instruction sets.  Each has a corresponding --mmnnoo-- option to disable
           use of these instructions.

           These extensions are also available as built-in functions: see xx8866
           BBuuiilltt--iinn FFuunnccttiioonnss, for details of the functions enabled and
           disabled by these switches.

           To generate SSE/SSE2 instructions automatically from floating-point
           code (as opposed to 387 instructions), see --mmffppmmaatthh==ssssee.

           GCC depresses SSEx instructions when --mmaavvxx is used. Instead, it
           generates new AVX instructions or AVX equivalence for all SSEx
           instructions when needed.

           These options enable GCC to use these extended instructions in
           generated code, even without --mmffppmmaatthh==ssssee.  Applications that
           perform run-time CPU detection must compile separate files for each
           supported architecture, using the appropriate flags.  In
           particular, the file containing the CPU detection code should be
           compiled without these options.

       --mmdduummpp--ttuunnee--ffeeaattuurreess
           This option instructs GCC to dump the names of the x86 performance
           tuning features and default settings. The names can be used in
           --mmttuunnee--ccttrrll==_f_e_a_t_u_r_e_-_l_i_s_t.

       --mmttuunnee--ccttrrll==_f_e_a_t_u_r_e_-_l_i_s_t
           This option is used to do fine grain control of x86 code generation
           features.  _f_e_a_t_u_r_e_-_l_i_s_t is a comma separated list of _f_e_a_t_u_r_e names.
           See also --mmdduummpp--ttuunnee--ffeeaattuurreess. When specified, the _f_e_a_t_u_r_e is
           turned on if it is not preceded with ^^, otherwise, it is turned
           off.  --mmttuunnee--ccttrrll==_f_e_a_t_u_r_e_-_l_i_s_t is intended to be used by GCC
           developers. Using it may lead to code paths not covered by testing
           and can potentially result in compiler ICEs or runtime errors.

       --mmnnoo--ddeeffaauulltt
           This option instructs GCC to turn off all tunable features. See
           also --mmttuunnee--ccttrrll==_f_e_a_t_u_r_e_-_l_i_s_t and --mmdduummpp--ttuunnee--ffeeaattuurreess.

       --mmcclldd
           This option instructs GCC to emit a "cld" instruction in the
           prologue of functions that use string instructions.  String
           instructions depend on the DF flag to select between autoincrement
           or autodecrement mode.  While the ABI specifies the DF flag to be
           cleared on function entry, some operating systems violate this
           specification by not clearing the DF flag in their exception
           dispatchers.  The exception handler can be invoked with the DF flag
           set, which leads to wrong direction mode when string instructions
           are used.  This option can be enabled by default on 32-bit x86
           targets by configuring GCC with the ----eennaabbllee--cclldd configure option.
           Generation of "cld" instructions can be suppressed with the
           --mmnnoo--cclldd compiler option in this case.

       --mmvvzzeerroouuppppeerr
           This option instructs GCC to emit a "vzeroupper" instruction before
           a transfer of control flow out of the function to minimize the AVX
           to SSE transition penalty as well as remove unnecessary "zeroupper"
           intrinsics.

       --mmpprreeffeerr--aavvxx112288
           This option instructs GCC to use 128-bit AVX instructions instead
           of 256-bit AVX instructions in the auto-vectorizer.

       --mmpprreeffeerr--vveeccttoorr--wwiiddtthh==_o_p_t
           This option instructs GCC to use _o_p_t-bit vector width in
           instructions instead of default on the selected platform.

           nnoonnee
               No extra limitations applied to GCC other than defined by the
               selected platform.

           112288 Prefer 128-bit vector width for instructions.

           225566 Prefer 256-bit vector width for instructions.

           551122 Prefer 512-bit vector width for instructions.

       --mmccxx1166
           This option enables GCC to generate "CMPXCHG16B" instructions in
           64-bit code to implement compare-and-exchange operations on 16-byte
           aligned 128-bit objects.  This is useful for atomic updates of data
           structures exceeding one machine word in size.  The compiler uses
           this instruction to implement ____ssyynncc BBuuiillttiinnss.  However, for
           ____aattoommiicc BBuuiillttiinnss operating on 128-bit integers, a library call is
           always used.

       --mmssaahhff
           This option enables generation of "SAHF" instructions in 64-bit
           code.  Early Intel Pentium 4 CPUs with Intel 64 support, prior to
           the introduction of Pentium 4 G1 step in December 2005, lacked the
           "LAHF" and "SAHF" instructions which are supported by AMD64.  These
           are load and store instructions, respectively, for certain status
           flags.  In 64-bit mode, the "SAHF" instruction is used to optimize
           "fmod", "drem", and "remainder" built-in functions; see OOtthheerr
           BBuuiillttiinnss for details.

       --mmmmoovvbbee
           This option enables use of the "movbe" instruction to implement
           "__builtin_bswap32" and "__builtin_bswap64".

       --mmsshhssttkk
           The --mmsshhssttkk option enables shadow stack built-in functions from x86
           Control-flow Enforcement Technology (CET).

       --mmccrrcc3322
           This option enables built-in functions "__builtin_ia32_crc32qi",
           "__builtin_ia32_crc32hi", "__builtin_ia32_crc32si" and
           "__builtin_ia32_crc32di" to generate the "crc32" machine
           instruction.

       --mmrreecciipp
           This option enables use of "RCPSS" and "RSQRTSS" instructions (and
           their vectorized variants "RCPPS" and "RSQRTPS") with an additional
           Newton-Raphson step to increase precision instead of "DIVSS" and
           "SQRTSS" (and their vectorized variants) for single-precision
           floating-point arguments.  These instructions are generated only
           when --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss is enabled together with
           --ffffiinniittee--mmaatthh--oonnllyy and --ffnnoo--ttrraappppiinngg--mmaatthh.  Note that while the
           throughput of the sequence is higher than the throughput of the
           non-reciprocal instruction, the precision of the sequence can be
           decreased by up to 2 ulp (i.e. the inverse of 1.0 equals
           0.99999994).

           Note that GCC implements "1.0f/sqrtf(_x_)_" in terms of "RSQRTSS" (or
           "RSQRTPS") already with --ffffaasstt--mmaatthh (or the above option
           combination), and doesn't need --mmrreecciipp.

           Also note that GCC emits the above sequence with additional Newton-
           Raphson step for vectorized single-float division and vectorized
           "sqrtf(_x_)_" already with --ffffaasstt--mmaatthh (or the above option
           combination), and doesn't need --mmrreecciipp.

       --mmrreecciipp==_o_p_t
           This option controls which reciprocal estimate instructions may be
           used.  _o_p_t is a comma-separated list of options, which may be
           preceded by a !! to invert the option:

           aallll Enable all estimate instructions.

           ddeeffaauulltt
               Enable the default instructions, equivalent to --mmrreecciipp.

           nnoonnee
               Disable all estimate instructions, equivalent to --mmnnoo--rreecciipp.

           ddiivv Enable the approximation for scalar division.

           vveecc--ddiivv
               Enable the approximation for vectorized division.

           ssqqrrtt
               Enable the approximation for scalar square root.

           vveecc--ssqqrrtt
               Enable the approximation for vectorized square root.

           So, for example, --mmrreecciipp==aallll,,!!ssqqrrtt enables all of the reciprocal
           approximations, except for square root.

       --mmvveecclliibbaabbii==_t_y_p_e
           Specifies the ABI type to use for vectorizing intrinsics using an
           external library.  Supported values for _t_y_p_e are ssvvmmll for the Intel
           short vector math library and aaccmmll for the AMD math core library.
           To use this option, both --ffttrreeee--vveeccttoorriizzee and
           --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss have to be enabled, and an SVML or ACML
           ABI-compatible library must be specified at link time.

           GCC currently emits calls to "vmldExp2", "vmldLn2", "vmldLog102",
           "vmldPow2", "vmldTanh2", "vmldTan2", "vmldAtan2", "vmldAtanh2",
           "vmldCbrt2", "vmldSinh2", "vmldSin2", "vmldAsinh2", "vmldAsin2",
           "vmldCosh2", "vmldCos2", "vmldAcosh2", "vmldAcos2", "vmlsExp4",
           "vmlsLn4", "vmlsLog104", "vmlsPow4", "vmlsTanh4", "vmlsTan4",
           "vmlsAtan4", "vmlsAtanh4", "vmlsCbrt4", "vmlsSinh4", "vmlsSin4",
           "vmlsAsinh4", "vmlsAsin4", "vmlsCosh4", "vmlsCos4", "vmlsAcosh4"
           and "vmlsAcos4" for corresponding function type when
           --mmvveecclliibbaabbii==ssvvmmll is used, and "__vrd2_sin", "__vrd2_cos",
           "__vrd2_exp", "__vrd2_log", "__vrd2_log2", "__vrd2_log10",
           "__vrs4_sinf", "__vrs4_cosf", "__vrs4_expf", "__vrs4_logf",
           "__vrs4_log2f", "__vrs4_log10f" and "__vrs4_powf" for the
           corresponding function type when --mmvveecclliibbaabbii==aaccmmll is used.

       --mmaabbii==_n_a_m_e
           Generate code for the specified calling convention.  Permissible
           values are ssyyssvv for the ABI used on GNU/Linux and other systems,
           and mmss for the Microsoft ABI.  The default is to use the Microsoft
           ABI when targeting Microsoft Windows and the SysV ABI on all other
           systems.  You can control this behavior for specific functions by
           using the function attributes "ms_abi" and "sysv_abi".

       --mmffoorrccee--iinnddiirreecctt--ccaallll
           Force all calls to functions to be indirect. This is useful when
           using Intel Processor Trace where it generates more precise timing
           information for function calls.

       --mmccaallll--mmss22ssyyssvv--xxlloogguueess
           Due to differences in 64-bit ABIs, any Microsoft ABI function that
           calls a System V ABI function must consider RSI, RDI and XMM6-15 as
           clobbered.  By default, the code for saving and restoring these
           registers is emitted inline, resulting in fairly lengthy prologues
           and epilogues.  Using --mmccaallll--mmss22ssyyssvv--xxlloogguueess emits prologues and
           epilogues that use stubs in the static portion of libgcc to perform
           these saves and restores, thus reducing function size at the cost
           of a few extra instructions.

       --mmttllss--ddiiaalleecctt==_t_y_p_e
           Generate code to access thread-local storage using the ggnnuu or ggnnuu22
           conventions.  ggnnuu is the conservative default; ggnnuu22 is more
           efficient, but it may add compile- and run-time requirements that
           cannot be satisfied on all systems.

       --mmppuusshh--aarrggss
       --mmnnoo--ppuusshh--aarrggss
           Use PUSH operations to store outgoing parameters.  This method is
           shorter and usually equally fast as method using SUB/MOV operations
           and is enabled by default.  In some cases disabling it may improve
           performance because of improved scheduling and reduced
           dependencies.

       --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss
           If enabled, the maximum amount of space required for outgoing
           arguments is computed in the function prologue.  This is faster on
           most modern CPUs because of reduced dependencies, improved
           scheduling and reduced stack usage when the preferred stack
           boundary is not equal to 2.  The drawback is a notable increase in
           code size.  This switch implies --mmnnoo--ppuusshh--aarrggss.

       --mmtthhrreeaaddss
           Support thread-safe exception handling on MinGW.  Programs that
           rely on thread-safe exception handling must compile and link all
           code with the --mmtthhrreeaaddss option.  When compiling, --mmtthhrreeaaddss defines
           --DD__MMTT; when linking, it links in a special thread helper library
           --llmmiinnggwwtthhrrdd which cleans up per-thread exception-handling data.

       --mmmmss--bbiittffiieellddss
       --mmnnoo--mmss--bbiittffiieellddss
           Enable/disable bit-field layout compatible with the native
           Microsoft Windows compiler.

           If "packed" is used on a structure, or if bit-fields are used, it
           may be that the Microsoft ABI lays out the structure differently
           than the way GCC normally does.  Particularly when moving packed
           data between functions compiled with GCC and the native Microsoft
           compiler (either via function call or as data in a file), it may be
           necessary to access either format.

           This option is enabled by default for Microsoft Windows targets.
           This behavior can also be controlled locally by use of variable or
           type attributes.  For more information, see xx8866 VVaarriiaabbllee AAttttrriibbuutteess
           and xx8866 TTyyppee AAttttrriibbuutteess.

           The Microsoft structure layout algorithm is fairly simple with the
           exception of the bit-field packing.  The padding and alignment of
           members of structures and whether a bit-field can straddle a
           storage-unit boundary are determine by these rules:

           1. Structure members are stored sequentially in the order in which
           they are
               declared: the first member has the lowest memory address and
               the last member the highest.

           2. Every data object has an alignment requirement.  The alignment
           requirement
               for all data except structures, unions, and arrays is either
               the size of the object or the current packing size (specified
               with either the "aligned" attribute or the "pack" pragma),
               whichever is less.  For structures, unions, and arrays, the
               alignment requirement is the largest alignment requirement of
               its members.  Every object is allocated an offset so that:

                       offset % alignment_requirement == 0

           3. Adjacent bit-fields are packed into the same 1-, 2-, or 4-byte
           allocation
               unit if the integral types are the same size and if the next
               bit-field fits into the current allocation unit without
               crossing the boundary imposed by the common alignment
               requirements of the bit-fields.

           MSVC interprets zero-length bit-fields in the following ways:

           1. If a zero-length bit-field is inserted between two bit-fields
           that
               are normally coalesced, the bit-fields are not coalesced.

               For example:

                       struct
                        {
                          unsigned long bf_1 : 12;
                          unsigned long : 0;
                          unsigned long bf_2 : 12;
                        } t1;

               The size of "t1" is 8 bytes with the zero-length bit-field.  If
               the zero-length bit-field were removed, "t1"'s size would be 4
               bytes.

           2. If a zero-length bit-field is inserted after a bit-field, "foo",
           and the
               alignment of the zero-length bit-field is greater than the
               member that follows it, "bar", "bar" is aligned as the type of
               the zero-length bit-field.

               For example:

                       struct
                        {
                          char foo : 4;
                          short : 0;
                          char bar;
                        } t2;

                       struct
                        {
                          char foo : 4;
                          short : 0;
                          double bar;
                        } t3;

               For "t2", "bar" is placed at offset 2, rather than offset 1.
               Accordingly, the size of "t2" is 4.  For "t3", the zero-length
               bit-field does not affect the alignment of "bar" or, as a
               result, the size of the structure.

               Taking this into account, it is important to note the
               following:

               1. If a zero-length bit-field follows a normal bit-field, the
               type of the
                   zero-length bit-field may affect the alignment of the
                   structure as whole. For example, "t2" has a size of 4
                   bytes, since the zero-length bit-field follows a normal
                   bit-field, and is of type short.

               2. Even if a zero-length bit-field is not followed by a normal
               bit-field, it may
                   still affect the alignment of the structure:

                           struct
                            {
                              char foo : 6;
                              long : 0;
                            } t4;

                   Here, "t4" takes up 4 bytes.

           3. Zero-length bit-fields following non-bit-field members are
           ignored:
                       struct
                        {
                          char foo;
                          long : 0;
                          char bar;
                        } t5;

               Here, "t5" takes up 2 bytes.

       --mmnnoo--aalliiggnn--ssttrriinnggooppss
           Do not align the destination of inlined string operations.  This
           switch reduces code size and improves performance in case the
           destination is already aligned, but GCC doesn't know about it.

       --mmiinnlliinnee--aallll--ssttrriinnggooppss
           By default GCC inlines string operations only when the destination
           is known to be aligned to least a 4-byte boundary.  This enables
           more inlining and increases code size, but may improve performance
           of code that depends on fast "memcpy", "strlen", and "memset" for
           short lengths.

       --mmiinnlliinnee--ssttrriinnggooppss--ddyynnaammiiccaallllyy
           For string operations of unknown size, use run-time checks with
           inline code for small blocks and a library call for large blocks.

       --mmssttrriinnggoopp--ssttrraatteeggyy==_a_l_g
           Override the internal decision heuristic for the particular
           algorithm to use for inlining string operations.  The allowed
           values for _a_l_g are:

           rreepp__bbyyttee
           rreepp__44bbyyttee
           rreepp__88bbyyttee
               Expand using i386 "rep" prefix of the specified size.

           bbyyttee__lloooopp
           lloooopp
           uunnrroolllleedd__lloooopp
               Expand into an inline loop.

           lliibbccaallll
               Always use a library call.

       --mmmmeemmccppyy--ssttrraatteeggyy==_s_t_r_a_t_e_g_y
           Override the internal decision heuristic to decide if
           "__builtin_memcpy" should be inlined and what inline algorithm to
           use when the expected size of the copy operation is known. _s_t_r_a_t_e_g_y
           is a comma-separated list of _a_l_g:_m_a_x___s_i_z_e:_d_e_s_t___a_l_i_g_n triplets.  _a_l_g
           is specified in --mmssttrriinnggoopp--ssttrraatteeggyy, _m_a_x___s_i_z_e specifies the max
           byte size with which inline algorithm _a_l_g is allowed.  For the last
           triplet, the _m_a_x___s_i_z_e must be "-1". The _m_a_x___s_i_z_e of the triplets in
           the list must be specified in increasing order.  The minimal byte
           size for _a_l_g is 0 for the first triplet and "_m_a_x___s_i_z_e _+ _1_" of the
           preceding range.

       --mmmmeemmsseett--ssttrraatteeggyy==_s_t_r_a_t_e_g_y
           The option is similar to --mmmmeemmccppyy--ssttrraatteeggyy== except that it is to
           control "__builtin_memset" expansion.

       --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr
           Don't keep the frame pointer in a register for leaf functions.
           This avoids the instructions to save, set up, and restore frame
           pointers and makes an extra register available in leaf functions.
           The option --ffoommiitt--lleeaaff--ffrraammee--ppooiinntteerr removes the frame pointer for
           leaf functions, which might make debugging harder.

       --mmttllss--ddiirreecctt--sseegg--rreeffss
       --mmnnoo--ttllss--ddiirreecctt--sseegg--rreeffss
           Controls whether TLS variables may be accessed with offsets from
           the TLS segment register (%gs for 32-bit, %fs for 64-bit), or
           whether the thread base pointer must be added.  Whether or not this
           is valid depends on the operating system, and whether it maps the
           segment to cover the entire TLS area.

           For systems that use the GNU C Library, the default is on.

       --mmssssee22aavvxx
       --mmnnoo--ssssee22aavvxx
           Specify that the assembler should encode SSE instructions with VEX
           prefix.  The option --mmaavvxx turns this on by default.

       --mmffeennttrryy
       --mmnnoo--ffeennttrryy
           If profiling is active (--ppgg), put the profiling counter call before
           the prologue.  Note: On x86 architectures the attribute
           "ms_hook_prologue" isn't possible at the moment for --mmffeennttrryy and
           --ppgg.

       --mmrreeccoorrdd--mmccoouunntt
       --mmnnoo--rreeccoorrdd--mmccoouunntt
           If profiling is active (--ppgg), generate a __mcount_loc section that
           contains pointers to each profiling call. This is useful for
           automatically patching and out calls.

       --mmnnoopp--mmccoouunntt
       --mmnnoo--nnoopp--mmccoouunntt
           If profiling is active (--ppgg), generate the calls to the profiling
           functions as NOPs. This is useful when they should be patched in
           later dynamically. This is likely only useful together with
           --mmrreeccoorrdd--mmccoouunntt.

       --mmsskkiipp--rraaxx--sseettuupp
       --mmnnoo--sskkiipp--rraaxx--sseettuupp
           When generating code for the x86-64 architecture with SSE
           extensions disabled, --mmsskkiipp--rraaxx--sseettuupp can be used to skip setting
           up RAX register when there are no variable arguments passed in
           vector registers.

           WWaarrnniinngg:: Since RAX register is used to avoid unnecessarily saving
           vector registers on stack when passing variable arguments, the
           impacts of this option are callees may waste some stack space,
           misbehave or jump to a random location.  GCC 4.4 or newer don't
           have those issues, regardless the RAX register value.

       --mm88bbiitt--iiddiivv
       --mmnnoo--88bbiitt--iiddiivv
           On some processors, like Intel Atom, 8-bit unsigned integer divide
           is much faster than 32-bit/64-bit integer divide.  This option
           generates a run-time check.  If both dividend and divisor are
           within range of 0 to 255, 8-bit unsigned integer divide is used
           instead of 32-bit/64-bit integer divide.

       --mmaavvxx225566--sspplliitt--uunnaalliiggnneedd--llooaadd
       --mmaavvxx225566--sspplliitt--uunnaalliiggnneedd--ssttoorree
           Split 32-byte AVX unaligned load and store.

       --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd==_g_u_a_r_d
       --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--rreegg==_r_e_g
       --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--ooffffsseett==_o_f_f_s_e_t
           Generate stack protection code using canary at _g_u_a_r_d.  Supported
           locations are gglloobbaall for global canary or ttllss for per-thread canary
           in the TLS block (the default).  This option has effect only when
           --ffssttaacckk--pprrootteeccttoorr or --ffssttaacckk--pprrootteeccttoorr--aallll is specified.

           With the latter choice the options --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--rreegg==_r_e_g
           and --mmssttaacckk--pprrootteeccttoorr--gguuaarrdd--ooffffsseett==_o_f_f_s_e_t furthermore specify which
           segment register (%fs or %gs) to use as base register for reading
           the canary, and from what offset from that base register.  The
           default for those is as specified in the relevant ABI.

       --mmmmiittiiggaattee--rroopp
           Try to avoid generating code sequences that contain unintended
           return opcodes, to mitigate against certain forms of attack. At the
           moment, this option is limited in what it can do and should not be
           relied on to provide serious protection.

       --mmggeenneerraall--rreeggss--oonnllyy
           Generate code that uses only the general-purpose registers.  This
           prevents the compiler from using floating-point, vector, mask and
           bound registers.

       --mmiinnddiirreecctt--bbrraanncchh==_c_h_o_i_c_e
           Convert indirect call and jump with _c_h_o_i_c_e.  The default is kkeeeepp,
           which keeps indirect call and jump unmodified.  tthhuunnkk converts
           indirect call and jump to call and return thunk.  tthhuunnkk--iinnlliinnee
           converts indirect call and jump to inlined call and return thunk.
           tthhuunnkk--eexxtteerrnn converts indirect call and jump to external call and
           return thunk provided in a separate object file.  You can control
           this behavior for a specific function by using the function
           attribute "indirect_branch".

           Note that --mmccmmooddeell==llaarrggee is incompatible with
           --mmiinnddiirreecctt--bbrraanncchh==tthhuunnkk and --mmiinnddiirreecctt--bbrraanncchh==tthhuunnkk--eexxtteerrnn since
           the thunk function may not be reachable in the large code model.

           Note that --mmiinnddiirreecctt--bbrraanncchh==tthhuunnkk--eexxtteerrnn is incompatible with
           --ffccff--pprrootteeccttiioonn==bbrraanncchh and --ffcchheecckk--ppooiinntteerr--bboouunnddss since the
           external thunk can not be modified to disable control-flow check.

       --mmffuunnccttiioonn--rreettuurrnn==_c_h_o_i_c_e
           Convert function return with _c_h_o_i_c_e.  The default is kkeeeepp, which
           keeps function return unmodified.  tthhuunnkk converts function return
           to call and return thunk.  tthhuunnkk--iinnlliinnee converts function return to
           inlined call and return thunk.  tthhuunnkk--eexxtteerrnn converts function
           return to external call and return thunk provided in a separate
           object file.  You can control this behavior for a specific function
           by using the function attribute "function_return".

           Note that --mmccmmooddeell==llaarrggee is incompatible with
           --mmffuunnccttiioonn--rreettuurrnn==tthhuunnkk and --mmffuunnccttiioonn--rreettuurrnn==tthhuunnkk--eexxtteerrnn since
           the thunk function may not be reachable in the large code model.

       --mmiinnddiirreecctt--bbrraanncchh--rreeggiisstteerr
           Force indirect call and jump via register.

       These --mm switches are supported in addition to the above on x86-64
       processors in 64-bit environments.

       --mm3322
       --mm6644
       --mmxx3322
       --mm1166
       --mmiiaammccuu
           Generate code for a 16-bit, 32-bit or 64-bit environment.  The --mm3322
           option sets "int", "long", and pointer types to 32 bits, and
           generates code that runs on any i386 system.

           The --mm6644 option sets "int" to 32 bits and "long" and pointer types
           to 64 bits, and generates code for the x86-64 architecture.  For
           Darwin only the --mm6644 option also turns off the --ffnnoo--ppiicc and
           --mmddyynnaammiicc--nnoo--ppiicc options.

           The --mmxx3322 option sets "int", "long", and pointer types to 32 bits,
           and generates code for the x86-64 architecture.

           The --mm1166 option is the same as --mm3322, except for that it outputs the
           ".code16gcc" assembly directive at the beginning of the assembly
           output so that the binary can run in 16-bit mode.

           The --mmiiaammccuu option generates code which conforms to Intel MCU
           psABI.  It requires the --mm3322 option to be turned on.

       --mmnnoo--rreedd--zzoonnee
           Do not use a so-called "red zone" for x86-64 code.  The red zone is
           mandated by the x86-64 ABI; it is a 128-byte area beyond the
           location of the stack pointer that is not modified by signal or
           interrupt handlers and therefore can be used for temporary data
           without adjusting the stack pointer.  The flag --mmnnoo--rreedd--zzoonnee
           disables this red zone.

       --mmccmmooddeell==ssmmaallll
           Generate code for the small code model: the program and its symbols
           must be linked in the lower 2 GB of the address space.  Pointers
           are 64 bits.  Programs can be statically or dynamically linked.
           This is the default code model.

       --mmccmmooddeell==kkeerrnneell
           Generate code for the kernel code model.  The kernel runs in the
           negative 2 GB of the address space.  This model has to be used for
           Linux kernel code.

       --mmccmmooddeell==mmeeddiiuumm
           Generate code for the medium model: the program is linked in the
           lower 2 GB of the address space.  Small symbols are also placed
           there.  Symbols with sizes larger than --mmllaarrggee--ddaattaa--tthhrreesshhoolldd are
           put into large data or BSS sections and can be located above 2GB.
           Programs can be statically or dynamically linked.

       --mmccmmooddeell==llaarrggee
           Generate code for the large model.  This model makes no assumptions
           about addresses and sizes of sections.

       --mmaaddddrreessss--mmooddee==lloonngg
           Generate code for long address mode.  This is only supported for
           64-bit and x32 environments.  It is the default address mode for
           64-bit environments.

       --mmaaddddrreessss--mmooddee==sshhoorrtt
           Generate code for short address mode.  This is only supported for
           32-bit and x32 environments.  It is the default address mode for
           32-bit and x32 environments.

       _x_8_6 _W_i_n_d_o_w_s _O_p_t_i_o_n_s

       These additional options are available for Microsoft Windows targets:

       --mmccoonnssoollee
           This option specifies that a console application is to be
           generated, by instructing the linker to set the PE header subsystem
           type required for console applications.  This option is available
           for Cygwin and MinGW targets and is enabled by default on those
           targets.

       --mmddllll
           This option is available for Cygwin and MinGW targets.  It
           specifies that a DLL---a dynamic link library---is to be generated,
           enabling the selection of the required runtime startup object and
           entry point.

       --mmnnoopp--ffuunn--ddlllliimmppoorrtt
           This option is available for Cygwin and MinGW targets.  It
           specifies that the "dllimport" attribute should be ignored.

       --mmtthhrreeaadd
           This option is available for MinGW targets. It specifies that
           MinGW-specific thread support is to be used.

       --mmuunniiccooddee
           This option is available for MinGW-w64 targets.  It causes the
           "UNICODE" preprocessor macro to be predefined, and chooses Unicode-
           capable runtime startup code.

       --mmwwiinn3322
           This option is available for Cygwin and MinGW targets.  It
           specifies that the typical Microsoft Windows predefined macros are
           to be set in the pre-processor, but does not influence the choice
           of runtime library/startup code.

       --mmwwiinnddoowwss
           This option is available for Cygwin and MinGW targets.  It
           specifies that a GUI application is to be generated by instructing
           the linker to set the PE header subsystem type appropriately.

       --ffnnoo--sseett--ssttaacckk--eexxeeccuuttaabbllee
           This option is available for MinGW targets. It specifies that the
           executable flag for the stack used by nested functions isn't set.
           This is necessary for binaries running in kernel mode of Microsoft
           Windows, as there the User32 API, which is used to set executable
           privileges, isn't available.

       --ffwwrriittaabbllee--rreellooccaatteedd--rrddaattaa
           This option is available for MinGW and Cygwin targets.  It
           specifies that relocated-data in read-only section is put into the
           ".data" section.  This is a necessary for older runtimes not
           supporting modification of ".rdata" sections for pseudo-relocation.

       --mmppee--aalliiggnneedd--ccoommmmoonnss
           This option is available for Cygwin and MinGW targets.  It
           specifies that the GNU extension to the PE file format that permits
           the correct alignment of COMMON variables should be used when
           generating code.  It is enabled by default if GCC detects that the
           target assembler found during configuration supports the feature.

       See also under xx8866 OOppttiioonnss for standard options.

       _X_s_t_o_r_m_y_1_6 _O_p_t_i_o_n_s

       These options are defined for Xstormy16:

       --mmssiimm
           Choose startup files and linker script suitable for the simulator.

       _X_t_e_n_s_a _O_p_t_i_o_n_s

       These options are supported for Xtensa targets:

       --mmccoonnsstt1166
       --mmnnoo--ccoonnsstt1166
           Enable or disable use of "CONST16" instructions for loading
           constant values.  The "CONST16" instruction is currently not a
           standard option from Tensilica.  When enabled, "CONST16"
           instructions are always used in place of the standard "L32R"
           instructions.  The use of "CONST16" is enabled by default only if
           the "L32R" instruction is not available.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
           Enable or disable use of fused multiply/add and multiply/subtract
           instructions in the floating-point option.  This has no effect if
           the floating-point option is not also enabled.  Disabling fused
           multiply/add and multiply/subtract instructions forces the compiler
           to use separate instructions for the multiply and add/subtract
           operations.  This may be desirable in some cases where strict IEEE
           754-compliant results are required: the fused multiply add/subtract
           instructions do not round the intermediate result, thereby
           producing results with _m_o_r_e bits of precision than specified by the
           IEEE standard.  Disabling fused multiply add/subtract instructions
           also ensures that the program output is not sensitive to the
           compiler's ability to combine multiply and add/subtract operations.

       --mmsseerriiaalliizzee--vvoollaattiillee
       --mmnnoo--sseerriiaalliizzee--vvoollaattiillee
           When this option is enabled, GCC inserts "MEMW" instructions before
           "volatile" memory references to guarantee sequential consistency.
           The default is --mmsseerriiaalliizzee--vvoollaattiillee.  Use --mmnnoo--sseerriiaalliizzee--vvoollaattiillee
           to omit the "MEMW" instructions.

       --mmffoorrccee--nnoo--ppiicc
           For targets, like GNU/Linux, where all user-mode Xtensa code must
           be position-independent code (PIC), this option disables PIC for
           compiling kernel code.

       --mmtteexxtt--sseeccttiioonn--lliitteerraallss
       --mmnnoo--tteexxtt--sseeccttiioonn--lliitteerraallss
           These options control the treatment of literal pools.  The default
           is --mmnnoo--tteexxtt--sseeccttiioonn--lliitteerraallss, which places literals in a separate
           section in the output file.  This allows the literal pool to be
           placed in a data RAM/ROM, and it also allows the linker to combine
           literal pools from separate object files to remove redundant
           literals and improve code size.  With --mmtteexxtt--sseeccttiioonn--lliitteerraallss, the
           literals are interspersed in the text section in order to keep them
           as close as possible to their references.  This may be necessary
           for large assembly files.  Literals for each function are placed
           right before that function.

       --mmaauuttoo--lliittppoooollss
       --mmnnoo--aauuttoo--lliittppoooollss
           These options control the treatment of literal pools.  The default
           is --mmnnoo--aauuttoo--lliittppoooollss, which places literals in a separate section
           in the output file unless --mmtteexxtt--sseeccttiioonn--lliitteerraallss is used.  With
           --mmaauuttoo--lliittppoooollss the literals are interspersed in the text section
           by the assembler.  Compiler does not produce explicit ".literal"
           directives and loads literals into registers with "MOVI"
           instructions instead of "L32R" to let the assembler do relaxation
           and place literals as necessary.  This option allows assembler to
           create several literal pools per function and assemble very big
           functions, which may not be possible with --mmtteexxtt--sseeccttiioonn--lliitteerraallss.

       --mmttaarrggeett--aalliiggnn
       --mmnnoo--ttaarrggeett--aalliiggnn
           When this option is enabled, GCC instructs the assembler to
           automatically align instructions to reduce branch penalties at the
           expense of some code density.  The assembler attempts to widen
           density instructions to align branch targets and the instructions
           following call instructions.  If there are not enough preceding
           safe density instructions to align a target, no widening is
           performed.  The default is --mmttaarrggeett--aalliiggnn.  These options do not
           affect the treatment of auto-aligned instructions like "LOOP",
           which the assembler always aligns, either by widening density
           instructions or by inserting NOP instructions.

       --mmlloonnggccaallllss
       --mmnnoo--lloonnggccaallllss
           When this option is enabled, GCC instructs the assembler to
           translate direct calls to indirect calls unless it can determine
           that the target of a direct call is in the range allowed by the
           call instruction.  This translation typically occurs for calls to
           functions in other source files.  Specifically, the assembler
           translates a direct "CALL" instruction into an "L32R" followed by a
           "CALLX" instruction.  The default is --mmnnoo--lloonnggccaallllss.  This option
           should be used in programs where the call target can potentially be
           out of range.  This option is implemented in the assembler, not the
           compiler, so the assembly code generated by GCC still shows direct
           call instructions---look at the disassembled object code to see the
           actual instructions.  Note that the assembler uses an indirect call
           for every cross-file call, not just those that really are out of
           range.

       _z_S_e_r_i_e_s _O_p_t_i_o_n_s

       These are listed under

EENNVVIIRROONNMMEENNTT
       This section describes several environment variables that affect how
       GCC operates.  Some of them work by specifying directories or prefixes
       to use when searching for various kinds of files.  Some are used to
       specify other aspects of the compilation environment.

       Note that you can also specify places to search using options such as
       --BB, --II and --LL.  These take precedence over places specified using
       environment variables, which in turn take precedence over those
       specified by the configuration of GCC.

       LLAANNGG
       LLCC__CCTTYYPPEE
       LLCC__MMEESSSSAAGGEESS
       LLCC__AALLLL
           These environment variables control the way that GCC uses
           localization information which allows GCC to work with different
           national conventions.  GCC inspects the locale categories LLCC__CCTTYYPPEE
           and LLCC__MMEESSSSAAGGEESS if it has been configured to do so.  These locale
           categories can be set to any value supported by your installation.
           A typical value is eenn__GGBB..UUTTFF--88 for English in the United Kingdom
           encoded in UTF-8.

           The LLCC__CCTTYYPPEE environment variable specifies character
           classification.  GCC uses it to determine the character boundaries
           in a string; this is needed for some multibyte encodings that
           contain quote and escape characters that are otherwise interpreted
           as a string end or escape.

           The LLCC__MMEESSSSAAGGEESS environment variable specifies the language to use
           in diagnostic messages.

           If the LLCC__AALLLL environment variable is set, it overrides the value
           of LLCC__CCTTYYPPEE and LLCC__MMEESSSSAAGGEESS; otherwise, LLCC__CCTTYYPPEE and LLCC__MMEESSSSAAGGEESS
           default to the value of the LLAANNGG environment variable.  If none of
           these variables are set, GCC defaults to traditional C English
           behavior.

       TTMMPPDDIIRR
           If TTMMPPDDIIRR is set, it specifies the directory to use for temporary
           files.  GCC uses temporary files to hold the output of one stage of
           compilation which is to be used as input to the next stage: for
           example, the output of the preprocessor, which is the input to the
           compiler proper.

       GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG
           Setting GGCCCC__CCOOMMPPAARREE__DDEEBBUUGG is nearly equivalent to passing
           --ffccoommppaarree--ddeebbuugg to the compiler driver.  See the documentation of
           this option for more details.

       GGCCCC__EEXXEECC__PPRREEFFIIXX
           If GGCCCC__EEXXEECC__PPRREEFFIIXX is set, it specifies a prefix to use in the
           names of the subprograms executed by the compiler.  No slash is
           added when this prefix is combined with the name of a subprogram,
           but you can specify a prefix that ends with a slash if you wish.

           If GGCCCC__EEXXEECC__PPRREEFFIIXX is not set, GCC attempts to figure out an
           appropriate prefix to use based on the pathname it is invoked with.

           If GCC cannot find the subprogram using the specified prefix, it
           tries looking in the usual places for the subprogram.

           The default value of GGCCCC__EEXXEECC__PPRREEFFIIXX is _p_r_e_f_i_x_/_l_i_b_/_g_c_c_/ where
           _p_r_e_f_i_x is the prefix to the installed compiler. In many cases
           _p_r_e_f_i_x is the value of "prefix" when you ran the _c_o_n_f_i_g_u_r_e script.

           Other prefixes specified with --BB take precedence over this prefix.

           This prefix is also used for finding files such as _c_r_t_0_._o that are
           used for linking.

           In addition, the prefix is used in an unusual way in finding the
           directories to search for header files.  For each of the standard
           directories whose name normally begins with //uussrr//llooccaall//lliibb//ggcccc
           (more precisely, with the value of GGCCCC__IINNCCLLUUDDEE__DDIIRR), GCC tries
           replacing that beginning with the specified prefix to produce an
           alternate directory name.  Thus, with --BBffoooo//, GCC searches _f_o_o_/_b_a_r
           just before it searches the standard directory _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_b_a_r.
           If a standard directory begins with the configured _p_r_e_f_i_x then the
           value of _p_r_e_f_i_x is replaced by GGCCCC__EEXXEECC__PPRREEFFIIXX when looking for
           header files.

       CCOOMMPPIILLEERR__PPAATTHH
           The value of CCOOMMPPIILLEERR__PPAATTHH is a colon-separated list of
           directories, much like PPAATTHH.  GCC tries the directories thus
           specified when searching for subprograms, if it cannot find the
           subprograms using GGCCCC__EEXXEECC__PPRREEFFIIXX.

       LLIIBBRRAARRYY__PPAATTHH
           The value of LLIIBBRRAARRYY__PPAATTHH is a colon-separated list of directories,
           much like PPAATTHH.  When configured as a native compiler, GCC tries
           the directories thus specified when searching for special linker
           files, if it cannot find them using GGCCCC__EEXXEECC__PPRREEFFIIXX.  Linking using
           GCC also uses these directories when searching for ordinary
           libraries for the --ll option (but directories specified with --LL come
           first).

       LLAANNGG
           This variable is used to pass locale information to the compiler.
           One way in which this information is used is to determine the
           character set to be used when character literals, string literals
           and comments are parsed in C and C++.  When the compiler is
           configured to allow multibyte characters, the following values for
           LLAANNGG are recognized:

           CC--JJIISS
               Recognize JIS characters.

           CC--SSJJIISS
               Recognize SJIS characters.

           CC--EEUUCCJJPP
               Recognize EUCJP characters.

           If LLAANNGG is not defined, or if it has some other value, then the
           compiler uses "mblen" and "mbtowc" as defined by the default locale
           to recognize and translate multibyte characters.

       Some additional environment variables affect the behavior of the
       preprocessor.

       CCPPAATTHH
       CC__IINNCCLLUUDDEE__PPAATTHH
       CCPPLLUUSS__IINNCCLLUUDDEE__PPAATTHH
       OOBBJJCC__IINNCCLLUUDDEE__PPAATTHH
           Each variable's value is a list of directories separated by a
           special character, much like PPAATTHH, in which to look for header
           files.  The special character, "PATH_SEPARATOR", is target-
           dependent and determined at GCC build time.  For Microsoft Windows-
           based targets it is a semicolon, and for almost all other targets
           it is a colon.

           CCPPAATTHH specifies a list of directories to be searched as if
           specified with --II, but after any paths given with --II options on the
           command line.  This environment variable is used regardless of
           which language is being preprocessed.

           The remaining environment variables apply only when preprocessing
           the particular language indicated.  Each specifies a list of
           directories to be searched as if specified with --iissyysstteemm, but after
           any paths given with --iissyysstteemm options on the command line.

           In all these variables, an empty element instructs the compiler to
           search its current working directory.  Empty elements can appear at
           the beginning or end of a path.  For instance, if the value of
           CCPPAATTHH is ":/special/include", that has the same effect as
           --II.. --II//ssppeecciiaall//iinncclluuddee.

       DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT
           If this variable is set, its value specifies how to output
           dependencies for Make based on the non-system header files
           processed by the compiler.  System header files are ignored in the
           dependency output.

           The value of DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT can be just a file name, in which
           case the Make rules are written to that file, guessing the target
           name from the source file name.  Or the value can have the form
           _f_i_l_e _t_a_r_g_e_t, in which case the rules are written to file _f_i_l_e using
           _t_a_r_g_e_t as the target name.

           In other words, this environment variable is equivalent to
           combining the options --MMMM and --MMFF, with an optional --MMTT switch too.

       SSUUNNPPRROO__DDEEPPEENNDDEENNCCIIEESS
           This variable is the same as DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT (see above),
           except that system header files are not ignored, so it implies --MM
           rather than --MMMM.  However, the dependence on the main input file is
           omitted.

       SSOOUURRCCEE__DDAATTEE__EEPPOOCCHH
           If this variable is set, its value specifies a UNIX timestamp to be
           used in replacement of the current date and time in the "__DATE__"
           and "__TIME__" macros, so that the embedded timestamps become
           reproducible.

           The value of SSOOUURRCCEE__DDAATTEE__EEPPOOCCHH must be a UNIX timestamp, defined as
           the number of seconds (excluding leap seconds) since 01 Jan 1970
           00:00:00 represented in ASCII; identical to the output of
           @@ccoommmmaanndd{{ddaattee ++%%ss} on GNU/Linux and other systems that support the
           %s extension in the "date" command.

           The value should be a known timestamp such as the last modification
           time of the source or package and it should be set by the build
           process.

BBUUGGSS
       For instructions on reporting bugs, see
       <ffiillee:://////uussrr//sshhaarree//ddoocc//ggcccc--88//RREEAADDMMEE..BBuuggss>.

FFOOOOTTNNOOTTEESS
       1.  On some systems, ggcccc --sshhaarreedd needs to build supplementary stub code
           for constructors to work.  On multi-libbed systems, ggcccc --sshhaarreedd
           must select the correct support libraries to link against.  Failing
           to supply the correct flags may lead to subtle defects.  Supplying
           them in cases where they are not necessary is innocuous.

SSEEEE AALLSSOO
       ggppll(7), ggffddll(7), ffssff--ffuunnddiinngg(7), ccpppp(1), ggccoovv(1), aass(1), lldd(1), ggddbb(1),
       ddbbxx(1) and the Info entries for _g_c_c, _c_p_p, _a_s, _l_d, _b_i_n_u_t_i_l_s and _g_d_b.

AAUUTTHHOORR
       See the Info entry for ggcccc, or
       <hhttttpp::////ggcccc..ggnnuu..oorrgg//oonnlliinneeddooccss//ggcccc//CCoonnttrriibbuuttoorrss..hhttmmll>, for contributors
       to GCC.

CCOOPPYYRRIIGGHHTT
       Copyright (c) 1988-2018 Free Software Foundation, Inc.

       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3 or
       any later version published by the Free Software Foundation; with the
       Invariant Sections being "GNU General Public License" and "Funding Free
       Software", the Front-Cover texts being (a) (see below), and with the
       Back-Cover Texts being (b) (see below).  A copy of the license is
       included in the ggffddll(7) man page.

       (a) The FSF's Front-Cover Text is:

            A GNU Manual

       (b) The FSF's Back-Cover Text is:

            You have freedom to copy and modify this GNU Manual, like GNU
            software.  Copies published by the Free Software Foundation raise
            funds for GNU development.

gcc-8                             2019-04-06                            GCC(1)
